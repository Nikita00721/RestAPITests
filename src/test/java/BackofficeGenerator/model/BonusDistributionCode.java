/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * BonusDistributionCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BonusDistributionCode {
  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BINDED_PLAYER_ID = "BindedPlayerId";
  @SerializedName(SERIALIZED_NAME_BINDED_PLAYER_ID)
  private Integer bindedPlayerId;

  public static final String SERIALIZED_NAME_PLAYER_NAME = "PlayerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public static final String SERIALIZED_NAME_INT_PLAYER_ID = "IntPlayerId";
  @SerializedName(SERIALIZED_NAME_INT_PLAYER_ID)
  private String intPlayerId;

  public static final String SERIALIZED_NAME_EXT_PLAYER_ID = "ExtPlayerId";
  @SerializedName(SERIALIZED_NAME_EXT_PLAYER_ID)
  private String extPlayerId;

  public static final String SERIALIZED_NAME_ERROR_INFORMATION = "ErrorInformation";
  @SerializedName(SERIALIZED_NAME_ERROR_INFORMATION)
  private String errorInformation;

  public static final String SERIALIZED_NAME_DRAFT_RECORD_ID = "DraftRecordId";
  @SerializedName(SERIALIZED_NAME_DRAFT_RECORD_ID)
  private Integer draftRecordId;

  public BonusDistributionCode() {
  }

  public BonusDistributionCode amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public BonusDistributionCode bindedPlayerId(Integer bindedPlayerId) {
    this.bindedPlayerId = bindedPlayerId;
    return this;
  }

   /**
   * Get bindedPlayerId
   * @return bindedPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getBindedPlayerId() {
    return bindedPlayerId;
  }

  public void setBindedPlayerId(Integer bindedPlayerId) {
    this.bindedPlayerId = bindedPlayerId;
  }


  public BonusDistributionCode playerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

   /**
   * Get playerName
   * @return playerName
  **/
  @javax.annotation.Nullable
  public String getPlayerName() {
    return playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }


  public BonusDistributionCode intPlayerId(String intPlayerId) {
    this.intPlayerId = intPlayerId;
    return this;
  }

   /**
   * Get intPlayerId
   * @return intPlayerId
  **/
  @javax.annotation.Nullable
  public String getIntPlayerId() {
    return intPlayerId;
  }

  public void setIntPlayerId(String intPlayerId) {
    this.intPlayerId = intPlayerId;
  }


  public BonusDistributionCode extPlayerId(String extPlayerId) {
    this.extPlayerId = extPlayerId;
    return this;
  }

   /**
   * Get extPlayerId
   * @return extPlayerId
  **/
  @javax.annotation.Nullable
  public String getExtPlayerId() {
    return extPlayerId;
  }

  public void setExtPlayerId(String extPlayerId) {
    this.extPlayerId = extPlayerId;
  }


  public BonusDistributionCode errorInformation(String errorInformation) {
    this.errorInformation = errorInformation;
    return this;
  }

   /**
   * Get errorInformation
   * @return errorInformation
  **/
  @javax.annotation.Nullable
  public String getErrorInformation() {
    return errorInformation;
  }

  public void setErrorInformation(String errorInformation) {
    this.errorInformation = errorInformation;
  }


  public BonusDistributionCode draftRecordId(Integer draftRecordId) {
    this.draftRecordId = draftRecordId;
    return this;
  }

   /**
   * Get draftRecordId
   * @return draftRecordId
  **/
  @javax.annotation.Nullable
  public Integer getDraftRecordId() {
    return draftRecordId;
  }

  public void setDraftRecordId(Integer draftRecordId) {
    this.draftRecordId = draftRecordId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BonusDistributionCode bonusDistributionCode = (BonusDistributionCode) o;
    return Objects.equals(this.amount, bonusDistributionCode.amount) &&
        Objects.equals(this.bindedPlayerId, bonusDistributionCode.bindedPlayerId) &&
        Objects.equals(this.playerName, bonusDistributionCode.playerName) &&
        Objects.equals(this.intPlayerId, bonusDistributionCode.intPlayerId) &&
        Objects.equals(this.extPlayerId, bonusDistributionCode.extPlayerId) &&
        Objects.equals(this.errorInformation, bonusDistributionCode.errorInformation) &&
        Objects.equals(this.draftRecordId, bonusDistributionCode.draftRecordId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, bindedPlayerId, playerName, intPlayerId, extPlayerId, errorInformation, draftRecordId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BonusDistributionCode {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bindedPlayerId: ").append(toIndentedString(bindedPlayerId)).append("\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("    intPlayerId: ").append(toIndentedString(intPlayerId)).append("\n");
    sb.append("    extPlayerId: ").append(toIndentedString(extPlayerId)).append("\n");
    sb.append("    errorInformation: ").append(toIndentedString(errorInformation)).append("\n");
    sb.append("    draftRecordId: ").append(toIndentedString(draftRecordId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Amount");
    openapiFields.add("BindedPlayerId");
    openapiFields.add("PlayerName");
    openapiFields.add("IntPlayerId");
    openapiFields.add("ExtPlayerId");
    openapiFields.add("ErrorInformation");
    openapiFields.add("DraftRecordId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BonusDistributionCode
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BonusDistributionCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BonusDistributionCode is not found in the empty JSON string", BonusDistributionCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BonusDistributionCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BonusDistributionCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PlayerName") != null && !jsonObj.get("PlayerName").isJsonNull()) && !jsonObj.get("PlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerName").toString()));
      }
      if ((jsonObj.get("IntPlayerId") != null && !jsonObj.get("IntPlayerId").isJsonNull()) && !jsonObj.get("IntPlayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntPlayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntPlayerId").toString()));
      }
      if ((jsonObj.get("ExtPlayerId") != null && !jsonObj.get("ExtPlayerId").isJsonNull()) && !jsonObj.get("ExtPlayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtPlayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtPlayerId").toString()));
      }
      if ((jsonObj.get("ErrorInformation") != null && !jsonObj.get("ErrorInformation").isJsonNull()) && !jsonObj.get("ErrorInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorInformation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BonusDistributionCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BonusDistributionCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BonusDistributionCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BonusDistributionCode.class));

       return (TypeAdapter<T>) new TypeAdapter<BonusDistributionCode>() {
           @Override
           public void write(JsonWriter out, BonusDistributionCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BonusDistributionCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BonusDistributionCode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BonusDistributionCode
  * @throws IOException if the JSON string is invalid with respect to BonusDistributionCode
  */
  public static BonusDistributionCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BonusDistributionCode.class);
  }

 /**
  * Convert an instance of BonusDistributionCode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

