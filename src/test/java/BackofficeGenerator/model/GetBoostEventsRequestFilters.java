/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GetBoostEventsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetBoostEventsRequestFilters {
  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Integer champId;

  public static final String SERIALIZED_NAME_LIVE_TEMPLATE_ID = "LiveTemplateId";
  @SerializedName(SERIALIZED_NAME_LIVE_TEMPLATE_ID)
  private Integer liveTemplateId;

  public static final String SERIALIZED_NAME_PRELIVE_TEMPLATE_ID = "PreliveTemplateId";
  @SerializedName(SERIALIZED_NAME_PRELIVE_TEMPLATE_ID)
  private Integer preliveTemplateId;

  public static final String SERIALIZED_NAME_SEARCH_ID_NAME = "SearchIdName";
  @SerializedName(SERIALIZED_NAME_SEARCH_ID_NAME)
  private String searchIdName;

  public static final String SERIALIZED_NAME_IS_LIMITED_TIME = "IsLimitedTime";
  @SerializedName(SERIALIZED_NAME_IS_LIMITED_TIME)
  private Boolean isLimitedTime;

  public static final String SERIALIZED_NAME_BOOST_PROPS = "BoostProps";
  @SerializedName(SERIALIZED_NAME_BOOST_PROPS)
  private List<BoostItemProps> boostProps;

  public static final String SERIALIZED_NAME_EVENTS_MODE = "EventsMode";
  @SerializedName(SERIALIZED_NAME_EVENTS_MODE)
  private BoostEventsMode eventsMode;

  public static final String SERIALIZED_NAME_SORTING = "Sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private BoostEventsSorting sorting;

  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_MANUAL_ITEMS_FROM = "ManualItemsFrom";
  @SerializedName(SERIALIZED_NAME_MANUAL_ITEMS_FROM)
  private Integer manualItemsFrom;

  public static final String SERIALIZED_NAME_MANUAL_ITEMS_TO = "ManualItemsTo";
  @SerializedName(SERIALIZED_NAME_MANUAL_ITEMS_TO)
  private Integer manualItemsTo;

  public static final String SERIALIZED_NAME_BOOST_CONFIG_ID = "BoostConfigId";
  @SerializedName(SERIALIZED_NAME_BOOST_CONFIG_ID)
  private Integer boostConfigId;

  public GetBoostEventsRequestFilters() {
  }

  public GetBoostEventsRequestFilters sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public GetBoostEventsRequestFilters categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public GetBoostEventsRequestFilters champId(Integer champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nullable
  public Integer getChampId() {
    return champId;
  }

  public void setChampId(Integer champId) {
    this.champId = champId;
  }


  public GetBoostEventsRequestFilters liveTemplateId(Integer liveTemplateId) {
    this.liveTemplateId = liveTemplateId;
    return this;
  }

   /**
   * Get liveTemplateId
   * @return liveTemplateId
  **/
  @javax.annotation.Nullable
  public Integer getLiveTemplateId() {
    return liveTemplateId;
  }

  public void setLiveTemplateId(Integer liveTemplateId) {
    this.liveTemplateId = liveTemplateId;
  }


  public GetBoostEventsRequestFilters preliveTemplateId(Integer preliveTemplateId) {
    this.preliveTemplateId = preliveTemplateId;
    return this;
  }

   /**
   * Get preliveTemplateId
   * @return preliveTemplateId
  **/
  @javax.annotation.Nullable
  public Integer getPreliveTemplateId() {
    return preliveTemplateId;
  }

  public void setPreliveTemplateId(Integer preliveTemplateId) {
    this.preliveTemplateId = preliveTemplateId;
  }


  public GetBoostEventsRequestFilters searchIdName(String searchIdName) {
    this.searchIdName = searchIdName;
    return this;
  }

   /**
   * Get searchIdName
   * @return searchIdName
  **/
  @javax.annotation.Nullable
  public String getSearchIdName() {
    return searchIdName;
  }

  public void setSearchIdName(String searchIdName) {
    this.searchIdName = searchIdName;
  }


  public GetBoostEventsRequestFilters isLimitedTime(Boolean isLimitedTime) {
    this.isLimitedTime = isLimitedTime;
    return this;
  }

   /**
   * Get isLimitedTime
   * @return isLimitedTime
  **/
  @javax.annotation.Nullable
  public Boolean getIsLimitedTime() {
    return isLimitedTime;
  }

  public void setIsLimitedTime(Boolean isLimitedTime) {
    this.isLimitedTime = isLimitedTime;
  }


  public GetBoostEventsRequestFilters boostProps(List<BoostItemProps> boostProps) {
    this.boostProps = boostProps;
    return this;
  }

  public GetBoostEventsRequestFilters addBoostPropsItem(BoostItemProps boostPropsItem) {
    if (this.boostProps == null) {
      this.boostProps = new ArrayList<>();
    }
    this.boostProps.add(boostPropsItem);
    return this;
  }

   /**
   * Get boostProps
   * @return boostProps
  **/
  @javax.annotation.Nullable
  public List<BoostItemProps> getBoostProps() {
    return boostProps;
  }

  public void setBoostProps(List<BoostItemProps> boostProps) {
    this.boostProps = boostProps;
  }


  public GetBoostEventsRequestFilters eventsMode(BoostEventsMode eventsMode) {
    this.eventsMode = eventsMode;
    return this;
  }

   /**
   * Get eventsMode
   * @return eventsMode
  **/
  @javax.annotation.Nullable
  public BoostEventsMode getEventsMode() {
    return eventsMode;
  }

  public void setEventsMode(BoostEventsMode eventsMode) {
    this.eventsMode = eventsMode;
  }


  public GetBoostEventsRequestFilters sorting(BoostEventsSorting sorting) {
    this.sorting = sorting;
    return this;
  }

   /**
   * Get sorting
   * @return sorting
  **/
  @javax.annotation.Nullable
  public BoostEventsSorting getSorting() {
    return sorting;
  }

  public void setSorting(BoostEventsSorting sorting) {
    this.sorting = sorting;
  }


  public GetBoostEventsRequestFilters dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public GetBoostEventsRequestFilters dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public GetBoostEventsRequestFilters manualItemsFrom(Integer manualItemsFrom) {
    this.manualItemsFrom = manualItemsFrom;
    return this;
  }

   /**
   * Get manualItemsFrom
   * @return manualItemsFrom
  **/
  @javax.annotation.Nullable
  public Integer getManualItemsFrom() {
    return manualItemsFrom;
  }

  public void setManualItemsFrom(Integer manualItemsFrom) {
    this.manualItemsFrom = manualItemsFrom;
  }


  public GetBoostEventsRequestFilters manualItemsTo(Integer manualItemsTo) {
    this.manualItemsTo = manualItemsTo;
    return this;
  }

   /**
   * Get manualItemsTo
   * @return manualItemsTo
  **/
  @javax.annotation.Nullable
  public Integer getManualItemsTo() {
    return manualItemsTo;
  }

  public void setManualItemsTo(Integer manualItemsTo) {
    this.manualItemsTo = manualItemsTo;
  }


  public GetBoostEventsRequestFilters boostConfigId(Integer boostConfigId) {
    this.boostConfigId = boostConfigId;
    return this;
  }

   /**
   * Get boostConfigId
   * @return boostConfigId
  **/
  @javax.annotation.Nullable
  public Integer getBoostConfigId() {
    return boostConfigId;
  }

  public void setBoostConfigId(Integer boostConfigId) {
    this.boostConfigId = boostConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBoostEventsRequestFilters getBoostEventsRequestFilters = (GetBoostEventsRequestFilters) o;
    return Objects.equals(this.sportId, getBoostEventsRequestFilters.sportId) &&
        Objects.equals(this.categoryId, getBoostEventsRequestFilters.categoryId) &&
        Objects.equals(this.champId, getBoostEventsRequestFilters.champId) &&
        Objects.equals(this.liveTemplateId, getBoostEventsRequestFilters.liveTemplateId) &&
        Objects.equals(this.preliveTemplateId, getBoostEventsRequestFilters.preliveTemplateId) &&
        Objects.equals(this.searchIdName, getBoostEventsRequestFilters.searchIdName) &&
        Objects.equals(this.isLimitedTime, getBoostEventsRequestFilters.isLimitedTime) &&
        Objects.equals(this.boostProps, getBoostEventsRequestFilters.boostProps) &&
        Objects.equals(this.eventsMode, getBoostEventsRequestFilters.eventsMode) &&
        Objects.equals(this.sorting, getBoostEventsRequestFilters.sorting) &&
        Objects.equals(this.dateFrom, getBoostEventsRequestFilters.dateFrom) &&
        Objects.equals(this.dateTo, getBoostEventsRequestFilters.dateTo) &&
        Objects.equals(this.manualItemsFrom, getBoostEventsRequestFilters.manualItemsFrom) &&
        Objects.equals(this.manualItemsTo, getBoostEventsRequestFilters.manualItemsTo) &&
        Objects.equals(this.boostConfigId, getBoostEventsRequestFilters.boostConfigId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportId, categoryId, champId, liveTemplateId, preliveTemplateId, searchIdName, isLimitedTime, boostProps, eventsMode, sorting, dateFrom, dateTo, manualItemsFrom, manualItemsTo, boostConfigId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBoostEventsRequestFilters {\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    liveTemplateId: ").append(toIndentedString(liveTemplateId)).append("\n");
    sb.append("    preliveTemplateId: ").append(toIndentedString(preliveTemplateId)).append("\n");
    sb.append("    searchIdName: ").append(toIndentedString(searchIdName)).append("\n");
    sb.append("    isLimitedTime: ").append(toIndentedString(isLimitedTime)).append("\n");
    sb.append("    boostProps: ").append(toIndentedString(boostProps)).append("\n");
    sb.append("    eventsMode: ").append(toIndentedString(eventsMode)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    manualItemsFrom: ").append(toIndentedString(manualItemsFrom)).append("\n");
    sb.append("    manualItemsTo: ").append(toIndentedString(manualItemsTo)).append("\n");
    sb.append("    boostConfigId: ").append(toIndentedString(boostConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportId");
    openapiFields.add("CategoryId");
    openapiFields.add("ChampId");
    openapiFields.add("LiveTemplateId");
    openapiFields.add("PreliveTemplateId");
    openapiFields.add("SearchIdName");
    openapiFields.add("IsLimitedTime");
    openapiFields.add("BoostProps");
    openapiFields.add("EventsMode");
    openapiFields.add("Sorting");
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("ManualItemsFrom");
    openapiFields.add("ManualItemsTo");
    openapiFields.add("BoostConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetBoostEventsRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBoostEventsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBoostEventsRequestFilters is not found in the empty JSON string", GetBoostEventsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBoostEventsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBoostEventsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SearchIdName") != null && !jsonObj.get("SearchIdName").isJsonNull()) && !jsonObj.get("SearchIdName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchIdName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchIdName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BoostProps") != null && !jsonObj.get("BoostProps").isJsonNull() && !jsonObj.get("BoostProps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BoostProps` to be an array in the JSON string but got `%s`", jsonObj.get("BoostProps").toString()));
      }
      // validate the optional field `EventsMode`
      if (jsonObj.get("EventsMode") != null && !jsonObj.get("EventsMode").isJsonNull()) {
        BoostEventsMode.validateJsonElement(jsonObj.get("EventsMode"));
      }
      // validate the optional field `Sorting`
      if (jsonObj.get("Sorting") != null && !jsonObj.get("Sorting").isJsonNull()) {
        BoostEventsSorting.validateJsonElement(jsonObj.get("Sorting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBoostEventsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBoostEventsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBoostEventsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBoostEventsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBoostEventsRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetBoostEventsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBoostEventsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetBoostEventsRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBoostEventsRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetBoostEventsRequestFilters
  */
  public static GetBoostEventsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBoostEventsRequestFilters.class);
  }

 /**
  * Convert an instance of GetBoostEventsRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

