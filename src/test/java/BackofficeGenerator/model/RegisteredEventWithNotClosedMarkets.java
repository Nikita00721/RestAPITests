/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * RegisteredEventWithNotClosedMarkets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class RegisteredEventWithNotClosedMarkets {
  public static final String SERIALIZED_NAME_EXT_EVENT_ID = "ExtEventId";
  @SerializedName(SERIALIZED_NAME_EXT_EVENT_ID)
  private String extEventId;

  public static final String SERIALIZED_NAME_INT_EVENT_ID = "IntEventId";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_ID)
  private Long intEventId;

  public static final String SERIALIZED_NAME_INT_EVENT_NAME = "IntEventName";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_NAME)
  private String intEventName;

  public static final String SERIALIZED_NAME_INT_EVENT_DATE = "IntEventDate";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_DATE)
  private OffsetDateTime intEventDate;

  public static final String SERIALIZED_NAME_OPEN_MARKETS = "OpenMarkets";
  @SerializedName(SERIALIZED_NAME_OPEN_MARKETS)
  private Integer openMarkets;

  public static final String SERIALIZED_NAME_BETS = "Bets";
  @SerializedName(SERIALIZED_NAME_BETS)
  private Integer bets;

  public static final String SERIALIZED_NAME_REG_EVENT_ID = "RegEventId";
  @SerializedName(SERIALIZED_NAME_REG_EVENT_ID)
  private Long regEventId;

  public RegisteredEventWithNotClosedMarkets() {
  }

  public RegisteredEventWithNotClosedMarkets extEventId(String extEventId) {
    this.extEventId = extEventId;
    return this;
  }

   /**
   * Get extEventId
   * @return extEventId
  **/
  @javax.annotation.Nullable
  public String getExtEventId() {
    return extEventId;
  }

  public void setExtEventId(String extEventId) {
    this.extEventId = extEventId;
  }


  public RegisteredEventWithNotClosedMarkets intEventId(Long intEventId) {
    this.intEventId = intEventId;
    return this;
  }

   /**
   * Get intEventId
   * @return intEventId
  **/
  @javax.annotation.Nullable
  public Long getIntEventId() {
    return intEventId;
  }

  public void setIntEventId(Long intEventId) {
    this.intEventId = intEventId;
  }


  public RegisteredEventWithNotClosedMarkets intEventName(String intEventName) {
    this.intEventName = intEventName;
    return this;
  }

   /**
   * Get intEventName
   * @return intEventName
  **/
  @javax.annotation.Nullable
  public String getIntEventName() {
    return intEventName;
  }

  public void setIntEventName(String intEventName) {
    this.intEventName = intEventName;
  }


  public RegisteredEventWithNotClosedMarkets intEventDate(OffsetDateTime intEventDate) {
    this.intEventDate = intEventDate;
    return this;
  }

   /**
   * Get intEventDate
   * @return intEventDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getIntEventDate() {
    return intEventDate;
  }

  public void setIntEventDate(OffsetDateTime intEventDate) {
    this.intEventDate = intEventDate;
  }


  public RegisteredEventWithNotClosedMarkets openMarkets(Integer openMarkets) {
    this.openMarkets = openMarkets;
    return this;
  }

   /**
   * Get openMarkets
   * @return openMarkets
  **/
  @javax.annotation.Nullable
  public Integer getOpenMarkets() {
    return openMarkets;
  }

  public void setOpenMarkets(Integer openMarkets) {
    this.openMarkets = openMarkets;
  }


  public RegisteredEventWithNotClosedMarkets bets(Integer bets) {
    this.bets = bets;
    return this;
  }

   /**
   * Get bets
   * @return bets
  **/
  @javax.annotation.Nullable
  public Integer getBets() {
    return bets;
  }

  public void setBets(Integer bets) {
    this.bets = bets;
  }


  public RegisteredEventWithNotClosedMarkets regEventId(Long regEventId) {
    this.regEventId = regEventId;
    return this;
  }

   /**
   * Get regEventId
   * @return regEventId
  **/
  @javax.annotation.Nullable
  public Long getRegEventId() {
    return regEventId;
  }

  public void setRegEventId(Long regEventId) {
    this.regEventId = regEventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredEventWithNotClosedMarkets registeredEventWithNotClosedMarkets = (RegisteredEventWithNotClosedMarkets) o;
    return Objects.equals(this.extEventId, registeredEventWithNotClosedMarkets.extEventId) &&
        Objects.equals(this.intEventId, registeredEventWithNotClosedMarkets.intEventId) &&
        Objects.equals(this.intEventName, registeredEventWithNotClosedMarkets.intEventName) &&
        Objects.equals(this.intEventDate, registeredEventWithNotClosedMarkets.intEventDate) &&
        Objects.equals(this.openMarkets, registeredEventWithNotClosedMarkets.openMarkets) &&
        Objects.equals(this.bets, registeredEventWithNotClosedMarkets.bets) &&
        Objects.equals(this.regEventId, registeredEventWithNotClosedMarkets.regEventId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(extEventId, intEventId, intEventName, intEventDate, openMarkets, bets, regEventId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredEventWithNotClosedMarkets {\n");
    sb.append("    extEventId: ").append(toIndentedString(extEventId)).append("\n");
    sb.append("    intEventId: ").append(toIndentedString(intEventId)).append("\n");
    sb.append("    intEventName: ").append(toIndentedString(intEventName)).append("\n");
    sb.append("    intEventDate: ").append(toIndentedString(intEventDate)).append("\n");
    sb.append("    openMarkets: ").append(toIndentedString(openMarkets)).append("\n");
    sb.append("    bets: ").append(toIndentedString(bets)).append("\n");
    sb.append("    regEventId: ").append(toIndentedString(regEventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtEventId");
    openapiFields.add("IntEventId");
    openapiFields.add("IntEventName");
    openapiFields.add("IntEventDate");
    openapiFields.add("OpenMarkets");
    openapiFields.add("Bets");
    openapiFields.add("RegEventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RegisteredEventWithNotClosedMarkets
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisteredEventWithNotClosedMarkets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisteredEventWithNotClosedMarkets is not found in the empty JSON string", RegisteredEventWithNotClosedMarkets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisteredEventWithNotClosedMarkets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisteredEventWithNotClosedMarkets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExtEventId") != null && !jsonObj.get("ExtEventId").isJsonNull()) && !jsonObj.get("ExtEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtEventId").toString()));
      }
      if ((jsonObj.get("IntEventName") != null && !jsonObj.get("IntEventName").isJsonNull()) && !jsonObj.get("IntEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntEventName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisteredEventWithNotClosedMarkets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisteredEventWithNotClosedMarkets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisteredEventWithNotClosedMarkets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisteredEventWithNotClosedMarkets.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisteredEventWithNotClosedMarkets>() {
           @Override
           public void write(JsonWriter out, RegisteredEventWithNotClosedMarkets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisteredEventWithNotClosedMarkets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisteredEventWithNotClosedMarkets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisteredEventWithNotClosedMarkets
  * @throws IOException if the JSON string is invalid with respect to RegisteredEventWithNotClosedMarkets
  */
  public static RegisteredEventWithNotClosedMarkets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisteredEventWithNotClosedMarkets.class);
  }

 /**
  * Convert an instance of RegisteredEventWithNotClosedMarkets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

