/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * BonusAccountsFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BonusAccountsFilter {
  public static final String SERIALIZED_NAME_BONUS_CAMPAIGN_IDS = "BonusCampaignIds";
  @SerializedName(SERIALIZED_NAME_BONUS_CAMPAIGN_IDS)
  private List<Integer> bonusCampaignIds;

  public static final String SERIALIZED_NAME_BONUS_TYPE_IDS = "BonusTypeIds";
  @SerializedName(SERIALIZED_NAME_BONUS_TYPE_IDS)
  private List<Integer> bonusTypeIds;

  public static final String SERIALIZED_NAME_START_DATES = "StartDates";
  @SerializedName(SERIALIZED_NAME_START_DATES)
  private List<OffsetDateTime> startDates;

  public static final String SERIALIZED_NAME_BONUS_STATUSES = "BonusStatuses";
  @SerializedName(SERIALIZED_NAME_BONUS_STATUSES)
  private List<Integer> bonusStatuses;

  public static final String SERIALIZED_NAME_END_DATES = "EndDates";
  @SerializedName(SERIALIZED_NAME_END_DATES)
  private List<OffsetDateTime> endDates;

  public static final String SERIALIZED_NAME_MIN_BONUS_AMOUNT = "MinBonusAmount";
  @SerializedName(SERIALIZED_NAME_MIN_BONUS_AMOUNT)
  private Double minBonusAmount;

  public static final String SERIALIZED_NAME_MAX_BONUS_AMOUNT = "MaxBonusAmount";
  @SerializedName(SERIALIZED_NAME_MAX_BONUS_AMOUNT)
  private Double maxBonusAmount;

  public static final String SERIALIZED_NAME_IN_BASE_CURRENCY = "InBaseCurrency";
  @SerializedName(SERIALIZED_NAME_IN_BASE_CURRENCY)
  private Boolean inBaseCurrency;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public BonusAccountsFilter() {
  }

  public BonusAccountsFilter bonusCampaignIds(List<Integer> bonusCampaignIds) {
    this.bonusCampaignIds = bonusCampaignIds;
    return this;
  }

  public BonusAccountsFilter addBonusCampaignIdsItem(Integer bonusCampaignIdsItem) {
    if (this.bonusCampaignIds == null) {
      this.bonusCampaignIds = new ArrayList<>();
    }
    this.bonusCampaignIds.add(bonusCampaignIdsItem);
    return this;
  }

   /**
   * Get bonusCampaignIds
   * @return bonusCampaignIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getBonusCampaignIds() {
    return bonusCampaignIds;
  }

  public void setBonusCampaignIds(List<Integer> bonusCampaignIds) {
    this.bonusCampaignIds = bonusCampaignIds;
  }


  public BonusAccountsFilter bonusTypeIds(List<Integer> bonusTypeIds) {
    this.bonusTypeIds = bonusTypeIds;
    return this;
  }

  public BonusAccountsFilter addBonusTypeIdsItem(Integer bonusTypeIdsItem) {
    if (this.bonusTypeIds == null) {
      this.bonusTypeIds = new ArrayList<>();
    }
    this.bonusTypeIds.add(bonusTypeIdsItem);
    return this;
  }

   /**
   * Get bonusTypeIds
   * @return bonusTypeIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getBonusTypeIds() {
    return bonusTypeIds;
  }

  public void setBonusTypeIds(List<Integer> bonusTypeIds) {
    this.bonusTypeIds = bonusTypeIds;
  }


  public BonusAccountsFilter startDates(List<OffsetDateTime> startDates) {
    this.startDates = startDates;
    return this;
  }

  public BonusAccountsFilter addStartDatesItem(OffsetDateTime startDatesItem) {
    if (this.startDates == null) {
      this.startDates = new ArrayList<>();
    }
    this.startDates.add(startDatesItem);
    return this;
  }

   /**
   * Get startDates
   * @return startDates
  **/
  @javax.annotation.Nullable
  public List<OffsetDateTime> getStartDates() {
    return startDates;
  }

  public void setStartDates(List<OffsetDateTime> startDates) {
    this.startDates = startDates;
  }


  public BonusAccountsFilter bonusStatuses(List<Integer> bonusStatuses) {
    this.bonusStatuses = bonusStatuses;
    return this;
  }

  public BonusAccountsFilter addBonusStatusesItem(Integer bonusStatusesItem) {
    if (this.bonusStatuses == null) {
      this.bonusStatuses = new ArrayList<>();
    }
    this.bonusStatuses.add(bonusStatusesItem);
    return this;
  }

   /**
   * Get bonusStatuses
   * @return bonusStatuses
  **/
  @javax.annotation.Nullable
  public List<Integer> getBonusStatuses() {
    return bonusStatuses;
  }

  public void setBonusStatuses(List<Integer> bonusStatuses) {
    this.bonusStatuses = bonusStatuses;
  }


  public BonusAccountsFilter endDates(List<OffsetDateTime> endDates) {
    this.endDates = endDates;
    return this;
  }

  public BonusAccountsFilter addEndDatesItem(OffsetDateTime endDatesItem) {
    if (this.endDates == null) {
      this.endDates = new ArrayList<>();
    }
    this.endDates.add(endDatesItem);
    return this;
  }

   /**
   * Get endDates
   * @return endDates
  **/
  @javax.annotation.Nullable
  public List<OffsetDateTime> getEndDates() {
    return endDates;
  }

  public void setEndDates(List<OffsetDateTime> endDates) {
    this.endDates = endDates;
  }


  public BonusAccountsFilter minBonusAmount(Double minBonusAmount) {
    this.minBonusAmount = minBonusAmount;
    return this;
  }

   /**
   * Get minBonusAmount
   * @return minBonusAmount
  **/
  @javax.annotation.Nullable
  public Double getMinBonusAmount() {
    return minBonusAmount;
  }

  public void setMinBonusAmount(Double minBonusAmount) {
    this.minBonusAmount = minBonusAmount;
  }


  public BonusAccountsFilter maxBonusAmount(Double maxBonusAmount) {
    this.maxBonusAmount = maxBonusAmount;
    return this;
  }

   /**
   * Get maxBonusAmount
   * @return maxBonusAmount
  **/
  @javax.annotation.Nullable
  public Double getMaxBonusAmount() {
    return maxBonusAmount;
  }

  public void setMaxBonusAmount(Double maxBonusAmount) {
    this.maxBonusAmount = maxBonusAmount;
  }


  public BonusAccountsFilter inBaseCurrency(Boolean inBaseCurrency) {
    this.inBaseCurrency = inBaseCurrency;
    return this;
  }

   /**
   * Get inBaseCurrency
   * @return inBaseCurrency
  **/
  @javax.annotation.Nullable
  public Boolean getInBaseCurrency() {
    return inBaseCurrency;
  }

  public void setInBaseCurrency(Boolean inBaseCurrency) {
    this.inBaseCurrency = inBaseCurrency;
  }


  public BonusAccountsFilter playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BonusAccountsFilter bonusAccountsFilter = (BonusAccountsFilter) o;
    return Objects.equals(this.bonusCampaignIds, bonusAccountsFilter.bonusCampaignIds) &&
        Objects.equals(this.bonusTypeIds, bonusAccountsFilter.bonusTypeIds) &&
        Objects.equals(this.startDates, bonusAccountsFilter.startDates) &&
        Objects.equals(this.bonusStatuses, bonusAccountsFilter.bonusStatuses) &&
        Objects.equals(this.endDates, bonusAccountsFilter.endDates) &&
        Objects.equals(this.minBonusAmount, bonusAccountsFilter.minBonusAmount) &&
        Objects.equals(this.maxBonusAmount, bonusAccountsFilter.maxBonusAmount) &&
        Objects.equals(this.inBaseCurrency, bonusAccountsFilter.inBaseCurrency) &&
        Objects.equals(this.playerId, bonusAccountsFilter.playerId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bonusCampaignIds, bonusTypeIds, startDates, bonusStatuses, endDates, minBonusAmount, maxBonusAmount, inBaseCurrency, playerId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BonusAccountsFilter {\n");
    sb.append("    bonusCampaignIds: ").append(toIndentedString(bonusCampaignIds)).append("\n");
    sb.append("    bonusTypeIds: ").append(toIndentedString(bonusTypeIds)).append("\n");
    sb.append("    startDates: ").append(toIndentedString(startDates)).append("\n");
    sb.append("    bonusStatuses: ").append(toIndentedString(bonusStatuses)).append("\n");
    sb.append("    endDates: ").append(toIndentedString(endDates)).append("\n");
    sb.append("    minBonusAmount: ").append(toIndentedString(minBonusAmount)).append("\n");
    sb.append("    maxBonusAmount: ").append(toIndentedString(maxBonusAmount)).append("\n");
    sb.append("    inBaseCurrency: ").append(toIndentedString(inBaseCurrency)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BonusCampaignIds");
    openapiFields.add("BonusTypeIds");
    openapiFields.add("StartDates");
    openapiFields.add("BonusStatuses");
    openapiFields.add("EndDates");
    openapiFields.add("MinBonusAmount");
    openapiFields.add("MaxBonusAmount");
    openapiFields.add("InBaseCurrency");
    openapiFields.add("PlayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BonusAccountsFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BonusAccountsFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BonusAccountsFilter is not found in the empty JSON string", BonusAccountsFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BonusAccountsFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BonusAccountsFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BonusCampaignIds") != null && !jsonObj.get("BonusCampaignIds").isJsonNull() && !jsonObj.get("BonusCampaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BonusCampaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("BonusCampaignIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BonusTypeIds") != null && !jsonObj.get("BonusTypeIds").isJsonNull() && !jsonObj.get("BonusTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BonusTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("BonusTypeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StartDates") != null && !jsonObj.get("StartDates").isJsonNull() && !jsonObj.get("StartDates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDates` to be an array in the JSON string but got `%s`", jsonObj.get("StartDates").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BonusStatuses") != null && !jsonObj.get("BonusStatuses").isJsonNull() && !jsonObj.get("BonusStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BonusStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("BonusStatuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("EndDates") != null && !jsonObj.get("EndDates").isJsonNull() && !jsonObj.get("EndDates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndDates` to be an array in the JSON string but got `%s`", jsonObj.get("EndDates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BonusAccountsFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BonusAccountsFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BonusAccountsFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BonusAccountsFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<BonusAccountsFilter>() {
           @Override
           public void write(JsonWriter out, BonusAccountsFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BonusAccountsFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BonusAccountsFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BonusAccountsFilter
  * @throws IOException if the JSON string is invalid with respect to BonusAccountsFilter
  */
  public static BonusAccountsFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BonusAccountsFilter.class);
  }

 /**
  * Convert an instance of BonusAccountsFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

