/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetConfigChampionshipsSettingsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetConfigChampionshipsSettingsRequestFilters {
  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_ID = "ChampionshipId";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_ID)
  private Integer championshipId;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "TemplateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private Integer templateId;

  public static final String SERIALIZED_NAME_ONLY_OWN_TEMPLATE = "OnlyOwnTemplate";
  @SerializedName(SERIALIZED_NAME_ONLY_OWN_TEMPLATE)
  private Boolean onlyOwnTemplate;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_ONLY_OWN_ENABLED_STATUS = "OnlyOwnEnabledStatus";
  @SerializedName(SERIALIZED_NAME_ONLY_OWN_ENABLED_STATUS)
  private Boolean onlyOwnEnabledStatus;

  public static final String SERIALIZED_NAME_STAKE_LIMIT_FROM = "StakeLimitFrom";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_FROM)
  private Double stakeLimitFrom;

  public static final String SERIALIZED_NAME_STAKE_LIMIT_TO = "StakeLimitTo";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_TO)
  private Double stakeLimitTo;

  public static final String SERIALIZED_NAME_ONLY_OWN_STAKE_LIMIT = "OnlyOwnStakeLimit";
  @SerializedName(SERIALIZED_NAME_ONLY_OWN_STAKE_LIMIT)
  private Boolean onlyOwnStakeLimit;

  public static final String SERIALIZED_NAME_NET_WIN_FROM = "NetWinFrom";
  @SerializedName(SERIALIZED_NAME_NET_WIN_FROM)
  private Double netWinFrom;

  public static final String SERIALIZED_NAME_NET_WIN_TO = "NetWinTo";
  @SerializedName(SERIALIZED_NAME_NET_WIN_TO)
  private Double netWinTo;

  public static final String SERIALIZED_NAME_ONLY_OWN_NET_WIN = "OnlyOwnNetWin";
  @SerializedName(SERIALIZED_NAME_ONLY_OWN_NET_WIN)
  private Boolean onlyOwnNetWin;

  public static final String SERIALIZED_NAME_CONFIG_ID = "ConfigId";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private Integer configId;

  public GetConfigChampionshipsSettingsRequestFilters() {
  }

  public GetConfigChampionshipsSettingsRequestFilters sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public GetConfigChampionshipsSettingsRequestFilters categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public GetConfigChampionshipsSettingsRequestFilters championshipId(Integer championshipId) {
    this.championshipId = championshipId;
    return this;
  }

   /**
   * Get championshipId
   * @return championshipId
  **/
  @javax.annotation.Nullable
  public Integer getChampionshipId() {
    return championshipId;
  }

  public void setChampionshipId(Integer championshipId) {
    this.championshipId = championshipId;
  }


  public GetConfigChampionshipsSettingsRequestFilters templateId(Integer templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  public Integer getTemplateId() {
    return templateId;
  }

  public void setTemplateId(Integer templateId) {
    this.templateId = templateId;
  }


  public GetConfigChampionshipsSettingsRequestFilters onlyOwnTemplate(Boolean onlyOwnTemplate) {
    this.onlyOwnTemplate = onlyOwnTemplate;
    return this;
  }

   /**
   * Get onlyOwnTemplate
   * @return onlyOwnTemplate
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyOwnTemplate() {
    return onlyOwnTemplate;
  }

  public void setOnlyOwnTemplate(Boolean onlyOwnTemplate) {
    this.onlyOwnTemplate = onlyOwnTemplate;
  }


  public GetConfigChampionshipsSettingsRequestFilters isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public GetConfigChampionshipsSettingsRequestFilters onlyOwnEnabledStatus(Boolean onlyOwnEnabledStatus) {
    this.onlyOwnEnabledStatus = onlyOwnEnabledStatus;
    return this;
  }

   /**
   * Get onlyOwnEnabledStatus
   * @return onlyOwnEnabledStatus
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyOwnEnabledStatus() {
    return onlyOwnEnabledStatus;
  }

  public void setOnlyOwnEnabledStatus(Boolean onlyOwnEnabledStatus) {
    this.onlyOwnEnabledStatus = onlyOwnEnabledStatus;
  }


  public GetConfigChampionshipsSettingsRequestFilters stakeLimitFrom(Double stakeLimitFrom) {
    this.stakeLimitFrom = stakeLimitFrom;
    return this;
  }

   /**
   * Get stakeLimitFrom
   * @return stakeLimitFrom
  **/
  @javax.annotation.Nullable
  public Double getStakeLimitFrom() {
    return stakeLimitFrom;
  }

  public void setStakeLimitFrom(Double stakeLimitFrom) {
    this.stakeLimitFrom = stakeLimitFrom;
  }


  public GetConfigChampionshipsSettingsRequestFilters stakeLimitTo(Double stakeLimitTo) {
    this.stakeLimitTo = stakeLimitTo;
    return this;
  }

   /**
   * Get stakeLimitTo
   * @return stakeLimitTo
  **/
  @javax.annotation.Nullable
  public Double getStakeLimitTo() {
    return stakeLimitTo;
  }

  public void setStakeLimitTo(Double stakeLimitTo) {
    this.stakeLimitTo = stakeLimitTo;
  }


  public GetConfigChampionshipsSettingsRequestFilters onlyOwnStakeLimit(Boolean onlyOwnStakeLimit) {
    this.onlyOwnStakeLimit = onlyOwnStakeLimit;
    return this;
  }

   /**
   * Get onlyOwnStakeLimit
   * @return onlyOwnStakeLimit
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyOwnStakeLimit() {
    return onlyOwnStakeLimit;
  }

  public void setOnlyOwnStakeLimit(Boolean onlyOwnStakeLimit) {
    this.onlyOwnStakeLimit = onlyOwnStakeLimit;
  }


  public GetConfigChampionshipsSettingsRequestFilters netWinFrom(Double netWinFrom) {
    this.netWinFrom = netWinFrom;
    return this;
  }

   /**
   * Get netWinFrom
   * @return netWinFrom
  **/
  @javax.annotation.Nullable
  public Double getNetWinFrom() {
    return netWinFrom;
  }

  public void setNetWinFrom(Double netWinFrom) {
    this.netWinFrom = netWinFrom;
  }


  public GetConfigChampionshipsSettingsRequestFilters netWinTo(Double netWinTo) {
    this.netWinTo = netWinTo;
    return this;
  }

   /**
   * Get netWinTo
   * @return netWinTo
  **/
  @javax.annotation.Nullable
  public Double getNetWinTo() {
    return netWinTo;
  }

  public void setNetWinTo(Double netWinTo) {
    this.netWinTo = netWinTo;
  }


  public GetConfigChampionshipsSettingsRequestFilters onlyOwnNetWin(Boolean onlyOwnNetWin) {
    this.onlyOwnNetWin = onlyOwnNetWin;
    return this;
  }

   /**
   * Get onlyOwnNetWin
   * @return onlyOwnNetWin
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyOwnNetWin() {
    return onlyOwnNetWin;
  }

  public void setOnlyOwnNetWin(Boolean onlyOwnNetWin) {
    this.onlyOwnNetWin = onlyOwnNetWin;
  }


  public GetConfigChampionshipsSettingsRequestFilters configId(Integer configId) {
    this.configId = configId;
    return this;
  }

   /**
   * Get configId
   * @return configId
  **/
  @javax.annotation.Nullable
  public Integer getConfigId() {
    return configId;
  }

  public void setConfigId(Integer configId) {
    this.configId = configId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConfigChampionshipsSettingsRequestFilters getConfigChampionshipsSettingsRequestFilters = (GetConfigChampionshipsSettingsRequestFilters) o;
    return Objects.equals(this.sportId, getConfigChampionshipsSettingsRequestFilters.sportId) &&
        Objects.equals(this.categoryId, getConfigChampionshipsSettingsRequestFilters.categoryId) &&
        Objects.equals(this.championshipId, getConfigChampionshipsSettingsRequestFilters.championshipId) &&
        Objects.equals(this.templateId, getConfigChampionshipsSettingsRequestFilters.templateId) &&
        Objects.equals(this.onlyOwnTemplate, getConfigChampionshipsSettingsRequestFilters.onlyOwnTemplate) &&
        Objects.equals(this.isEnabled, getConfigChampionshipsSettingsRequestFilters.isEnabled) &&
        Objects.equals(this.onlyOwnEnabledStatus, getConfigChampionshipsSettingsRequestFilters.onlyOwnEnabledStatus) &&
        Objects.equals(this.stakeLimitFrom, getConfigChampionshipsSettingsRequestFilters.stakeLimitFrom) &&
        Objects.equals(this.stakeLimitTo, getConfigChampionshipsSettingsRequestFilters.stakeLimitTo) &&
        Objects.equals(this.onlyOwnStakeLimit, getConfigChampionshipsSettingsRequestFilters.onlyOwnStakeLimit) &&
        Objects.equals(this.netWinFrom, getConfigChampionshipsSettingsRequestFilters.netWinFrom) &&
        Objects.equals(this.netWinTo, getConfigChampionshipsSettingsRequestFilters.netWinTo) &&
        Objects.equals(this.onlyOwnNetWin, getConfigChampionshipsSettingsRequestFilters.onlyOwnNetWin) &&
        Objects.equals(this.configId, getConfigChampionshipsSettingsRequestFilters.configId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportId, categoryId, championshipId, templateId, onlyOwnTemplate, isEnabled, onlyOwnEnabledStatus, stakeLimitFrom, stakeLimitTo, onlyOwnStakeLimit, netWinFrom, netWinTo, onlyOwnNetWin, configId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConfigChampionshipsSettingsRequestFilters {\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    championshipId: ").append(toIndentedString(championshipId)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    onlyOwnTemplate: ").append(toIndentedString(onlyOwnTemplate)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    onlyOwnEnabledStatus: ").append(toIndentedString(onlyOwnEnabledStatus)).append("\n");
    sb.append("    stakeLimitFrom: ").append(toIndentedString(stakeLimitFrom)).append("\n");
    sb.append("    stakeLimitTo: ").append(toIndentedString(stakeLimitTo)).append("\n");
    sb.append("    onlyOwnStakeLimit: ").append(toIndentedString(onlyOwnStakeLimit)).append("\n");
    sb.append("    netWinFrom: ").append(toIndentedString(netWinFrom)).append("\n");
    sb.append("    netWinTo: ").append(toIndentedString(netWinTo)).append("\n");
    sb.append("    onlyOwnNetWin: ").append(toIndentedString(onlyOwnNetWin)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportId");
    openapiFields.add("CategoryId");
    openapiFields.add("ChampionshipId");
    openapiFields.add("TemplateId");
    openapiFields.add("OnlyOwnTemplate");
    openapiFields.add("IsEnabled");
    openapiFields.add("OnlyOwnEnabledStatus");
    openapiFields.add("StakeLimitFrom");
    openapiFields.add("StakeLimitTo");
    openapiFields.add("OnlyOwnStakeLimit");
    openapiFields.add("NetWinFrom");
    openapiFields.add("NetWinTo");
    openapiFields.add("OnlyOwnNetWin");
    openapiFields.add("ConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetConfigChampionshipsSettingsRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetConfigChampionshipsSettingsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetConfigChampionshipsSettingsRequestFilters is not found in the empty JSON string", GetConfigChampionshipsSettingsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetConfigChampionshipsSettingsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetConfigChampionshipsSettingsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetConfigChampionshipsSettingsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetConfigChampionshipsSettingsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetConfigChampionshipsSettingsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetConfigChampionshipsSettingsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetConfigChampionshipsSettingsRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetConfigChampionshipsSettingsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetConfigChampionshipsSettingsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetConfigChampionshipsSettingsRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetConfigChampionshipsSettingsRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetConfigChampionshipsSettingsRequestFilters
  */
  public static GetConfigChampionshipsSettingsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetConfigChampionshipsSettingsRequestFilters.class);
  }

 /**
  * Convert an instance of GetConfigChampionshipsSettingsRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

