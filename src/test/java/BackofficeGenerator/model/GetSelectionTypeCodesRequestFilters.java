/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetSelectionTypeCodesRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetSelectionTypeCodesRequestFilters {
  public static final String SERIALIZED_NAME_SELECTION_TYPE_NAME = "SelectionTypeName";
  @SerializedName(SERIALIZED_NAME_SELECTION_TYPE_NAME)
  private String selectionTypeName;

  public static final String SERIALIZED_NAME_SPORT_TYPE_IDS = "SportTypeIds";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_IDS)
  private List<Integer> sportTypeIds;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_VALUE = "SpecialOddsValue";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_VALUE)
  private String specialOddsValue;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_MARKET_TYPE_NAME = "MarketTypeName";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_NAME)
  private String marketTypeName;

  public GetSelectionTypeCodesRequestFilters() {
  }

  public GetSelectionTypeCodesRequestFilters selectionTypeName(String selectionTypeName) {
    this.selectionTypeName = selectionTypeName;
    return this;
  }

   /**
   * Get selectionTypeName
   * @return selectionTypeName
  **/
  @javax.annotation.Nullable
  public String getSelectionTypeName() {
    return selectionTypeName;
  }

  public void setSelectionTypeName(String selectionTypeName) {
    this.selectionTypeName = selectionTypeName;
  }


  public GetSelectionTypeCodesRequestFilters sportTypeIds(List<Integer> sportTypeIds) {
    this.sportTypeIds = sportTypeIds;
    return this;
  }

  public GetSelectionTypeCodesRequestFilters addSportTypeIdsItem(Integer sportTypeIdsItem) {
    if (this.sportTypeIds == null) {
      this.sportTypeIds = new ArrayList<>();
    }
    this.sportTypeIds.add(sportTypeIdsItem);
    return this;
  }

   /**
   * Get sportTypeIds
   * @return sportTypeIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportTypeIds() {
    return sportTypeIds;
  }

  public void setSportTypeIds(List<Integer> sportTypeIds) {
    this.sportTypeIds = sportTypeIds;
  }


  public GetSelectionTypeCodesRequestFilters specialOddsValue(String specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
    return this;
  }

   /**
   * Get specialOddsValue
   * @return specialOddsValue
  **/
  @javax.annotation.Nullable
  public String getSpecialOddsValue() {
    return specialOddsValue;
  }

  public void setSpecialOddsValue(String specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
  }


  public GetSelectionTypeCodesRequestFilters code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public GetSelectionTypeCodesRequestFilters marketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
    return this;
  }

   /**
   * Get marketTypeName
   * @return marketTypeName
  **/
  @javax.annotation.Nullable
  public String getMarketTypeName() {
    return marketTypeName;
  }

  public void setMarketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSelectionTypeCodesRequestFilters getSelectionTypeCodesRequestFilters = (GetSelectionTypeCodesRequestFilters) o;
    return Objects.equals(this.selectionTypeName, getSelectionTypeCodesRequestFilters.selectionTypeName) &&
        Objects.equals(this.sportTypeIds, getSelectionTypeCodesRequestFilters.sportTypeIds) &&
        Objects.equals(this.specialOddsValue, getSelectionTypeCodesRequestFilters.specialOddsValue) &&
        Objects.equals(this.code, getSelectionTypeCodesRequestFilters.code) &&
        Objects.equals(this.marketTypeName, getSelectionTypeCodesRequestFilters.marketTypeName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectionTypeName, sportTypeIds, specialOddsValue, code, marketTypeName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSelectionTypeCodesRequestFilters {\n");
    sb.append("    selectionTypeName: ").append(toIndentedString(selectionTypeName)).append("\n");
    sb.append("    sportTypeIds: ").append(toIndentedString(sportTypeIds)).append("\n");
    sb.append("    specialOddsValue: ").append(toIndentedString(specialOddsValue)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    marketTypeName: ").append(toIndentedString(marketTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SelectionTypeName");
    openapiFields.add("SportTypeIds");
    openapiFields.add("SpecialOddsValue");
    openapiFields.add("Code");
    openapiFields.add("MarketTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetSelectionTypeCodesRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSelectionTypeCodesRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSelectionTypeCodesRequestFilters is not found in the empty JSON string", GetSelectionTypeCodesRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSelectionTypeCodesRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSelectionTypeCodesRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SelectionTypeName") != null && !jsonObj.get("SelectionTypeName").isJsonNull()) && !jsonObj.get("SelectionTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SelectionTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SelectionTypeName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportTypeIds") != null && !jsonObj.get("SportTypeIds").isJsonNull() && !jsonObj.get("SportTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportTypeIds").toString()));
      }
      if ((jsonObj.get("SpecialOddsValue") != null && !jsonObj.get("SpecialOddsValue").isJsonNull()) && !jsonObj.get("SpecialOddsValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpecialOddsValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpecialOddsValue").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("MarketTypeName") != null && !jsonObj.get("MarketTypeName").isJsonNull()) && !jsonObj.get("MarketTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSelectionTypeCodesRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSelectionTypeCodesRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSelectionTypeCodesRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSelectionTypeCodesRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSelectionTypeCodesRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetSelectionTypeCodesRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSelectionTypeCodesRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetSelectionTypeCodesRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetSelectionTypeCodesRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetSelectionTypeCodesRequestFilters
  */
  public static GetSelectionTypeCodesRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSelectionTypeCodesRequestFilters.class);
  }

 /**
  * Convert an instance of GetSelectionTypeCodesRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

