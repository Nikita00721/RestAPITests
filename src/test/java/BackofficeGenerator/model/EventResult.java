/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * EventResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class EventResult {
  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypes eventType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT = "Sport";
  @SerializedName(SERIALIZED_NAME_SPORT)
  private String sport;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP = "Championship";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP)
  private String championship;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_ID = "ChampionshipId";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_ID)
  private Integer championshipId;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<String> competitors;

  public static final String SERIALIZED_NAME_HAS_CONFLICTS = "HasConflicts";
  @SerializedName(SERIALIZED_NAME_HAS_CONFLICTS)
  private Boolean hasConflicts;

  public static final String SERIALIZED_NAME_CATEGORY_I_S_O = "CategoryISO";
  @SerializedName(SERIALIZED_NAME_CATEGORY_I_S_O)
  private String categoryISO;

  public static final String SERIALIZED_NAME_IS_ACTIVE_EVENT = "IsActiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_EVENT)
  private Boolean isActiveEvent;

  public static final String SERIALIZED_NAME_FEED_RESULTS = "FeedResults";
  @SerializedName(SERIALIZED_NAME_FEED_RESULTS)
  private List<FeedEventResult> feedResults;

  public static final String SERIALIZED_NAME_COMMON_RESULTS = "CommonResults";
  @SerializedName(SERIALIZED_NAME_COMMON_RESULTS)
  private List<CommonResultScore> commonResults;

  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Long eventId;

  public EventResult() {
  }

  public EventResult(
     List<String> competitors, 
     Boolean isActiveEvent, 
     List<FeedEventResult> feedResults,
     List<CommonResultScore> commonResults
  ) {
    this();
    this.competitors = competitors;
    this.isActiveEvent = isActiveEvent;
    this.feedResults = feedResults;
    this.commonResults = commonResults;
  }

  public EventResult eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public EventResult eventType(EventTypes eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  public EventTypes getEventType() {
    return eventType;
  }

  public void setEventType(EventTypes eventType) {
    this.eventType = eventType;
  }


  public EventResult name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventResult sport(String sport) {
    this.sport = sport;
    return this;
  }

   /**
   * Get sport
   * @return sport
  **/
  @javax.annotation.Nullable
  public String getSport() {
    return sport;
  }

  public void setSport(String sport) {
    this.sport = sport;
  }


  public EventResult sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public EventResult sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public EventResult category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public EventResult categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public EventResult championship(String championship) {
    this.championship = championship;
    return this;
  }

   /**
   * Get championship
   * @return championship
  **/
  @javax.annotation.Nullable
  public String getChampionship() {
    return championship;
  }

  public void setChampionship(String championship) {
    this.championship = championship;
  }


  public EventResult championshipId(Integer championshipId) {
    this.championshipId = championshipId;
    return this;
  }

   /**
   * Get championshipId
   * @return championshipId
  **/
  @javax.annotation.Nullable
  public Integer getChampionshipId() {
    return championshipId;
  }

  public void setChampionshipId(Integer championshipId) {
    this.championshipId = championshipId;
  }


   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<String> getCompetitors() {
    return competitors;
  }



  public EventResult hasConflicts(Boolean hasConflicts) {
    this.hasConflicts = hasConflicts;
    return this;
  }

   /**
   * Get hasConflicts
   * @return hasConflicts
  **/
  @javax.annotation.Nullable
  public Boolean getHasConflicts() {
    return hasConflicts;
  }

  public void setHasConflicts(Boolean hasConflicts) {
    this.hasConflicts = hasConflicts;
  }


  public EventResult categoryISO(String categoryISO) {
    this.categoryISO = categoryISO;
    return this;
  }

   /**
   * Get categoryISO
   * @return categoryISO
  **/
  @javax.annotation.Nullable
  public String getCategoryISO() {
    return categoryISO;
  }

  public void setCategoryISO(String categoryISO) {
    this.categoryISO = categoryISO;
  }


   /**
   * Get isActiveEvent
   * @return isActiveEvent
  **/
  @javax.annotation.Nullable
  public Boolean getIsActiveEvent() {
    return isActiveEvent;
  }



   /**
   * Get feedResults
   * @return feedResults
  **/
  @javax.annotation.Nullable
  public List<FeedEventResult> getFeedResults() {
    return feedResults;
  }



   /**
   * Get commonResults
   * @return commonResults
  **/
  @javax.annotation.Nullable
  public List<CommonResultScore> getCommonResults() {
    return commonResults;
  }



  public EventResult eventId(Long eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nullable
  public Long getEventId() {
    return eventId;
  }

  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventResult eventResult = (EventResult) o;
    return Objects.equals(this.eventDate, eventResult.eventDate) &&
        Objects.equals(this.eventType, eventResult.eventType) &&
        Objects.equals(this.name, eventResult.name) &&
        Objects.equals(this.sport, eventResult.sport) &&
        Objects.equals(this.sportId, eventResult.sportId) &&
        Objects.equals(this.sportTypeId, eventResult.sportTypeId) &&
        Objects.equals(this.category, eventResult.category) &&
        Objects.equals(this.categoryId, eventResult.categoryId) &&
        Objects.equals(this.championship, eventResult.championship) &&
        Objects.equals(this.championshipId, eventResult.championshipId) &&
        Objects.equals(this.competitors, eventResult.competitors) &&
        Objects.equals(this.hasConflicts, eventResult.hasConflicts) &&
        Objects.equals(this.categoryISO, eventResult.categoryISO) &&
        Objects.equals(this.isActiveEvent, eventResult.isActiveEvent) &&
        Objects.equals(this.feedResults, eventResult.feedResults) &&
        Objects.equals(this.commonResults, eventResult.commonResults) &&
        Objects.equals(this.eventId, eventResult.eventId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDate, eventType, name, sport, sportId, sportTypeId, category, categoryId, championship, championshipId, competitors, hasConflicts, categoryISO, isActiveEvent, feedResults, commonResults, eventId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventResult {\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sport: ").append(toIndentedString(sport)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    championship: ").append(toIndentedString(championship)).append("\n");
    sb.append("    championshipId: ").append(toIndentedString(championshipId)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    hasConflicts: ").append(toIndentedString(hasConflicts)).append("\n");
    sb.append("    categoryISO: ").append(toIndentedString(categoryISO)).append("\n");
    sb.append("    isActiveEvent: ").append(toIndentedString(isActiveEvent)).append("\n");
    sb.append("    feedResults: ").append(toIndentedString(feedResults)).append("\n");
    sb.append("    commonResults: ").append(toIndentedString(commonResults)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventDate");
    openapiFields.add("EventType");
    openapiFields.add("Name");
    openapiFields.add("Sport");
    openapiFields.add("SportId");
    openapiFields.add("SportTypeId");
    openapiFields.add("Category");
    openapiFields.add("CategoryId");
    openapiFields.add("Championship");
    openapiFields.add("ChampionshipId");
    openapiFields.add("Competitors");
    openapiFields.add("HasConflicts");
    openapiFields.add("CategoryISO");
    openapiFields.add("IsActiveEvent");
    openapiFields.add("FeedResults");
    openapiFields.add("CommonResults");
    openapiFields.add("EventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventResult is not found in the empty JSON string", EventResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EventType`
      if (jsonObj.get("EventType") != null && !jsonObj.get("EventType").isJsonNull()) {
        EventTypes.validateJsonElement(jsonObj.get("EventType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Sport") != null && !jsonObj.get("Sport").isJsonNull()) && !jsonObj.get("Sport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sport").toString()));
      }
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Championship") != null && !jsonObj.get("Championship").isJsonNull()) && !jsonObj.get("Championship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Championship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Championship").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull() && !jsonObj.get("Competitors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
      }
      if ((jsonObj.get("CategoryISO") != null && !jsonObj.get("CategoryISO").isJsonNull()) && !jsonObj.get("CategoryISO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryISO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryISO").toString()));
      }
      if (jsonObj.get("FeedResults") != null && !jsonObj.get("FeedResults").isJsonNull()) {
        JsonArray jsonArrayfeedResults = jsonObj.getAsJsonArray("FeedResults");
        if (jsonArrayfeedResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FeedResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FeedResults` to be an array in the JSON string but got `%s`", jsonObj.get("FeedResults").toString()));
          }

          // validate the optional field `FeedResults` (array)
          for (int i = 0; i < jsonArrayfeedResults.size(); i++) {
            FeedEventResult.validateJsonElement(jsonArrayfeedResults.get(i));
          };
        }
      }
      if (jsonObj.get("CommonResults") != null && !jsonObj.get("CommonResults").isJsonNull()) {
        JsonArray jsonArraycommonResults = jsonObj.getAsJsonArray("CommonResults");
        if (jsonArraycommonResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CommonResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CommonResults` to be an array in the JSON string but got `%s`", jsonObj.get("CommonResults").toString()));
          }

          // validate the optional field `CommonResults` (array)
          for (int i = 0; i < jsonArraycommonResults.size(); i++) {
            CommonResultScore.validateJsonElement(jsonArraycommonResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventResult.class));

       return (TypeAdapter<T>) new TypeAdapter<EventResult>() {
           @Override
           public void write(JsonWriter out, EventResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventResult
  * @throws IOException if the JSON string is invalid with respect to EventResult
  */
  public static EventResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventResult.class);
  }

 /**
  * Convert an instance of EventResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

