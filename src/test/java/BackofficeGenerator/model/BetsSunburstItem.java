/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * BetsSunburstItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BetsSunburstItem {
  public static final String SERIALIZED_NAME_TOTAL_PERCENT = "TotalPercent";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERCENT)
  private Double totalPercent;

  public static final String SERIALIZED_NAME_SINGLES = "Singles";
  @SerializedName(SERIALIZED_NAME_SINGLES)
  private Integer singles;

  public static final String SERIALIZED_NAME_SINGLES_PERCENT = "SinglesPercent";
  @SerializedName(SERIALIZED_NAME_SINGLES_PERCENT)
  private Double singlesPercent;

  public static final String SERIALIZED_NAME_MULTIPLES = "Multiples";
  @SerializedName(SERIALIZED_NAME_MULTIPLES)
  private Integer multiples;

  public static final String SERIALIZED_NAME_MULTIPLES_PERCENT = "MultiplesPercent";
  @SerializedName(SERIALIZED_NAME_MULTIPLES_PERCENT)
  private Double multiplesPercent;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public BetsSunburstItem() {
  }

  public BetsSunburstItem totalPercent(Double totalPercent) {
    this.totalPercent = totalPercent;
    return this;
  }

   /**
   * Get totalPercent
   * @return totalPercent
  **/
  @javax.annotation.Nullable
  public Double getTotalPercent() {
    return totalPercent;
  }

  public void setTotalPercent(Double totalPercent) {
    this.totalPercent = totalPercent;
  }


  public BetsSunburstItem singles(Integer singles) {
    this.singles = singles;
    return this;
  }

   /**
   * Get singles
   * @return singles
  **/
  @javax.annotation.Nullable
  public Integer getSingles() {
    return singles;
  }

  public void setSingles(Integer singles) {
    this.singles = singles;
  }


  public BetsSunburstItem singlesPercent(Double singlesPercent) {
    this.singlesPercent = singlesPercent;
    return this;
  }

   /**
   * Get singlesPercent
   * @return singlesPercent
  **/
  @javax.annotation.Nullable
  public Double getSinglesPercent() {
    return singlesPercent;
  }

  public void setSinglesPercent(Double singlesPercent) {
    this.singlesPercent = singlesPercent;
  }


  public BetsSunburstItem multiples(Integer multiples) {
    this.multiples = multiples;
    return this;
  }

   /**
   * Get multiples
   * @return multiples
  **/
  @javax.annotation.Nullable
  public Integer getMultiples() {
    return multiples;
  }

  public void setMultiples(Integer multiples) {
    this.multiples = multiples;
  }


  public BetsSunburstItem multiplesPercent(Double multiplesPercent) {
    this.multiplesPercent = multiplesPercent;
    return this;
  }

   /**
   * Get multiplesPercent
   * @return multiplesPercent
  **/
  @javax.annotation.Nullable
  public Double getMultiplesPercent() {
    return multiplesPercent;
  }

  public void setMultiplesPercent(Double multiplesPercent) {
    this.multiplesPercent = multiplesPercent;
  }


  public BetsSunburstItem total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BetsSunburstItem betsSunburstItem = (BetsSunburstItem) o;
    return Objects.equals(this.totalPercent, betsSunburstItem.totalPercent) &&
        Objects.equals(this.singles, betsSunburstItem.singles) &&
        Objects.equals(this.singlesPercent, betsSunburstItem.singlesPercent) &&
        Objects.equals(this.multiples, betsSunburstItem.multiples) &&
        Objects.equals(this.multiplesPercent, betsSunburstItem.multiplesPercent) &&
        Objects.equals(this.total, betsSunburstItem.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalPercent, singles, singlesPercent, multiples, multiplesPercent, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BetsSunburstItem {\n");
    sb.append("    totalPercent: ").append(toIndentedString(totalPercent)).append("\n");
    sb.append("    singles: ").append(toIndentedString(singles)).append("\n");
    sb.append("    singlesPercent: ").append(toIndentedString(singlesPercent)).append("\n");
    sb.append("    multiples: ").append(toIndentedString(multiples)).append("\n");
    sb.append("    multiplesPercent: ").append(toIndentedString(multiplesPercent)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalPercent");
    openapiFields.add("Singles");
    openapiFields.add("SinglesPercent");
    openapiFields.add("Multiples");
    openapiFields.add("MultiplesPercent");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BetsSunburstItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BetsSunburstItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BetsSunburstItem is not found in the empty JSON string", BetsSunburstItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BetsSunburstItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BetsSunburstItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BetsSunburstItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BetsSunburstItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BetsSunburstItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BetsSunburstItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BetsSunburstItem>() {
           @Override
           public void write(JsonWriter out, BetsSunburstItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BetsSunburstItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BetsSunburstItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BetsSunburstItem
  * @throws IOException if the JSON string is invalid with respect to BetsSunburstItem
  */
  public static BetsSunburstItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BetsSunburstItem.class);
  }

 /**
  * Convert an instance of BetsSunburstItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

