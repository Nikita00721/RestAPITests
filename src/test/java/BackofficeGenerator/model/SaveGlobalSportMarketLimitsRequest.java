/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SaveGlobalSportMarketLimitsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SaveGlobalSportMarketLimitsRequest {
  public static final String SERIALIZED_NAME_STAKE_LIMIT_FACTOR = "StakeLimitFactor";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_FACTOR)
  private Double stakeLimitFactor;

  public static final String SERIALIZED_NAME_NET_WIN_FACTOR = "NetWinFactor";
  @SerializedName(SERIALIZED_NAME_NET_WIN_FACTOR)
  private Double netWinFactor;

  public static final String SERIALIZED_NAME_IS_WIN_LIMITS_PER_SELECTION = "IsWinLimitsPerSelection";
  @SerializedName(SERIALIZED_NAME_IS_WIN_LIMITS_PER_SELECTION)
  private Boolean isWinLimitsPerSelection;

  public static final String SERIALIZED_NAME_IS_STAKE_LIMITS_PER_SELECTION = "IsStakeLimitsPerSelection";
  @SerializedName(SERIALIZED_NAME_IS_STAKE_LIMITS_PER_SELECTION)
  private Boolean isStakeLimitsPerSelection;

  public static final String SERIALIZED_NAME_SPORT_MARKET_ID = "SportMarketId";
  @SerializedName(SERIALIZED_NAME_SPORT_MARKET_ID)
  private Integer sportMarketId;

  public SaveGlobalSportMarketLimitsRequest() {
  }

  public SaveGlobalSportMarketLimitsRequest stakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
    return this;
  }

   /**
   * Get stakeLimitFactor
   * @return stakeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getStakeLimitFactor() {
    return stakeLimitFactor;
  }

  public void setStakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
  }


  public SaveGlobalSportMarketLimitsRequest netWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
    return this;
  }

   /**
   * Get netWinFactor
   * @return netWinFactor
  **/
  @javax.annotation.Nullable
  public Double getNetWinFactor() {
    return netWinFactor;
  }

  public void setNetWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
  }


  public SaveGlobalSportMarketLimitsRequest isWinLimitsPerSelection(Boolean isWinLimitsPerSelection) {
    this.isWinLimitsPerSelection = isWinLimitsPerSelection;
    return this;
  }

   /**
   * Get isWinLimitsPerSelection
   * @return isWinLimitsPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getIsWinLimitsPerSelection() {
    return isWinLimitsPerSelection;
  }

  public void setIsWinLimitsPerSelection(Boolean isWinLimitsPerSelection) {
    this.isWinLimitsPerSelection = isWinLimitsPerSelection;
  }


  public SaveGlobalSportMarketLimitsRequest isStakeLimitsPerSelection(Boolean isStakeLimitsPerSelection) {
    this.isStakeLimitsPerSelection = isStakeLimitsPerSelection;
    return this;
  }

   /**
   * Get isStakeLimitsPerSelection
   * @return isStakeLimitsPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getIsStakeLimitsPerSelection() {
    return isStakeLimitsPerSelection;
  }

  public void setIsStakeLimitsPerSelection(Boolean isStakeLimitsPerSelection) {
    this.isStakeLimitsPerSelection = isStakeLimitsPerSelection;
  }


  public SaveGlobalSportMarketLimitsRequest sportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
    return this;
  }

   /**
   * Get sportMarketId
   * @return sportMarketId
  **/
  @javax.annotation.Nullable
  public Integer getSportMarketId() {
    return sportMarketId;
  }

  public void setSportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveGlobalSportMarketLimitsRequest saveGlobalSportMarketLimitsRequest = (SaveGlobalSportMarketLimitsRequest) o;
    return Objects.equals(this.stakeLimitFactor, saveGlobalSportMarketLimitsRequest.stakeLimitFactor) &&
        Objects.equals(this.netWinFactor, saveGlobalSportMarketLimitsRequest.netWinFactor) &&
        Objects.equals(this.isWinLimitsPerSelection, saveGlobalSportMarketLimitsRequest.isWinLimitsPerSelection) &&
        Objects.equals(this.isStakeLimitsPerSelection, saveGlobalSportMarketLimitsRequest.isStakeLimitsPerSelection) &&
        Objects.equals(this.sportMarketId, saveGlobalSportMarketLimitsRequest.sportMarketId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stakeLimitFactor, netWinFactor, isWinLimitsPerSelection, isStakeLimitsPerSelection, sportMarketId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveGlobalSportMarketLimitsRequest {\n");
    sb.append("    stakeLimitFactor: ").append(toIndentedString(stakeLimitFactor)).append("\n");
    sb.append("    netWinFactor: ").append(toIndentedString(netWinFactor)).append("\n");
    sb.append("    isWinLimitsPerSelection: ").append(toIndentedString(isWinLimitsPerSelection)).append("\n");
    sb.append("    isStakeLimitsPerSelection: ").append(toIndentedString(isStakeLimitsPerSelection)).append("\n");
    sb.append("    sportMarketId: ").append(toIndentedString(sportMarketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StakeLimitFactor");
    openapiFields.add("NetWinFactor");
    openapiFields.add("IsWinLimitsPerSelection");
    openapiFields.add("IsStakeLimitsPerSelection");
    openapiFields.add("SportMarketId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SaveGlobalSportMarketLimitsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveGlobalSportMarketLimitsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveGlobalSportMarketLimitsRequest is not found in the empty JSON string", SaveGlobalSportMarketLimitsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveGlobalSportMarketLimitsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveGlobalSportMarketLimitsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveGlobalSportMarketLimitsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveGlobalSportMarketLimitsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveGlobalSportMarketLimitsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveGlobalSportMarketLimitsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveGlobalSportMarketLimitsRequest>() {
           @Override
           public void write(JsonWriter out, SaveGlobalSportMarketLimitsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveGlobalSportMarketLimitsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaveGlobalSportMarketLimitsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaveGlobalSportMarketLimitsRequest
  * @throws IOException if the JSON string is invalid with respect to SaveGlobalSportMarketLimitsRequest
  */
  public static SaveGlobalSportMarketLimitsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveGlobalSportMarketLimitsRequest.class);
  }

 /**
  * Convert an instance of SaveGlobalSportMarketLimitsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

