/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GeneratePlayerListReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GeneratePlayerListReportRequest {
  public static final String SERIALIZED_NAME_EXT_PLAYER_ID = "ExtPlayerId";
  @SerializedName(SERIALIZED_NAME_EXT_PLAYER_ID)
  private String extPlayerId;

  public static final String SERIALIZED_NAME_SEARCH_NAME = "SearchName";
  @SerializedName(SERIALIZED_NAME_SEARCH_NAME)
  private String searchName;

  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_COLORS = "Colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors;

  public static final String SERIALIZED_NAME_LIMIT_GROUP_IDS = "LimitGroupIds";
  @SerializedName(SERIALIZED_NAME_LIMIT_GROUP_IDS)
  private List<Integer> limitGroupIds;

  public static final String SERIALIZED_NAME_AFFILIATES_IDS = "AffiliatesIds";
  @SerializedName(SERIALIZED_NAME_AFFILIATES_IDS)
  private List<Integer> affiliatesIds;

  public static final String SERIALIZED_NAME_BRANDS_IDS = "BrandsIds";
  @SerializedName(SERIALIZED_NAME_BRANDS_IDS)
  private List<Integer> brandsIds;

  public static final String SERIALIZED_NAME_LICENSES_IDS = "LicensesIds";
  @SerializedName(SERIALIZED_NAME_LICENSES_IDS)
  private List<Integer> licensesIds;

  public static final String SERIALIZED_NAME_SORT_DESC = "SortDesc";
  @SerializedName(SERIALIZED_NAME_SORT_DESC)
  private Boolean sortDesc;

  public static final String SERIALIZED_NAME_INT_PLAYER_ID = "IntPlayerId";
  @SerializedName(SERIALIZED_NAME_INT_PLAYER_ID)
  private Integer intPlayerId;

  public GeneratePlayerListReportRequest() {
  }

  public GeneratePlayerListReportRequest extPlayerId(String extPlayerId) {
    this.extPlayerId = extPlayerId;
    return this;
  }

   /**
   * Get extPlayerId
   * @return extPlayerId
  **/
  @javax.annotation.Nullable
  public String getExtPlayerId() {
    return extPlayerId;
  }

  public void setExtPlayerId(String extPlayerId) {
    this.extPlayerId = extPlayerId;
  }


  public GeneratePlayerListReportRequest searchName(String searchName) {
    this.searchName = searchName;
    return this;
  }

   /**
   * Get searchName
   * @return searchName
  **/
  @javax.annotation.Nullable
  public String getSearchName() {
    return searchName;
  }

  public void setSearchName(String searchName) {
    this.searchName = searchName;
  }


  public GeneratePlayerListReportRequest dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public GeneratePlayerListReportRequest dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public GeneratePlayerListReportRequest colors(List<String> colors) {
    this.colors = colors;
    return this;
  }

  public GeneratePlayerListReportRequest addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nullable
  public List<String> getColors() {
    return colors;
  }

  public void setColors(List<String> colors) {
    this.colors = colors;
  }


  public GeneratePlayerListReportRequest limitGroupIds(List<Integer> limitGroupIds) {
    this.limitGroupIds = limitGroupIds;
    return this;
  }

  public GeneratePlayerListReportRequest addLimitGroupIdsItem(Integer limitGroupIdsItem) {
    if (this.limitGroupIds == null) {
      this.limitGroupIds = new ArrayList<>();
    }
    this.limitGroupIds.add(limitGroupIdsItem);
    return this;
  }

   /**
   * Get limitGroupIds
   * @return limitGroupIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getLimitGroupIds() {
    return limitGroupIds;
  }

  public void setLimitGroupIds(List<Integer> limitGroupIds) {
    this.limitGroupIds = limitGroupIds;
  }


  public GeneratePlayerListReportRequest affiliatesIds(List<Integer> affiliatesIds) {
    this.affiliatesIds = affiliatesIds;
    return this;
  }

  public GeneratePlayerListReportRequest addAffiliatesIdsItem(Integer affiliatesIdsItem) {
    if (this.affiliatesIds == null) {
      this.affiliatesIds = new ArrayList<>();
    }
    this.affiliatesIds.add(affiliatesIdsItem);
    return this;
  }

   /**
   * Get affiliatesIds
   * @return affiliatesIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getAffiliatesIds() {
    return affiliatesIds;
  }

  public void setAffiliatesIds(List<Integer> affiliatesIds) {
    this.affiliatesIds = affiliatesIds;
  }


  public GeneratePlayerListReportRequest brandsIds(List<Integer> brandsIds) {
    this.brandsIds = brandsIds;
    return this;
  }

  public GeneratePlayerListReportRequest addBrandsIdsItem(Integer brandsIdsItem) {
    if (this.brandsIds == null) {
      this.brandsIds = new ArrayList<>();
    }
    this.brandsIds.add(brandsIdsItem);
    return this;
  }

   /**
   * Get brandsIds
   * @return brandsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getBrandsIds() {
    return brandsIds;
  }

  public void setBrandsIds(List<Integer> brandsIds) {
    this.brandsIds = brandsIds;
  }


  public GeneratePlayerListReportRequest licensesIds(List<Integer> licensesIds) {
    this.licensesIds = licensesIds;
    return this;
  }

  public GeneratePlayerListReportRequest addLicensesIdsItem(Integer licensesIdsItem) {
    if (this.licensesIds == null) {
      this.licensesIds = new ArrayList<>();
    }
    this.licensesIds.add(licensesIdsItem);
    return this;
  }

   /**
   * Get licensesIds
   * @return licensesIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getLicensesIds() {
    return licensesIds;
  }

  public void setLicensesIds(List<Integer> licensesIds) {
    this.licensesIds = licensesIds;
  }


  public GeneratePlayerListReportRequest sortDesc(Boolean sortDesc) {
    this.sortDesc = sortDesc;
    return this;
  }

   /**
   * Get sortDesc
   * @return sortDesc
  **/
  @javax.annotation.Nullable
  public Boolean getSortDesc() {
    return sortDesc;
  }

  public void setSortDesc(Boolean sortDesc) {
    this.sortDesc = sortDesc;
  }


  public GeneratePlayerListReportRequest intPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
    return this;
  }

   /**
   * Get intPlayerId
   * @return intPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getIntPlayerId() {
    return intPlayerId;
  }

  public void setIntPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneratePlayerListReportRequest generatePlayerListReportRequest = (GeneratePlayerListReportRequest) o;
    return Objects.equals(this.extPlayerId, generatePlayerListReportRequest.extPlayerId) &&
        Objects.equals(this.searchName, generatePlayerListReportRequest.searchName) &&
        Objects.equals(this.dateFrom, generatePlayerListReportRequest.dateFrom) &&
        Objects.equals(this.dateTo, generatePlayerListReportRequest.dateTo) &&
        Objects.equals(this.colors, generatePlayerListReportRequest.colors) &&
        Objects.equals(this.limitGroupIds, generatePlayerListReportRequest.limitGroupIds) &&
        Objects.equals(this.affiliatesIds, generatePlayerListReportRequest.affiliatesIds) &&
        Objects.equals(this.brandsIds, generatePlayerListReportRequest.brandsIds) &&
        Objects.equals(this.licensesIds, generatePlayerListReportRequest.licensesIds) &&
        Objects.equals(this.sortDesc, generatePlayerListReportRequest.sortDesc) &&
        Objects.equals(this.intPlayerId, generatePlayerListReportRequest.intPlayerId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(extPlayerId, searchName, dateFrom, dateTo, colors, limitGroupIds, affiliatesIds, brandsIds, licensesIds, sortDesc, intPlayerId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneratePlayerListReportRequest {\n");
    sb.append("    extPlayerId: ").append(toIndentedString(extPlayerId)).append("\n");
    sb.append("    searchName: ").append(toIndentedString(searchName)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    limitGroupIds: ").append(toIndentedString(limitGroupIds)).append("\n");
    sb.append("    affiliatesIds: ").append(toIndentedString(affiliatesIds)).append("\n");
    sb.append("    brandsIds: ").append(toIndentedString(brandsIds)).append("\n");
    sb.append("    licensesIds: ").append(toIndentedString(licensesIds)).append("\n");
    sb.append("    sortDesc: ").append(toIndentedString(sortDesc)).append("\n");
    sb.append("    intPlayerId: ").append(toIndentedString(intPlayerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtPlayerId");
    openapiFields.add("SearchName");
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("Colors");
    openapiFields.add("LimitGroupIds");
    openapiFields.add("AffiliatesIds");
    openapiFields.add("BrandsIds");
    openapiFields.add("LicensesIds");
    openapiFields.add("SortDesc");
    openapiFields.add("IntPlayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GeneratePlayerListReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneratePlayerListReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneratePlayerListReportRequest is not found in the empty JSON string", GeneratePlayerListReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneratePlayerListReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneratePlayerListReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExtPlayerId") != null && !jsonObj.get("ExtPlayerId").isJsonNull()) && !jsonObj.get("ExtPlayerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtPlayerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtPlayerId").toString()));
      }
      if ((jsonObj.get("SearchName") != null && !jsonObj.get("SearchName").isJsonNull()) && !jsonObj.get("SearchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Colors") != null && !jsonObj.get("Colors").isJsonNull() && !jsonObj.get("Colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Colors` to be an array in the JSON string but got `%s`", jsonObj.get("Colors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LimitGroupIds") != null && !jsonObj.get("LimitGroupIds").isJsonNull() && !jsonObj.get("LimitGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("LimitGroupIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AffiliatesIds") != null && !jsonObj.get("AffiliatesIds").isJsonNull() && !jsonObj.get("AffiliatesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffiliatesIds` to be an array in the JSON string but got `%s`", jsonObj.get("AffiliatesIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BrandsIds") != null && !jsonObj.get("BrandsIds").isJsonNull() && !jsonObj.get("BrandsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandsIds` to be an array in the JSON string but got `%s`", jsonObj.get("BrandsIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LicensesIds") != null && !jsonObj.get("LicensesIds").isJsonNull() && !jsonObj.get("LicensesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicensesIds` to be an array in the JSON string but got `%s`", jsonObj.get("LicensesIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneratePlayerListReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneratePlayerListReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneratePlayerListReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneratePlayerListReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneratePlayerListReportRequest>() {
           @Override
           public void write(JsonWriter out, GeneratePlayerListReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneratePlayerListReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GeneratePlayerListReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GeneratePlayerListReportRequest
  * @throws IOException if the JSON string is invalid with respect to GeneratePlayerListReportRequest
  */
  public static GeneratePlayerListReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneratePlayerListReportRequest.class);
  }

 /**
  * Convert an instance of GeneratePlayerListReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

