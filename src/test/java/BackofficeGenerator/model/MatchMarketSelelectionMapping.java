/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * MatchMarketSelelectionMapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class MatchMarketSelelectionMapping {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AAMS_MARKET_ID = "AamsMarketId";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKET_ID)
  private Integer aamsMarketId;

  public static final String SERIALIZED_NAME_AAMS_MARKE_NAME = "AamsMarkeName";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKE_NAME)
  private String aamsMarkeName;

  public static final String SERIALIZED_NAME_AAMS_OUTCOME_ID = "AamsOutcomeId";
  @SerializedName(SERIALIZED_NAME_AAMS_OUTCOME_ID)
  private Integer aamsOutcomeId;

  public static final String SERIALIZED_NAME_AAMS_OUTCOME_NAME = "AamsOutcomeName";
  @SerializedName(SERIALIZED_NAME_AAMS_OUTCOME_NAME)
  private String aamsOutcomeName;

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_SCOPE2 = "Scope2";
  @SerializedName(SERIALIZED_NAME_SCOPE2)
  private Integer scope2;

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "MappingType";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private Integer mappingType;

  public static final String SERIALIZED_NAME_MAPPING_SPOV = "MappingSpov";
  @SerializedName(SERIALIZED_NAME_MAPPING_SPOV)
  private String mappingSpov;

  public static final String SERIALIZED_NAME_AAMS_SPORT_NAME = "AamsSportName";
  @SerializedName(SERIALIZED_NAME_AAMS_SPORT_NAME)
  private String aamsSportName;

  public static final String SERIALIZED_NAME_IS_LEGABILE = "IsLegabile";
  @SerializedName(SERIALIZED_NAME_IS_LEGABILE)
  private Boolean isLegabile;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public MatchMarketSelelectionMapping() {
  }

  public MatchMarketSelelectionMapping name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MatchMarketSelelectionMapping aamsMarketId(Integer aamsMarketId) {
    this.aamsMarketId = aamsMarketId;
    return this;
  }

   /**
   * Get aamsMarketId
   * @return aamsMarketId
  **/
  @javax.annotation.Nullable
  public Integer getAamsMarketId() {
    return aamsMarketId;
  }

  public void setAamsMarketId(Integer aamsMarketId) {
    this.aamsMarketId = aamsMarketId;
  }


  public MatchMarketSelelectionMapping aamsMarkeName(String aamsMarkeName) {
    this.aamsMarkeName = aamsMarkeName;
    return this;
  }

   /**
   * Get aamsMarkeName
   * @return aamsMarkeName
  **/
  @javax.annotation.Nullable
  public String getAamsMarkeName() {
    return aamsMarkeName;
  }

  public void setAamsMarkeName(String aamsMarkeName) {
    this.aamsMarkeName = aamsMarkeName;
  }


  public MatchMarketSelelectionMapping aamsOutcomeId(Integer aamsOutcomeId) {
    this.aamsOutcomeId = aamsOutcomeId;
    return this;
  }

   /**
   * Get aamsOutcomeId
   * @return aamsOutcomeId
  **/
  @javax.annotation.Nullable
  public Integer getAamsOutcomeId() {
    return aamsOutcomeId;
  }

  public void setAamsOutcomeId(Integer aamsOutcomeId) {
    this.aamsOutcomeId = aamsOutcomeId;
  }


  public MatchMarketSelelectionMapping aamsOutcomeName(String aamsOutcomeName) {
    this.aamsOutcomeName = aamsOutcomeName;
    return this;
  }

   /**
   * Get aamsOutcomeName
   * @return aamsOutcomeName
  **/
  @javax.annotation.Nullable
  public String getAamsOutcomeName() {
    return aamsOutcomeName;
  }

  public void setAamsOutcomeName(String aamsOutcomeName) {
    this.aamsOutcomeName = aamsOutcomeName;
  }


  public MatchMarketSelelectionMapping scope(Integer scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public MatchMarketSelelectionMapping scope2(Integer scope2) {
    this.scope2 = scope2;
    return this;
  }

   /**
   * Get scope2
   * @return scope2
  **/
  @javax.annotation.Nullable
  public Integer getScope2() {
    return scope2;
  }

  public void setScope2(Integer scope2) {
    this.scope2 = scope2;
  }


  public MatchMarketSelelectionMapping mappingType(Integer mappingType) {
    this.mappingType = mappingType;
    return this;
  }

   /**
   * Get mappingType
   * @return mappingType
  **/
  @javax.annotation.Nullable
  public Integer getMappingType() {
    return mappingType;
  }

  public void setMappingType(Integer mappingType) {
    this.mappingType = mappingType;
  }


  public MatchMarketSelelectionMapping mappingSpov(String mappingSpov) {
    this.mappingSpov = mappingSpov;
    return this;
  }

   /**
   * Get mappingSpov
   * @return mappingSpov
  **/
  @javax.annotation.Nullable
  public String getMappingSpov() {
    return mappingSpov;
  }

  public void setMappingSpov(String mappingSpov) {
    this.mappingSpov = mappingSpov;
  }


  public MatchMarketSelelectionMapping aamsSportName(String aamsSportName) {
    this.aamsSportName = aamsSportName;
    return this;
  }

   /**
   * Get aamsSportName
   * @return aamsSportName
  **/
  @javax.annotation.Nullable
  public String getAamsSportName() {
    return aamsSportName;
  }

  public void setAamsSportName(String aamsSportName) {
    this.aamsSportName = aamsSportName;
  }


  public MatchMarketSelelectionMapping isLegabile(Boolean isLegabile) {
    this.isLegabile = isLegabile;
    return this;
  }

   /**
   * Get isLegabile
   * @return isLegabile
  **/
  @javax.annotation.Nullable
  public Boolean getIsLegabile() {
    return isLegabile;
  }

  public void setIsLegabile(Boolean isLegabile) {
    this.isLegabile = isLegabile;
  }


  public MatchMarketSelelectionMapping id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchMarketSelelectionMapping matchMarketSelelectionMapping = (MatchMarketSelelectionMapping) o;
    return Objects.equals(this.name, matchMarketSelelectionMapping.name) &&
        Objects.equals(this.aamsMarketId, matchMarketSelelectionMapping.aamsMarketId) &&
        Objects.equals(this.aamsMarkeName, matchMarketSelelectionMapping.aamsMarkeName) &&
        Objects.equals(this.aamsOutcomeId, matchMarketSelelectionMapping.aamsOutcomeId) &&
        Objects.equals(this.aamsOutcomeName, matchMarketSelelectionMapping.aamsOutcomeName) &&
        Objects.equals(this.scope, matchMarketSelelectionMapping.scope) &&
        Objects.equals(this.scope2, matchMarketSelelectionMapping.scope2) &&
        Objects.equals(this.mappingType, matchMarketSelelectionMapping.mappingType) &&
        Objects.equals(this.mappingSpov, matchMarketSelelectionMapping.mappingSpov) &&
        Objects.equals(this.aamsSportName, matchMarketSelelectionMapping.aamsSportName) &&
        Objects.equals(this.isLegabile, matchMarketSelelectionMapping.isLegabile) &&
        Objects.equals(this.id, matchMarketSelelectionMapping.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, aamsMarketId, aamsMarkeName, aamsOutcomeId, aamsOutcomeName, scope, scope2, mappingType, mappingSpov, aamsSportName, isLegabile, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchMarketSelelectionMapping {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    aamsMarketId: ").append(toIndentedString(aamsMarketId)).append("\n");
    sb.append("    aamsMarkeName: ").append(toIndentedString(aamsMarkeName)).append("\n");
    sb.append("    aamsOutcomeId: ").append(toIndentedString(aamsOutcomeId)).append("\n");
    sb.append("    aamsOutcomeName: ").append(toIndentedString(aamsOutcomeName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    scope2: ").append(toIndentedString(scope2)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    mappingSpov: ").append(toIndentedString(mappingSpov)).append("\n");
    sb.append("    aamsSportName: ").append(toIndentedString(aamsSportName)).append("\n");
    sb.append("    isLegabile: ").append(toIndentedString(isLegabile)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AamsMarketId");
    openapiFields.add("AamsMarkeName");
    openapiFields.add("AamsOutcomeId");
    openapiFields.add("AamsOutcomeName");
    openapiFields.add("Scope");
    openapiFields.add("Scope2");
    openapiFields.add("MappingType");
    openapiFields.add("MappingSpov");
    openapiFields.add("AamsSportName");
    openapiFields.add("IsLegabile");
    openapiFields.add("Id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MatchMarketSelelectionMapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchMarketSelelectionMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchMarketSelelectionMapping is not found in the empty JSON string", MatchMarketSelelectionMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchMarketSelelectionMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchMarketSelelectionMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("AamsMarkeName") != null && !jsonObj.get("AamsMarkeName").isJsonNull()) && !jsonObj.get("AamsMarkeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsMarkeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsMarkeName").toString()));
      }
      if ((jsonObj.get("AamsOutcomeName") != null && !jsonObj.get("AamsOutcomeName").isJsonNull()) && !jsonObj.get("AamsOutcomeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsOutcomeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsOutcomeName").toString()));
      }
      if ((jsonObj.get("MappingSpov") != null && !jsonObj.get("MappingSpov").isJsonNull()) && !jsonObj.get("MappingSpov").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MappingSpov` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MappingSpov").toString()));
      }
      if ((jsonObj.get("AamsSportName") != null && !jsonObj.get("AamsSportName").isJsonNull()) && !jsonObj.get("AamsSportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsSportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsSportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchMarketSelelectionMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchMarketSelelectionMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchMarketSelelectionMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchMarketSelelectionMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchMarketSelelectionMapping>() {
           @Override
           public void write(JsonWriter out, MatchMarketSelelectionMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchMarketSelelectionMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchMarketSelelectionMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchMarketSelelectionMapping
  * @throws IOException if the JSON string is invalid with respect to MatchMarketSelelectionMapping
  */
  public static MatchMarketSelelectionMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchMarketSelelectionMapping.class);
  }

 /**
  * Convert an instance of MatchMarketSelelectionMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

