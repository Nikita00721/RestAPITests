/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * FeedEventResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class FeedEventResult {
  public static final String SERIALIZED_NAME_FEED_EVENT_PROVIDER = "FeedEventProvider";
  @SerializedName(SERIALIZED_NAME_FEED_EVENT_PROVIDER)
  private String feedEventProvider;

  public static final String SERIALIZED_NAME_EXTERNAL_STATUS = "ExternalStatus";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STATUS)
  private String externalStatus;

  public static final String SERIALIZED_NAME_RESULTS = "Results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<ResultScore> results;

  public static final String SERIALIZED_NAME_IS_VOIDED = "IsVoided";
  @SerializedName(SERIALIZED_NAME_IS_VOIDED)
  private Boolean isVoided;

  public static final String SERIALIZED_NAME_IS_MANUALLY_SETTLED = "IsManuallySettled";
  @SerializedName(SERIALIZED_NAME_IS_MANUALLY_SETTLED)
  private Boolean isManuallySettled;

  public static final String SERIALIZED_NAME_IS_LIVE_EVENT = "IsLiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_EVENT)
  private Boolean isLiveEvent;

  public static final String SERIALIZED_NAME_IS_PENDING_CANCELLED = "IsPendingCancelled";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_CANCELLED)
  private Boolean isPendingCancelled;

  public static final String SERIALIZED_NAME_IS_CANCELLED = "IsCancelled";
  @SerializedName(SERIALIZED_NAME_IS_CANCELLED)
  private Boolean isCancelled;

  public static final String SERIALIZED_NAME_CAN_SYNC_RESULTS = "CanSyncResults";
  @SerializedName(SERIALIZED_NAME_CAN_SYNC_RESULTS)
  private Boolean canSyncResults;

  public static final String SERIALIZED_NAME_IS_ACTIVE_EVENT = "IsActiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE_EVENT)
  private Boolean isActiveEvent;

  public static final String SERIALIZED_NAME_IS_FAVORITE = "IsFavorite";
  @SerializedName(SERIALIZED_NAME_IS_FAVORITE)
  private Boolean isFavorite;

  public static final String SERIALIZED_NAME_IS_SETTLED_BY_AUTO_IS = "IsSettledByAutoIs";
  @SerializedName(SERIALIZED_NAME_IS_SETTLED_BY_AUTO_IS)
  private Boolean isSettledByAutoIs;

  public static final String SERIALIZED_NAME_WITH_MARKETS = "WithMarkets";
  @SerializedName(SERIALIZED_NAME_WITH_MARKETS)
  private Boolean withMarkets;

  public static final String SERIALIZED_NAME_FEED_EVENT_ID = "FeedEventId";
  @SerializedName(SERIALIZED_NAME_FEED_EVENT_ID)
  private Long feedEventId;

  public FeedEventResult() {
  }

  public FeedEventResult(
     List<ResultScore> results
  ) {
    this();
    this.results = results;
  }

  public FeedEventResult feedEventProvider(String feedEventProvider) {
    this.feedEventProvider = feedEventProvider;
    return this;
  }

   /**
   * Get feedEventProvider
   * @return feedEventProvider
  **/
  @javax.annotation.Nullable
  public String getFeedEventProvider() {
    return feedEventProvider;
  }

  public void setFeedEventProvider(String feedEventProvider) {
    this.feedEventProvider = feedEventProvider;
  }


  public FeedEventResult externalStatus(String externalStatus) {
    this.externalStatus = externalStatus;
    return this;
  }

   /**
   * Get externalStatus
   * @return externalStatus
  **/
  @javax.annotation.Nullable
  public String getExternalStatus() {
    return externalStatus;
  }

  public void setExternalStatus(String externalStatus) {
    this.externalStatus = externalStatus;
  }


   /**
   * Get results
   * @return results
  **/
  @javax.annotation.Nullable
  public List<ResultScore> getResults() {
    return results;
  }



  public FeedEventResult isVoided(Boolean isVoided) {
    this.isVoided = isVoided;
    return this;
  }

   /**
   * Get isVoided
   * @return isVoided
  **/
  @javax.annotation.Nullable
  public Boolean getIsVoided() {
    return isVoided;
  }

  public void setIsVoided(Boolean isVoided) {
    this.isVoided = isVoided;
  }


  public FeedEventResult isManuallySettled(Boolean isManuallySettled) {
    this.isManuallySettled = isManuallySettled;
    return this;
  }

   /**
   * Get isManuallySettled
   * @return isManuallySettled
  **/
  @javax.annotation.Nullable
  public Boolean getIsManuallySettled() {
    return isManuallySettled;
  }

  public void setIsManuallySettled(Boolean isManuallySettled) {
    this.isManuallySettled = isManuallySettled;
  }


  public FeedEventResult isLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
    return this;
  }

   /**
   * Get isLiveEvent
   * @return isLiveEvent
  **/
  @javax.annotation.Nullable
  public Boolean getIsLiveEvent() {
    return isLiveEvent;
  }

  public void setIsLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
  }


  public FeedEventResult isPendingCancelled(Boolean isPendingCancelled) {
    this.isPendingCancelled = isPendingCancelled;
    return this;
  }

   /**
   * Get isPendingCancelled
   * @return isPendingCancelled
  **/
  @javax.annotation.Nullable
  public Boolean getIsPendingCancelled() {
    return isPendingCancelled;
  }

  public void setIsPendingCancelled(Boolean isPendingCancelled) {
    this.isPendingCancelled = isPendingCancelled;
  }


  public FeedEventResult isCancelled(Boolean isCancelled) {
    this.isCancelled = isCancelled;
    return this;
  }

   /**
   * Get isCancelled
   * @return isCancelled
  **/
  @javax.annotation.Nullable
  public Boolean getIsCancelled() {
    return isCancelled;
  }

  public void setIsCancelled(Boolean isCancelled) {
    this.isCancelled = isCancelled;
  }


  public FeedEventResult canSyncResults(Boolean canSyncResults) {
    this.canSyncResults = canSyncResults;
    return this;
  }

   /**
   * Get canSyncResults
   * @return canSyncResults
  **/
  @javax.annotation.Nullable
  public Boolean getCanSyncResults() {
    return canSyncResults;
  }

  public void setCanSyncResults(Boolean canSyncResults) {
    this.canSyncResults = canSyncResults;
  }


  public FeedEventResult isActiveEvent(Boolean isActiveEvent) {
    this.isActiveEvent = isActiveEvent;
    return this;
  }

   /**
   * Get isActiveEvent
   * @return isActiveEvent
  **/
  @javax.annotation.Nullable
  public Boolean getIsActiveEvent() {
    return isActiveEvent;
  }

  public void setIsActiveEvent(Boolean isActiveEvent) {
    this.isActiveEvent = isActiveEvent;
  }


  public FeedEventResult isFavorite(Boolean isFavorite) {
    this.isFavorite = isFavorite;
    return this;
  }

   /**
   * Get isFavorite
   * @return isFavorite
  **/
  @javax.annotation.Nullable
  public Boolean getIsFavorite() {
    return isFavorite;
  }

  public void setIsFavorite(Boolean isFavorite) {
    this.isFavorite = isFavorite;
  }


  public FeedEventResult isSettledByAutoIs(Boolean isSettledByAutoIs) {
    this.isSettledByAutoIs = isSettledByAutoIs;
    return this;
  }

   /**
   * Get isSettledByAutoIs
   * @return isSettledByAutoIs
  **/
  @javax.annotation.Nullable
  public Boolean getIsSettledByAutoIs() {
    return isSettledByAutoIs;
  }

  public void setIsSettledByAutoIs(Boolean isSettledByAutoIs) {
    this.isSettledByAutoIs = isSettledByAutoIs;
  }


  public FeedEventResult withMarkets(Boolean withMarkets) {
    this.withMarkets = withMarkets;
    return this;
  }

   /**
   * Get withMarkets
   * @return withMarkets
  **/
  @javax.annotation.Nullable
  public Boolean getWithMarkets() {
    return withMarkets;
  }

  public void setWithMarkets(Boolean withMarkets) {
    this.withMarkets = withMarkets;
  }


  public FeedEventResult feedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
    return this;
  }

   /**
   * Get feedEventId
   * @return feedEventId
  **/
  @javax.annotation.Nullable
  public Long getFeedEventId() {
    return feedEventId;
  }

  public void setFeedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedEventResult feedEventResult = (FeedEventResult) o;
    return Objects.equals(this.feedEventProvider, feedEventResult.feedEventProvider) &&
        Objects.equals(this.externalStatus, feedEventResult.externalStatus) &&
        Objects.equals(this.results, feedEventResult.results) &&
        Objects.equals(this.isVoided, feedEventResult.isVoided) &&
        Objects.equals(this.isManuallySettled, feedEventResult.isManuallySettled) &&
        Objects.equals(this.isLiveEvent, feedEventResult.isLiveEvent) &&
        Objects.equals(this.isPendingCancelled, feedEventResult.isPendingCancelled) &&
        Objects.equals(this.isCancelled, feedEventResult.isCancelled) &&
        Objects.equals(this.canSyncResults, feedEventResult.canSyncResults) &&
        Objects.equals(this.isActiveEvent, feedEventResult.isActiveEvent) &&
        Objects.equals(this.isFavorite, feedEventResult.isFavorite) &&
        Objects.equals(this.isSettledByAutoIs, feedEventResult.isSettledByAutoIs) &&
        Objects.equals(this.withMarkets, feedEventResult.withMarkets) &&
        Objects.equals(this.feedEventId, feedEventResult.feedEventId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedEventProvider, externalStatus, results, isVoided, isManuallySettled, isLiveEvent, isPendingCancelled, isCancelled, canSyncResults, isActiveEvent, isFavorite, isSettledByAutoIs, withMarkets, feedEventId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedEventResult {\n");
    sb.append("    feedEventProvider: ").append(toIndentedString(feedEventProvider)).append("\n");
    sb.append("    externalStatus: ").append(toIndentedString(externalStatus)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    isVoided: ").append(toIndentedString(isVoided)).append("\n");
    sb.append("    isManuallySettled: ").append(toIndentedString(isManuallySettled)).append("\n");
    sb.append("    isLiveEvent: ").append(toIndentedString(isLiveEvent)).append("\n");
    sb.append("    isPendingCancelled: ").append(toIndentedString(isPendingCancelled)).append("\n");
    sb.append("    isCancelled: ").append(toIndentedString(isCancelled)).append("\n");
    sb.append("    canSyncResults: ").append(toIndentedString(canSyncResults)).append("\n");
    sb.append("    isActiveEvent: ").append(toIndentedString(isActiveEvent)).append("\n");
    sb.append("    isFavorite: ").append(toIndentedString(isFavorite)).append("\n");
    sb.append("    isSettledByAutoIs: ").append(toIndentedString(isSettledByAutoIs)).append("\n");
    sb.append("    withMarkets: ").append(toIndentedString(withMarkets)).append("\n");
    sb.append("    feedEventId: ").append(toIndentedString(feedEventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeedEventProvider");
    openapiFields.add("ExternalStatus");
    openapiFields.add("Results");
    openapiFields.add("IsVoided");
    openapiFields.add("IsManuallySettled");
    openapiFields.add("IsLiveEvent");
    openapiFields.add("IsPendingCancelled");
    openapiFields.add("IsCancelled");
    openapiFields.add("CanSyncResults");
    openapiFields.add("IsActiveEvent");
    openapiFields.add("IsFavorite");
    openapiFields.add("IsSettledByAutoIs");
    openapiFields.add("WithMarkets");
    openapiFields.add("FeedEventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeedEventResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedEventResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedEventResult is not found in the empty JSON string", FeedEventResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedEventResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedEventResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FeedEventProvider") != null && !jsonObj.get("FeedEventProvider").isJsonNull()) && !jsonObj.get("FeedEventProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedEventProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedEventProvider").toString()));
      }
      if ((jsonObj.get("ExternalStatus") != null && !jsonObj.get("ExternalStatus").isJsonNull()) && !jsonObj.get("ExternalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalStatus").toString()));
      }
      if (jsonObj.get("Results") != null && !jsonObj.get("Results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("Results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Results` to be an array in the JSON string but got `%s`", jsonObj.get("Results").toString()));
          }

          // validate the optional field `Results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            ResultScore.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedEventResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedEventResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedEventResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedEventResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedEventResult>() {
           @Override
           public void write(JsonWriter out, FeedEventResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedEventResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedEventResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedEventResult
  * @throws IOException if the JSON string is invalid with respect to FeedEventResult
  */
  public static FeedEventResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedEventResult.class);
  }

 /**
  * Convert an instance of FeedEventResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

