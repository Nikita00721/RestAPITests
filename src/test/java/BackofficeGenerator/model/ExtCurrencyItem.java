/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * ExtCurrencyItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class ExtCurrencyItem {
  public static final String SERIALIZED_NAME_CURRENCY_SOURCE_ID = "CurrencySourceId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SOURCE_ID)
  private Integer currencySourceId;

  public static final String SERIALIZED_NAME_RATE = "Rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_UNICODE_SIGN = "UnicodeSign";
  @SerializedName(SERIALIZED_NAME_UNICODE_SIGN)
  private String unicodeSign;

  public static final String SERIALIZED_NAME_UNICODE_CONVERTED_SIGN = "UnicodeConvertedSign";
  @SerializedName(SERIALIZED_NAME_UNICODE_CONVERTED_SIGN)
  private String unicodeConvertedSign;

  public static final String SERIALIZED_NAME_HTML_SIGN = "HtmlSign";
  @SerializedName(SERIALIZED_NAME_HTML_SIGN)
  private String htmlSign;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "LastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_FE_DECIMALS = "FEDecimals";
  @SerializedName(SERIALIZED_NAME_FE_DECIMALS)
  private Integer feDecimals;

  public static final String SERIALIZED_NAME_BE_MULTIPLIER = "BEMultiplier";
  @SerializedName(SERIALIZED_NAME_BE_MULTIPLIER)
  private Integer beMultiplier;

  public static final String SERIALIZED_NAME_IS_BASE = "IsBase";
  @SerializedName(SERIALIZED_NAME_IS_BASE)
  private Boolean isBase;

  public static final String SERIALIZED_NAME_IS_VIRTUAL = "IsVirtual";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL)
  private Boolean isVirtual;

  public static final String SERIALIZED_NAME_IS_BEFORE_SIGN = "IsBeforeSign";
  @SerializedName(SERIALIZED_NAME_IS_BEFORE_SIGN)
  private Boolean isBeforeSign;

  public static final String SERIALIZED_NAME_ALLOW_DECIMALS = "AllowDecimals";
  @SerializedName(SERIALIZED_NAME_ALLOW_DECIMALS)
  private Boolean allowDecimals;

  public static final String SERIALIZED_NAME_DISPLAY_FORMAT = "DisplayFormat";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FORMAT)
  private CurrencyDisplay displayFormat;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "CurrencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Integer currencyId;

  public ExtCurrencyItem() {
  }

  public ExtCurrencyItem currencySourceId(Integer currencySourceId) {
    this.currencySourceId = currencySourceId;
    return this;
  }

   /**
   * Get currencySourceId
   * @return currencySourceId
  **/
  @javax.annotation.Nullable
  public Integer getCurrencySourceId() {
    return currencySourceId;
  }

  public void setCurrencySourceId(Integer currencySourceId) {
    this.currencySourceId = currencySourceId;
  }


  public ExtCurrencyItem rate(Double rate) {
    this.rate = rate;
    return this;
  }

   /**
   * Get rate
   * @return rate
  **/
  @javax.annotation.Nullable
  public Double getRate() {
    return rate;
  }

  public void setRate(Double rate) {
    this.rate = rate;
  }


  public ExtCurrencyItem shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public ExtCurrencyItem description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ExtCurrencyItem unicodeSign(String unicodeSign) {
    this.unicodeSign = unicodeSign;
    return this;
  }

   /**
   * Get unicodeSign
   * @return unicodeSign
  **/
  @javax.annotation.Nullable
  public String getUnicodeSign() {
    return unicodeSign;
  }

  public void setUnicodeSign(String unicodeSign) {
    this.unicodeSign = unicodeSign;
  }


  public ExtCurrencyItem unicodeConvertedSign(String unicodeConvertedSign) {
    this.unicodeConvertedSign = unicodeConvertedSign;
    return this;
  }

   /**
   * Get unicodeConvertedSign
   * @return unicodeConvertedSign
  **/
  @javax.annotation.Nullable
  public String getUnicodeConvertedSign() {
    return unicodeConvertedSign;
  }

  public void setUnicodeConvertedSign(String unicodeConvertedSign) {
    this.unicodeConvertedSign = unicodeConvertedSign;
  }


  public ExtCurrencyItem htmlSign(String htmlSign) {
    this.htmlSign = htmlSign;
    return this;
  }

   /**
   * Get htmlSign
   * @return htmlSign
  **/
  @javax.annotation.Nullable
  public String getHtmlSign() {
    return htmlSign;
  }

  public void setHtmlSign(String htmlSign) {
    this.htmlSign = htmlSign;
  }


  public ExtCurrencyItem lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

   /**
   * Get lastUpdate
   * @return lastUpdate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public ExtCurrencyItem feDecimals(Integer feDecimals) {
    this.feDecimals = feDecimals;
    return this;
  }

   /**
   * Get feDecimals
   * @return feDecimals
  **/
  @javax.annotation.Nullable
  public Integer getFeDecimals() {
    return feDecimals;
  }

  public void setFeDecimals(Integer feDecimals) {
    this.feDecimals = feDecimals;
  }


  public ExtCurrencyItem beMultiplier(Integer beMultiplier) {
    this.beMultiplier = beMultiplier;
    return this;
  }

   /**
   * Get beMultiplier
   * @return beMultiplier
  **/
  @javax.annotation.Nullable
  public Integer getBeMultiplier() {
    return beMultiplier;
  }

  public void setBeMultiplier(Integer beMultiplier) {
    this.beMultiplier = beMultiplier;
  }


  public ExtCurrencyItem isBase(Boolean isBase) {
    this.isBase = isBase;
    return this;
  }

   /**
   * Get isBase
   * @return isBase
  **/
  @javax.annotation.Nullable
  public Boolean getIsBase() {
    return isBase;
  }

  public void setIsBase(Boolean isBase) {
    this.isBase = isBase;
  }


  public ExtCurrencyItem isVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
    return this;
  }

   /**
   * Get isVirtual
   * @return isVirtual
  **/
  @javax.annotation.Nullable
  public Boolean getIsVirtual() {
    return isVirtual;
  }

  public void setIsVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
  }


  public ExtCurrencyItem isBeforeSign(Boolean isBeforeSign) {
    this.isBeforeSign = isBeforeSign;
    return this;
  }

   /**
   * Get isBeforeSign
   * @return isBeforeSign
  **/
  @javax.annotation.Nullable
  public Boolean getIsBeforeSign() {
    return isBeforeSign;
  }

  public void setIsBeforeSign(Boolean isBeforeSign) {
    this.isBeforeSign = isBeforeSign;
  }


  public ExtCurrencyItem allowDecimals(Boolean allowDecimals) {
    this.allowDecimals = allowDecimals;
    return this;
  }

   /**
   * Get allowDecimals
   * @return allowDecimals
  **/
  @javax.annotation.Nullable
  public Boolean getAllowDecimals() {
    return allowDecimals;
  }

  public void setAllowDecimals(Boolean allowDecimals) {
    this.allowDecimals = allowDecimals;
  }


  public ExtCurrencyItem displayFormat(CurrencyDisplay displayFormat) {
    this.displayFormat = displayFormat;
    return this;
  }

   /**
   * Get displayFormat
   * @return displayFormat
  **/
  @javax.annotation.Nullable
  public CurrencyDisplay getDisplayFormat() {
    return displayFormat;
  }

  public void setDisplayFormat(CurrencyDisplay displayFormat) {
    this.displayFormat = displayFormat;
  }


  public ExtCurrencyItem currencyId(Integer currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Get currencyId
   * @return currencyId
  **/
  @javax.annotation.Nullable
  public Integer getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtCurrencyItem extCurrencyItem = (ExtCurrencyItem) o;
    return Objects.equals(this.currencySourceId, extCurrencyItem.currencySourceId) &&
        Objects.equals(this.rate, extCurrencyItem.rate) &&
        Objects.equals(this.shortName, extCurrencyItem.shortName) &&
        Objects.equals(this.description, extCurrencyItem.description) &&
        Objects.equals(this.unicodeSign, extCurrencyItem.unicodeSign) &&
        Objects.equals(this.unicodeConvertedSign, extCurrencyItem.unicodeConvertedSign) &&
        Objects.equals(this.htmlSign, extCurrencyItem.htmlSign) &&
        Objects.equals(this.lastUpdate, extCurrencyItem.lastUpdate) &&
        Objects.equals(this.feDecimals, extCurrencyItem.feDecimals) &&
        Objects.equals(this.beMultiplier, extCurrencyItem.beMultiplier) &&
        Objects.equals(this.isBase, extCurrencyItem.isBase) &&
        Objects.equals(this.isVirtual, extCurrencyItem.isVirtual) &&
        Objects.equals(this.isBeforeSign, extCurrencyItem.isBeforeSign) &&
        Objects.equals(this.allowDecimals, extCurrencyItem.allowDecimals) &&
        Objects.equals(this.displayFormat, extCurrencyItem.displayFormat) &&
        Objects.equals(this.currencyId, extCurrencyItem.currencyId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencySourceId, rate, shortName, description, unicodeSign, unicodeConvertedSign, htmlSign, lastUpdate, feDecimals, beMultiplier, isBase, isVirtual, isBeforeSign, allowDecimals, displayFormat, currencyId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtCurrencyItem {\n");
    sb.append("    currencySourceId: ").append(toIndentedString(currencySourceId)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    unicodeSign: ").append(toIndentedString(unicodeSign)).append("\n");
    sb.append("    unicodeConvertedSign: ").append(toIndentedString(unicodeConvertedSign)).append("\n");
    sb.append("    htmlSign: ").append(toIndentedString(htmlSign)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    feDecimals: ").append(toIndentedString(feDecimals)).append("\n");
    sb.append("    beMultiplier: ").append(toIndentedString(beMultiplier)).append("\n");
    sb.append("    isBase: ").append(toIndentedString(isBase)).append("\n");
    sb.append("    isVirtual: ").append(toIndentedString(isVirtual)).append("\n");
    sb.append("    isBeforeSign: ").append(toIndentedString(isBeforeSign)).append("\n");
    sb.append("    allowDecimals: ").append(toIndentedString(allowDecimals)).append("\n");
    sb.append("    displayFormat: ").append(toIndentedString(displayFormat)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrencySourceId");
    openapiFields.add("Rate");
    openapiFields.add("ShortName");
    openapiFields.add("Description");
    openapiFields.add("UnicodeSign");
    openapiFields.add("UnicodeConvertedSign");
    openapiFields.add("HtmlSign");
    openapiFields.add("LastUpdate");
    openapiFields.add("FEDecimals");
    openapiFields.add("BEMultiplier");
    openapiFields.add("IsBase");
    openapiFields.add("IsVirtual");
    openapiFields.add("IsBeforeSign");
    openapiFields.add("AllowDecimals");
    openapiFields.add("DisplayFormat");
    openapiFields.add("CurrencyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExtCurrencyItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtCurrencyItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtCurrencyItem is not found in the empty JSON string", ExtCurrencyItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtCurrencyItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtCurrencyItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("UnicodeSign") != null && !jsonObj.get("UnicodeSign").isJsonNull()) && !jsonObj.get("UnicodeSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnicodeSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnicodeSign").toString()));
      }
      if ((jsonObj.get("UnicodeConvertedSign") != null && !jsonObj.get("UnicodeConvertedSign").isJsonNull()) && !jsonObj.get("UnicodeConvertedSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnicodeConvertedSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnicodeConvertedSign").toString()));
      }
      if ((jsonObj.get("HtmlSign") != null && !jsonObj.get("HtmlSign").isJsonNull()) && !jsonObj.get("HtmlSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlSign").toString()));
      }
      // validate the optional field `DisplayFormat`
      if (jsonObj.get("DisplayFormat") != null && !jsonObj.get("DisplayFormat").isJsonNull()) {
        CurrencyDisplay.validateJsonElement(jsonObj.get("DisplayFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtCurrencyItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtCurrencyItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtCurrencyItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtCurrencyItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtCurrencyItem>() {
           @Override
           public void write(JsonWriter out, ExtCurrencyItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtCurrencyItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExtCurrencyItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExtCurrencyItem
  * @throws IOException if the JSON string is invalid with respect to ExtCurrencyItem
  */
  public static ExtCurrencyItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtCurrencyItem.class);
  }

 /**
  * Convert an instance of ExtCurrencyItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

