/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GenerateTopPlayersReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GenerateTopPlayersReportRequest {
  public static final String SERIALIZED_NAME_BRAND_IDS = "BrandIds";
  @SerializedName(SERIALIZED_NAME_BRAND_IDS)
  private List<Integer> brandIds;

  public static final String SERIALIZED_NAME_AFFILATE_IDS = "AffilateIds";
  @SerializedName(SERIALIZED_NAME_AFFILATE_IDS)
  private List<Integer> affilateIds;

  public static final String SERIALIZED_NAME_PRODUCT_IDS = "ProductIds";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDS)
  private List<Integer> productIds;

  public static final String SERIALIZED_NAME_CURRENCY_IDS = "CurrencyIds";
  @SerializedName(SERIALIZED_NAME_CURRENCY_IDS)
  private List<Integer> currencyIds;

  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_IN_BASE_CURRENCY = "InBaseCurrency";
  @SerializedName(SERIALIZED_NAME_IN_BASE_CURRENCY)
  private Boolean inBaseCurrency;

  public static final String SERIALIZED_NAME_IN_DECIMAL = "InDecimal";
  @SerializedName(SERIALIZED_NAME_IN_DECIMAL)
  private Boolean inDecimal;

  public static final String SERIALIZED_NAME_SORTING = "Sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private Map<String, SortingOrders> sorting;

  public static final String SERIALIZED_NAME_LICENSE_IDS = "LicenseIds";
  @SerializedName(SERIALIZED_NAME_LICENSE_IDS)
  private List<Integer> licenseIds;

  public GenerateTopPlayersReportRequest() {
  }

  public GenerateTopPlayersReportRequest brandIds(List<Integer> brandIds) {
    this.brandIds = brandIds;
    return this;
  }

  public GenerateTopPlayersReportRequest addBrandIdsItem(Integer brandIdsItem) {
    if (this.brandIds == null) {
      this.brandIds = new ArrayList<>();
    }
    this.brandIds.add(brandIdsItem);
    return this;
  }

   /**
   * Get brandIds
   * @return brandIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getBrandIds() {
    return brandIds;
  }

  public void setBrandIds(List<Integer> brandIds) {
    this.brandIds = brandIds;
  }


  public GenerateTopPlayersReportRequest affilateIds(List<Integer> affilateIds) {
    this.affilateIds = affilateIds;
    return this;
  }

  public GenerateTopPlayersReportRequest addAffilateIdsItem(Integer affilateIdsItem) {
    if (this.affilateIds == null) {
      this.affilateIds = new ArrayList<>();
    }
    this.affilateIds.add(affilateIdsItem);
    return this;
  }

   /**
   * Get affilateIds
   * @return affilateIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getAffilateIds() {
    return affilateIds;
  }

  public void setAffilateIds(List<Integer> affilateIds) {
    this.affilateIds = affilateIds;
  }


  public GenerateTopPlayersReportRequest productIds(List<Integer> productIds) {
    this.productIds = productIds;
    return this;
  }

  public GenerateTopPlayersReportRequest addProductIdsItem(Integer productIdsItem) {
    if (this.productIds == null) {
      this.productIds = new ArrayList<>();
    }
    this.productIds.add(productIdsItem);
    return this;
  }

   /**
   * Get productIds
   * @return productIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getProductIds() {
    return productIds;
  }

  public void setProductIds(List<Integer> productIds) {
    this.productIds = productIds;
  }


  public GenerateTopPlayersReportRequest currencyIds(List<Integer> currencyIds) {
    this.currencyIds = currencyIds;
    return this;
  }

  public GenerateTopPlayersReportRequest addCurrencyIdsItem(Integer currencyIdsItem) {
    if (this.currencyIds == null) {
      this.currencyIds = new ArrayList<>();
    }
    this.currencyIds.add(currencyIdsItem);
    return this;
  }

   /**
   * Get currencyIds
   * @return currencyIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCurrencyIds() {
    return currencyIds;
  }

  public void setCurrencyIds(List<Integer> currencyIds) {
    this.currencyIds = currencyIds;
  }


  public GenerateTopPlayersReportRequest dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public GenerateTopPlayersReportRequest dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public GenerateTopPlayersReportRequest inBaseCurrency(Boolean inBaseCurrency) {
    this.inBaseCurrency = inBaseCurrency;
    return this;
  }

   /**
   * Get inBaseCurrency
   * @return inBaseCurrency
  **/
  @javax.annotation.Nullable
  public Boolean getInBaseCurrency() {
    return inBaseCurrency;
  }

  public void setInBaseCurrency(Boolean inBaseCurrency) {
    this.inBaseCurrency = inBaseCurrency;
  }


  public GenerateTopPlayersReportRequest inDecimal(Boolean inDecimal) {
    this.inDecimal = inDecimal;
    return this;
  }

   /**
   * Get inDecimal
   * @return inDecimal
  **/
  @javax.annotation.Nullable
  public Boolean getInDecimal() {
    return inDecimal;
  }

  public void setInDecimal(Boolean inDecimal) {
    this.inDecimal = inDecimal;
  }


  public GenerateTopPlayersReportRequest sorting(Map<String, SortingOrders> sorting) {
    this.sorting = sorting;
    return this;
  }

  public GenerateTopPlayersReportRequest putSortingItem(String key, SortingOrders sortingItem) {
    if (this.sorting == null) {
      this.sorting = new HashMap<>();
    }
    this.sorting.put(key, sortingItem);
    return this;
  }

   /**
   * Get sorting
   * @return sorting
  **/
  @javax.annotation.Nullable
  public Map<String, SortingOrders> getSorting() {
    return sorting;
  }

  public void setSorting(Map<String, SortingOrders> sorting) {
    this.sorting = sorting;
  }


  public GenerateTopPlayersReportRequest licenseIds(List<Integer> licenseIds) {
    this.licenseIds = licenseIds;
    return this;
  }

  public GenerateTopPlayersReportRequest addLicenseIdsItem(Integer licenseIdsItem) {
    if (this.licenseIds == null) {
      this.licenseIds = new ArrayList<>();
    }
    this.licenseIds.add(licenseIdsItem);
    return this;
  }

   /**
   * Get licenseIds
   * @return licenseIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getLicenseIds() {
    return licenseIds;
  }

  public void setLicenseIds(List<Integer> licenseIds) {
    this.licenseIds = licenseIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateTopPlayersReportRequest generateTopPlayersReportRequest = (GenerateTopPlayersReportRequest) o;
    return Objects.equals(this.brandIds, generateTopPlayersReportRequest.brandIds) &&
        Objects.equals(this.affilateIds, generateTopPlayersReportRequest.affilateIds) &&
        Objects.equals(this.productIds, generateTopPlayersReportRequest.productIds) &&
        Objects.equals(this.currencyIds, generateTopPlayersReportRequest.currencyIds) &&
        Objects.equals(this.dateFrom, generateTopPlayersReportRequest.dateFrom) &&
        Objects.equals(this.dateTo, generateTopPlayersReportRequest.dateTo) &&
        Objects.equals(this.inBaseCurrency, generateTopPlayersReportRequest.inBaseCurrency) &&
        Objects.equals(this.inDecimal, generateTopPlayersReportRequest.inDecimal) &&
        Objects.equals(this.sorting, generateTopPlayersReportRequest.sorting) &&
        Objects.equals(this.licenseIds, generateTopPlayersReportRequest.licenseIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandIds, affilateIds, productIds, currencyIds, dateFrom, dateTo, inBaseCurrency, inDecimal, sorting, licenseIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateTopPlayersReportRequest {\n");
    sb.append("    brandIds: ").append(toIndentedString(brandIds)).append("\n");
    sb.append("    affilateIds: ").append(toIndentedString(affilateIds)).append("\n");
    sb.append("    productIds: ").append(toIndentedString(productIds)).append("\n");
    sb.append("    currencyIds: ").append(toIndentedString(currencyIds)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    inBaseCurrency: ").append(toIndentedString(inBaseCurrency)).append("\n");
    sb.append("    inDecimal: ").append(toIndentedString(inDecimal)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    licenseIds: ").append(toIndentedString(licenseIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrandIds");
    openapiFields.add("AffilateIds");
    openapiFields.add("ProductIds");
    openapiFields.add("CurrencyIds");
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("InBaseCurrency");
    openapiFields.add("InDecimal");
    openapiFields.add("Sorting");
    openapiFields.add("LicenseIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GenerateTopPlayersReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateTopPlayersReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateTopPlayersReportRequest is not found in the empty JSON string", GenerateTopPlayersReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateTopPlayersReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateTopPlayersReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BrandIds") != null && !jsonObj.get("BrandIds").isJsonNull() && !jsonObj.get("BrandIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandIds` to be an array in the JSON string but got `%s`", jsonObj.get("BrandIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AffilateIds") != null && !jsonObj.get("AffilateIds").isJsonNull() && !jsonObj.get("AffilateIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffilateIds` to be an array in the JSON string but got `%s`", jsonObj.get("AffilateIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ProductIds") != null && !jsonObj.get("ProductIds").isJsonNull() && !jsonObj.get("ProductIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductIds` to be an array in the JSON string but got `%s`", jsonObj.get("ProductIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CurrencyIds") != null && !jsonObj.get("CurrencyIds").isJsonNull() && !jsonObj.get("CurrencyIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyIds` to be an array in the JSON string but got `%s`", jsonObj.get("CurrencyIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LicenseIds") != null && !jsonObj.get("LicenseIds").isJsonNull() && !jsonObj.get("LicenseIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseIds` to be an array in the JSON string but got `%s`", jsonObj.get("LicenseIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateTopPlayersReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateTopPlayersReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateTopPlayersReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateTopPlayersReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateTopPlayersReportRequest>() {
           @Override
           public void write(JsonWriter out, GenerateTopPlayersReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateTopPlayersReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateTopPlayersReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateTopPlayersReportRequest
  * @throws IOException if the JSON string is invalid with respect to GenerateTopPlayersReportRequest
  */
  public static GenerateTopPlayersReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateTopPlayersReportRequest.class);
  }

 /**
  * Convert an instance of GenerateTopPlayersReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

