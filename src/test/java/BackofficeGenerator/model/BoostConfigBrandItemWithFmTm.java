/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * BoostConfigBrandItemWithFmTm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BoostConfigBrandItemWithFmTm {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FM_CONFIG_ID = "FmConfigId";
  @SerializedName(SERIALIZED_NAME_FM_CONFIG_ID)
  private Integer fmConfigId;

  public static final String SERIALIZED_NAME_FM_NAME = "FmName";
  @SerializedName(SERIALIZED_NAME_FM_NAME)
  private String fmName;

  public static final String SERIALIZED_NAME_TM_CONFIG_ID = "TmConfigId";
  @SerializedName(SERIALIZED_NAME_TM_CONFIG_ID)
  private Integer tmConfigId;

  public static final String SERIALIZED_NAME_TM_NAME = "TmName";
  @SerializedName(SERIALIZED_NAME_TM_NAME)
  private String tmName;

  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public BoostConfigBrandItemWithFmTm() {
  }

  public BoostConfigBrandItemWithFmTm name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BoostConfigBrandItemWithFmTm fmConfigId(Integer fmConfigId) {
    this.fmConfigId = fmConfigId;
    return this;
  }

   /**
   * Get fmConfigId
   * @return fmConfigId
  **/
  @javax.annotation.Nullable
  public Integer getFmConfigId() {
    return fmConfigId;
  }

  public void setFmConfigId(Integer fmConfigId) {
    this.fmConfigId = fmConfigId;
  }


  public BoostConfigBrandItemWithFmTm fmName(String fmName) {
    this.fmName = fmName;
    return this;
  }

   /**
   * Get fmName
   * @return fmName
  **/
  @javax.annotation.Nullable
  public String getFmName() {
    return fmName;
  }

  public void setFmName(String fmName) {
    this.fmName = fmName;
  }


  public BoostConfigBrandItemWithFmTm tmConfigId(Integer tmConfigId) {
    this.tmConfigId = tmConfigId;
    return this;
  }

   /**
   * Get tmConfigId
   * @return tmConfigId
  **/
  @javax.annotation.Nullable
  public Integer getTmConfigId() {
    return tmConfigId;
  }

  public void setTmConfigId(Integer tmConfigId) {
    this.tmConfigId = tmConfigId;
  }


  public BoostConfigBrandItemWithFmTm tmName(String tmName) {
    this.tmName = tmName;
    return this;
  }

   /**
   * Get tmName
   * @return tmName
  **/
  @javax.annotation.Nullable
  public String getTmName() {
    return tmName;
  }

  public void setTmName(String tmName) {
    this.tmName = tmName;
  }


  public BoostConfigBrandItemWithFmTm brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoostConfigBrandItemWithFmTm boostConfigBrandItemWithFmTm = (BoostConfigBrandItemWithFmTm) o;
    return Objects.equals(this.name, boostConfigBrandItemWithFmTm.name) &&
        Objects.equals(this.fmConfigId, boostConfigBrandItemWithFmTm.fmConfigId) &&
        Objects.equals(this.fmName, boostConfigBrandItemWithFmTm.fmName) &&
        Objects.equals(this.tmConfigId, boostConfigBrandItemWithFmTm.tmConfigId) &&
        Objects.equals(this.tmName, boostConfigBrandItemWithFmTm.tmName) &&
        Objects.equals(this.brandId, boostConfigBrandItemWithFmTm.brandId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, fmConfigId, fmName, tmConfigId, tmName, brandId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoostConfigBrandItemWithFmTm {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fmConfigId: ").append(toIndentedString(fmConfigId)).append("\n");
    sb.append("    fmName: ").append(toIndentedString(fmName)).append("\n");
    sb.append("    tmConfigId: ").append(toIndentedString(tmConfigId)).append("\n");
    sb.append("    tmName: ").append(toIndentedString(tmName)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("FmConfigId");
    openapiFields.add("FmName");
    openapiFields.add("TmConfigId");
    openapiFields.add("TmName");
    openapiFields.add("BrandId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BoostConfigBrandItemWithFmTm
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoostConfigBrandItemWithFmTm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoostConfigBrandItemWithFmTm is not found in the empty JSON string", BoostConfigBrandItemWithFmTm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoostConfigBrandItemWithFmTm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoostConfigBrandItemWithFmTm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("FmName") != null && !jsonObj.get("FmName").isJsonNull()) && !jsonObj.get("FmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FmName").toString()));
      }
      if ((jsonObj.get("TmName") != null && !jsonObj.get("TmName").isJsonNull()) && !jsonObj.get("TmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TmName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoostConfigBrandItemWithFmTm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoostConfigBrandItemWithFmTm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoostConfigBrandItemWithFmTm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoostConfigBrandItemWithFmTm.class));

       return (TypeAdapter<T>) new TypeAdapter<BoostConfigBrandItemWithFmTm>() {
           @Override
           public void write(JsonWriter out, BoostConfigBrandItemWithFmTm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoostConfigBrandItemWithFmTm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BoostConfigBrandItemWithFmTm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BoostConfigBrandItemWithFmTm
  * @throws IOException if the JSON string is invalid with respect to BoostConfigBrandItemWithFmTm
  */
  public static BoostConfigBrandItemWithFmTm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoostConfigBrandItemWithFmTm.class);
  }

 /**
  * Convert an instance of BoostConfigBrandItemWithFmTm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

