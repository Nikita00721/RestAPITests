/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * PlayerListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class PlayerListItem {
  public static final String SERIALIZED_NAME_EXT_ID = "ExtId";
  @SerializedName(SERIALIZED_NAME_EXT_ID)
  private String extId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REG_DATE = "RegDate";
  @SerializedName(SERIALIZED_NAME_REG_DATE)
  private OffsetDateTime regDate;

  public static final String SERIALIZED_NAME_LICENSE_ID = "LicenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private Integer licenseId;

  public static final String SERIALIZED_NAME_LICENSE_NAME = "LicenseName";
  @SerializedName(SERIALIZED_NAME_LICENSE_NAME)
  private String licenseName;

  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_BRAND_NAME = "BrandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_AFFILIATE_ID = "AffiliateId";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_ID)
  private Integer affiliateId;

  public static final String SERIALIZED_NAME_AFFILIATE_NAME = "AffiliateName";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_NAME)
  private String affiliateName;

  public static final String SERIALIZED_NAME_LIMIT_GROUP_ID = "LimitGroupId";
  @SerializedName(SERIALIZED_NAME_LIMIT_GROUP_ID)
  private Integer limitGroupId;

  public static final String SERIALIZED_NAME_LIMIT_GROUP_NAME = "LimitGroupName";
  @SerializedName(SERIALIZED_NAME_LIMIT_GROUP_NAME)
  private String limitGroupName;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public PlayerListItem() {
  }

  public PlayerListItem extId(String extId) {
    this.extId = extId;
    return this;
  }

   /**
   * Get extId
   * @return extId
  **/
  @javax.annotation.Nullable
  public String getExtId() {
    return extId;
  }

  public void setExtId(String extId) {
    this.extId = extId;
  }


  public PlayerListItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerListItem regDate(OffsetDateTime regDate) {
    this.regDate = regDate;
    return this;
  }

   /**
   * Get regDate
   * @return regDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRegDate() {
    return regDate;
  }

  public void setRegDate(OffsetDateTime regDate) {
    this.regDate = regDate;
  }


  public PlayerListItem licenseId(Integer licenseId) {
    this.licenseId = licenseId;
    return this;
  }

   /**
   * Get licenseId
   * @return licenseId
  **/
  @javax.annotation.Nullable
  public Integer getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(Integer licenseId) {
    this.licenseId = licenseId;
  }


  public PlayerListItem licenseName(String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

   /**
   * Get licenseName
   * @return licenseName
  **/
  @javax.annotation.Nullable
  public String getLicenseName() {
    return licenseName;
  }

  public void setLicenseName(String licenseName) {
    this.licenseName = licenseName;
  }


  public PlayerListItem brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public PlayerListItem brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * Get brandName
   * @return brandName
  **/
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public PlayerListItem affiliateId(Integer affiliateId) {
    this.affiliateId = affiliateId;
    return this;
  }

   /**
   * Get affiliateId
   * @return affiliateId
  **/
  @javax.annotation.Nullable
  public Integer getAffiliateId() {
    return affiliateId;
  }

  public void setAffiliateId(Integer affiliateId) {
    this.affiliateId = affiliateId;
  }


  public PlayerListItem affiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
    return this;
  }

   /**
   * Get affiliateName
   * @return affiliateName
  **/
  @javax.annotation.Nullable
  public String getAffiliateName() {
    return affiliateName;
  }

  public void setAffiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
  }


  public PlayerListItem limitGroupId(Integer limitGroupId) {
    this.limitGroupId = limitGroupId;
    return this;
  }

   /**
   * Get limitGroupId
   * @return limitGroupId
  **/
  @javax.annotation.Nullable
  public Integer getLimitGroupId() {
    return limitGroupId;
  }

  public void setLimitGroupId(Integer limitGroupId) {
    this.limitGroupId = limitGroupId;
  }


  public PlayerListItem limitGroupName(String limitGroupName) {
    this.limitGroupName = limitGroupName;
    return this;
  }

   /**
   * Get limitGroupName
   * @return limitGroupName
  **/
  @javax.annotation.Nullable
  public String getLimitGroupName() {
    return limitGroupName;
  }

  public void setLimitGroupName(String limitGroupName) {
    this.limitGroupName = limitGroupName;
  }


  public PlayerListItem color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public PlayerListItem playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerListItem playerListItem = (PlayerListItem) o;
    return Objects.equals(this.extId, playerListItem.extId) &&
        Objects.equals(this.name, playerListItem.name) &&
        Objects.equals(this.regDate, playerListItem.regDate) &&
        Objects.equals(this.licenseId, playerListItem.licenseId) &&
        Objects.equals(this.licenseName, playerListItem.licenseName) &&
        Objects.equals(this.brandId, playerListItem.brandId) &&
        Objects.equals(this.brandName, playerListItem.brandName) &&
        Objects.equals(this.affiliateId, playerListItem.affiliateId) &&
        Objects.equals(this.affiliateName, playerListItem.affiliateName) &&
        Objects.equals(this.limitGroupId, playerListItem.limitGroupId) &&
        Objects.equals(this.limitGroupName, playerListItem.limitGroupName) &&
        Objects.equals(this.color, playerListItem.color) &&
        Objects.equals(this.playerId, playerListItem.playerId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(extId, name, regDate, licenseId, licenseName, brandId, brandName, affiliateId, affiliateName, limitGroupId, limitGroupName, color, playerId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerListItem {\n");
    sb.append("    extId: ").append(toIndentedString(extId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    regDate: ").append(toIndentedString(regDate)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    affiliateId: ").append(toIndentedString(affiliateId)).append("\n");
    sb.append("    affiliateName: ").append(toIndentedString(affiliateName)).append("\n");
    sb.append("    limitGroupId: ").append(toIndentedString(limitGroupId)).append("\n");
    sb.append("    limitGroupName: ").append(toIndentedString(limitGroupName)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExtId");
    openapiFields.add("Name");
    openapiFields.add("RegDate");
    openapiFields.add("LicenseId");
    openapiFields.add("LicenseName");
    openapiFields.add("BrandId");
    openapiFields.add("BrandName");
    openapiFields.add("AffiliateId");
    openapiFields.add("AffiliateName");
    openapiFields.add("LimitGroupId");
    openapiFields.add("LimitGroupName");
    openapiFields.add("Color");
    openapiFields.add("PlayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PlayerListItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerListItem is not found in the empty JSON string", PlayerListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExtId") != null && !jsonObj.get("ExtId").isJsonNull()) && !jsonObj.get("ExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("LicenseName") != null && !jsonObj.get("LicenseName").isJsonNull()) && !jsonObj.get("LicenseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseName").toString()));
      }
      if ((jsonObj.get("BrandName") != null && !jsonObj.get("BrandName").isJsonNull()) && !jsonObj.get("BrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandName").toString()));
      }
      if ((jsonObj.get("AffiliateName") != null && !jsonObj.get("AffiliateName").isJsonNull()) && !jsonObj.get("AffiliateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffiliateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AffiliateName").toString()));
      }
      if ((jsonObj.get("LimitGroupName") != null && !jsonObj.get("LimitGroupName").isJsonNull()) && !jsonObj.get("LimitGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitGroupName").toString()));
      }
      if ((jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) && !jsonObj.get("Color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerListItem>() {
           @Override
           public void write(JsonWriter out, PlayerListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerListItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerListItem
  * @throws IOException if the JSON string is invalid with respect to PlayerListItem
  */
  public static PlayerListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerListItem.class);
  }

 /**
  * Convert an instance of PlayerListItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

