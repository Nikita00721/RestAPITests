/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

/**
 * Gets or Sets FeedProvidersEnum
 */
@JsonAdapter(FeedProvidersEnum.Adapter.class)
public enum FeedProvidersEnum {
  
  CustomFeedProvider(4),
  
  BetRadarUnifiedOdds(15),
  
  BetGenius(16),
  
  VFL(17),
  
  VBL(18),
  
  VTI(19),
  
  VDR(20),
  
  VHC(21),
  
  Kiron(26),
  
  BetBy(27),
  
  ADF(32),
  
  DST(34),
  
  Toto(35),
  
  MiniFeed(36),
  
  Oddin(37),
  
  BetBazar(38),
  
  Betradar_PremiumCricket(39),
  
  Lotteries(40),
  
  Beter(41),
  
  TheSports(43),
  
  SportIq(44),
  
  LEAP(45),
  
  DST_New(46),
  
  VEA(47),
  
  WST(48),
  
  ERivals(49),
  
  nVenue(50),
  
  Sis(51),
  
  Kero(52),
  
  Sportcast(53),
  
  BetInvest(54),
  
  IMGArena(55);

  private Integer value;

  FeedProvidersEnum(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FeedProvidersEnum fromValue(Integer value) {
    for (FeedProvidersEnum b : FeedProvidersEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FeedProvidersEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final FeedProvidersEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FeedProvidersEnum read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return FeedProvidersEnum.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    FeedProvidersEnum.fromValue(value);
  }
}

