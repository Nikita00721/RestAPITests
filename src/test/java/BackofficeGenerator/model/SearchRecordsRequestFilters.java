/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * SearchRecordsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SearchRecordsRequestFilters {
  public static final String SERIALIZED_NAME_INCLUDE_SUCCESS = "IncludeSuccess";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SUCCESS)
  private Boolean includeSuccess;

  public static final String SERIALIZED_NAME_INCLUDE_ERRORS = "IncludeErrors";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ERRORS)
  private Boolean includeErrors;

  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_SECTIONS = "Sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<Integer> sections;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Integer> actions;

  public static final String SERIALIZED_NAME_ROLES = "Roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Integer> roles;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<Integer> users;

  public static final String SERIALIZED_NAME_LICENSES = "Licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<Integer> licenses;

  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<Integer> brands;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "SearchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_TAKE = "Take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_INCLUDE_OUTDATED = "IncludeOutdated";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OUTDATED)
  private Boolean includeOutdated;

  public SearchRecordsRequestFilters() {
  }

  public SearchRecordsRequestFilters includeSuccess(Boolean includeSuccess) {
    this.includeSuccess = includeSuccess;
    return this;
  }

   /**
   * Get includeSuccess
   * @return includeSuccess
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeSuccess() {
    return includeSuccess;
  }

  public void setIncludeSuccess(Boolean includeSuccess) {
    this.includeSuccess = includeSuccess;
  }


  public SearchRecordsRequestFilters includeErrors(Boolean includeErrors) {
    this.includeErrors = includeErrors;
    return this;
  }

   /**
   * Get includeErrors
   * @return includeErrors
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeErrors() {
    return includeErrors;
  }

  public void setIncludeErrors(Boolean includeErrors) {
    this.includeErrors = includeErrors;
  }


  public SearchRecordsRequestFilters dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public SearchRecordsRequestFilters dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public SearchRecordsRequestFilters sections(List<Integer> sections) {
    this.sections = sections;
    return this;
  }

  public SearchRecordsRequestFilters addSectionsItem(Integer sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

   /**
   * Get sections
   * @return sections
  **/
  @javax.annotation.Nullable
  public List<Integer> getSections() {
    return sections;
  }

  public void setSections(List<Integer> sections) {
    this.sections = sections;
  }


  public SearchRecordsRequestFilters actions(List<Integer> actions) {
    this.actions = actions;
    return this;
  }

  public SearchRecordsRequestFilters addActionsItem(Integer actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  public List<Integer> getActions() {
    return actions;
  }

  public void setActions(List<Integer> actions) {
    this.actions = actions;
  }


  public SearchRecordsRequestFilters roles(List<Integer> roles) {
    this.roles = roles;
    return this;
  }

  public SearchRecordsRequestFilters addRolesItem(Integer rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nullable
  public List<Integer> getRoles() {
    return roles;
  }

  public void setRoles(List<Integer> roles) {
    this.roles = roles;
  }


  public SearchRecordsRequestFilters users(List<Integer> users) {
    this.users = users;
    return this;
  }

  public SearchRecordsRequestFilters addUsersItem(Integer usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nullable
  public List<Integer> getUsers() {
    return users;
  }

  public void setUsers(List<Integer> users) {
    this.users = users;
  }


  public SearchRecordsRequestFilters licenses(List<Integer> licenses) {
    this.licenses = licenses;
    return this;
  }

  public SearchRecordsRequestFilters addLicensesItem(Integer licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

   /**
   * Get licenses
   * @return licenses
  **/
  @javax.annotation.Nullable
  public List<Integer> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<Integer> licenses) {
    this.licenses = licenses;
  }


  public SearchRecordsRequestFilters brands(List<Integer> brands) {
    this.brands = brands;
    return this;
  }

  public SearchRecordsRequestFilters addBrandsItem(Integer brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

   /**
   * Get brands
   * @return brands
  **/
  @javax.annotation.Nullable
  public List<Integer> getBrands() {
    return brands;
  }

  public void setBrands(List<Integer> brands) {
    this.brands = brands;
  }


  public SearchRecordsRequestFilters searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public SearchRecordsRequestFilters skip(Integer skip) {
    this.skip = skip;
    return this;
  }

   /**
   * Get skip
   * @return skip
  **/
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }

  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public SearchRecordsRequestFilters take(Integer take) {
    this.take = take;
    return this;
  }

   /**
   * Get take
   * @return take
  **/
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }

  public void setTake(Integer take) {
    this.take = take;
  }


  public SearchRecordsRequestFilters includeOutdated(Boolean includeOutdated) {
    this.includeOutdated = includeOutdated;
    return this;
  }

   /**
   * Get includeOutdated
   * @return includeOutdated
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeOutdated() {
    return includeOutdated;
  }

  public void setIncludeOutdated(Boolean includeOutdated) {
    this.includeOutdated = includeOutdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRecordsRequestFilters searchRecordsRequestFilters = (SearchRecordsRequestFilters) o;
    return Objects.equals(this.includeSuccess, searchRecordsRequestFilters.includeSuccess) &&
        Objects.equals(this.includeErrors, searchRecordsRequestFilters.includeErrors) &&
        Objects.equals(this.dateFrom, searchRecordsRequestFilters.dateFrom) &&
        Objects.equals(this.dateTo, searchRecordsRequestFilters.dateTo) &&
        Objects.equals(this.sections, searchRecordsRequestFilters.sections) &&
        Objects.equals(this.actions, searchRecordsRequestFilters.actions) &&
        Objects.equals(this.roles, searchRecordsRequestFilters.roles) &&
        Objects.equals(this.users, searchRecordsRequestFilters.users) &&
        Objects.equals(this.licenses, searchRecordsRequestFilters.licenses) &&
        Objects.equals(this.brands, searchRecordsRequestFilters.brands) &&
        Objects.equals(this.searchString, searchRecordsRequestFilters.searchString) &&
        Objects.equals(this.skip, searchRecordsRequestFilters.skip) &&
        Objects.equals(this.take, searchRecordsRequestFilters.take) &&
        Objects.equals(this.includeOutdated, searchRecordsRequestFilters.includeOutdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeSuccess, includeErrors, dateFrom, dateTo, sections, actions, roles, users, licenses, brands, searchString, skip, take, includeOutdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRecordsRequestFilters {\n");
    sb.append("    includeSuccess: ").append(toIndentedString(includeSuccess)).append("\n");
    sb.append("    includeErrors: ").append(toIndentedString(includeErrors)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    includeOutdated: ").append(toIndentedString(includeOutdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IncludeSuccess");
    openapiFields.add("IncludeErrors");
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("Sections");
    openapiFields.add("Actions");
    openapiFields.add("Roles");
    openapiFields.add("Users");
    openapiFields.add("Licenses");
    openapiFields.add("Brands");
    openapiFields.add("SearchString");
    openapiFields.add("Skip");
    openapiFields.add("Take");
    openapiFields.add("IncludeOutdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchRecordsRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchRecordsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchRecordsRequestFilters is not found in the empty JSON string", SearchRecordsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchRecordsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchRecordsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Sections") != null && !jsonObj.get("Sections").isJsonNull() && !jsonObj.get("Sections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sections` to be an array in the JSON string but got `%s`", jsonObj.get("Sections").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull() && !jsonObj.get("Actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Actions` to be an array in the JSON string but got `%s`", jsonObj.get("Actions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Roles") != null && !jsonObj.get("Roles").isJsonNull() && !jsonObj.get("Roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Roles` to be an array in the JSON string but got `%s`", jsonObj.get("Roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Users") != null && !jsonObj.get("Users").isJsonNull() && !jsonObj.get("Users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Users` to be an array in the JSON string but got `%s`", jsonObj.get("Users").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Licenses") != null && !jsonObj.get("Licenses").isJsonNull() && !jsonObj.get("Licenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Licenses` to be an array in the JSON string but got `%s`", jsonObj.get("Licenses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Brands") != null && !jsonObj.get("Brands").isJsonNull() && !jsonObj.get("Brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Brands` to be an array in the JSON string but got `%s`", jsonObj.get("Brands").toString()));
      }
      if ((jsonObj.get("SearchString") != null && !jsonObj.get("SearchString").isJsonNull()) && !jsonObj.get("SearchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchRecordsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchRecordsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchRecordsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchRecordsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchRecordsRequestFilters>() {
           @Override
           public void write(JsonWriter out, SearchRecordsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchRecordsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchRecordsRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchRecordsRequestFilters
  * @throws IOException if the JSON string is invalid with respect to SearchRecordsRequestFilters
  */
  public static SearchRecordsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchRecordsRequestFilters.class);
  }

 /**
  * Convert an instance of SearchRecordsRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

