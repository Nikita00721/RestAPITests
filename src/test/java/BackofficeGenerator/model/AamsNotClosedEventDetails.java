/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * AamsNotClosedEventDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class AamsNotClosedEventDetails {
  public static final String SERIALIZED_NAME_EVENT_NAME = "EventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_FEED_MARKET_ID = "FeedMarketId";
  @SerializedName(SERIALIZED_NAME_FEED_MARKET_ID)
  private Long feedMarketId;

  public static final String SERIALIZED_NAME_EXT_MARKET_ID = "ExtMarketId";
  @SerializedName(SERIALIZED_NAME_EXT_MARKET_ID)
  private Integer extMarketId;

  public static final String SERIALIZED_NAME_MARKET_NAME = "MarketName";
  @SerializedName(SERIALIZED_NAME_MARKET_NAME)
  private String marketName;

  public static final String SERIALIZED_NAME_FEED_SELECTION_ID = "FeedSelectionId";
  @SerializedName(SERIALIZED_NAME_FEED_SELECTION_ID)
  private Long feedSelectionId;

  public static final String SERIALIZED_NAME_EXT_SELECTION_ID = "ExtSelectionId";
  @SerializedName(SERIALIZED_NAME_EXT_SELECTION_ID)
  private Integer extSelectionId;

  public static final String SERIALIZED_NAME_SELECTION_NAME = "SelectionName";
  @SerializedName(SERIALIZED_NAME_SELECTION_NAME)
  private String selectionName;

  public static final String SERIALIZED_NAME_SPOV = "Spov";
  @SerializedName(SERIALIZED_NAME_SPOV)
  private String spov;

  public static final String SERIALIZED_NAME_INT_BET_ID = "IntBetId";
  @SerializedName(SERIALIZED_NAME_INT_BET_ID)
  private Long intBetId;

  public static final String SERIALIZED_NAME_EXT_EVENT_ID = "ExtEventId";
  @SerializedName(SERIALIZED_NAME_EXT_EVENT_ID)
  private String extEventId;

  public AamsNotClosedEventDetails() {
  }

  public AamsNotClosedEventDetails eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Get eventName
   * @return eventName
  **/
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public AamsNotClosedEventDetails feedMarketId(Long feedMarketId) {
    this.feedMarketId = feedMarketId;
    return this;
  }

   /**
   * Get feedMarketId
   * @return feedMarketId
  **/
  @javax.annotation.Nullable
  public Long getFeedMarketId() {
    return feedMarketId;
  }

  public void setFeedMarketId(Long feedMarketId) {
    this.feedMarketId = feedMarketId;
  }


  public AamsNotClosedEventDetails extMarketId(Integer extMarketId) {
    this.extMarketId = extMarketId;
    return this;
  }

   /**
   * Get extMarketId
   * @return extMarketId
  **/
  @javax.annotation.Nullable
  public Integer getExtMarketId() {
    return extMarketId;
  }

  public void setExtMarketId(Integer extMarketId) {
    this.extMarketId = extMarketId;
  }


  public AamsNotClosedEventDetails marketName(String marketName) {
    this.marketName = marketName;
    return this;
  }

   /**
   * Get marketName
   * @return marketName
  **/
  @javax.annotation.Nullable
  public String getMarketName() {
    return marketName;
  }

  public void setMarketName(String marketName) {
    this.marketName = marketName;
  }


  public AamsNotClosedEventDetails feedSelectionId(Long feedSelectionId) {
    this.feedSelectionId = feedSelectionId;
    return this;
  }

   /**
   * Get feedSelectionId
   * @return feedSelectionId
  **/
  @javax.annotation.Nullable
  public Long getFeedSelectionId() {
    return feedSelectionId;
  }

  public void setFeedSelectionId(Long feedSelectionId) {
    this.feedSelectionId = feedSelectionId;
  }


  public AamsNotClosedEventDetails extSelectionId(Integer extSelectionId) {
    this.extSelectionId = extSelectionId;
    return this;
  }

   /**
   * Get extSelectionId
   * @return extSelectionId
  **/
  @javax.annotation.Nullable
  public Integer getExtSelectionId() {
    return extSelectionId;
  }

  public void setExtSelectionId(Integer extSelectionId) {
    this.extSelectionId = extSelectionId;
  }


  public AamsNotClosedEventDetails selectionName(String selectionName) {
    this.selectionName = selectionName;
    return this;
  }

   /**
   * Get selectionName
   * @return selectionName
  **/
  @javax.annotation.Nullable
  public String getSelectionName() {
    return selectionName;
  }

  public void setSelectionName(String selectionName) {
    this.selectionName = selectionName;
  }


  public AamsNotClosedEventDetails spov(String spov) {
    this.spov = spov;
    return this;
  }

   /**
   * Get spov
   * @return spov
  **/
  @javax.annotation.Nullable
  public String getSpov() {
    return spov;
  }

  public void setSpov(String spov) {
    this.spov = spov;
  }


  public AamsNotClosedEventDetails intBetId(Long intBetId) {
    this.intBetId = intBetId;
    return this;
  }

   /**
   * Get intBetId
   * @return intBetId
  **/
  @javax.annotation.Nullable
  public Long getIntBetId() {
    return intBetId;
  }

  public void setIntBetId(Long intBetId) {
    this.intBetId = intBetId;
  }


  public AamsNotClosedEventDetails extEventId(String extEventId) {
    this.extEventId = extEventId;
    return this;
  }

   /**
   * Get extEventId
   * @return extEventId
  **/
  @javax.annotation.Nullable
  public String getExtEventId() {
    return extEventId;
  }

  public void setExtEventId(String extEventId) {
    this.extEventId = extEventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AamsNotClosedEventDetails aamsNotClosedEventDetails = (AamsNotClosedEventDetails) o;
    return Objects.equals(this.eventName, aamsNotClosedEventDetails.eventName) &&
        Objects.equals(this.feedMarketId, aamsNotClosedEventDetails.feedMarketId) &&
        Objects.equals(this.extMarketId, aamsNotClosedEventDetails.extMarketId) &&
        Objects.equals(this.marketName, aamsNotClosedEventDetails.marketName) &&
        Objects.equals(this.feedSelectionId, aamsNotClosedEventDetails.feedSelectionId) &&
        Objects.equals(this.extSelectionId, aamsNotClosedEventDetails.extSelectionId) &&
        Objects.equals(this.selectionName, aamsNotClosedEventDetails.selectionName) &&
        Objects.equals(this.spov, aamsNotClosedEventDetails.spov) &&
        Objects.equals(this.intBetId, aamsNotClosedEventDetails.intBetId) &&
        Objects.equals(this.extEventId, aamsNotClosedEventDetails.extEventId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, feedMarketId, extMarketId, marketName, feedSelectionId, extSelectionId, selectionName, spov, intBetId, extEventId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AamsNotClosedEventDetails {\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    feedMarketId: ").append(toIndentedString(feedMarketId)).append("\n");
    sb.append("    extMarketId: ").append(toIndentedString(extMarketId)).append("\n");
    sb.append("    marketName: ").append(toIndentedString(marketName)).append("\n");
    sb.append("    feedSelectionId: ").append(toIndentedString(feedSelectionId)).append("\n");
    sb.append("    extSelectionId: ").append(toIndentedString(extSelectionId)).append("\n");
    sb.append("    selectionName: ").append(toIndentedString(selectionName)).append("\n");
    sb.append("    spov: ").append(toIndentedString(spov)).append("\n");
    sb.append("    intBetId: ").append(toIndentedString(intBetId)).append("\n");
    sb.append("    extEventId: ").append(toIndentedString(extEventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventName");
    openapiFields.add("FeedMarketId");
    openapiFields.add("ExtMarketId");
    openapiFields.add("MarketName");
    openapiFields.add("FeedSelectionId");
    openapiFields.add("ExtSelectionId");
    openapiFields.add("SelectionName");
    openapiFields.add("Spov");
    openapiFields.add("IntBetId");
    openapiFields.add("ExtEventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AamsNotClosedEventDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AamsNotClosedEventDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AamsNotClosedEventDetails is not found in the empty JSON string", AamsNotClosedEventDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AamsNotClosedEventDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AamsNotClosedEventDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EventName") != null && !jsonObj.get("EventName").isJsonNull()) && !jsonObj.get("EventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventName").toString()));
      }
      if ((jsonObj.get("MarketName") != null && !jsonObj.get("MarketName").isJsonNull()) && !jsonObj.get("MarketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketName").toString()));
      }
      if ((jsonObj.get("SelectionName") != null && !jsonObj.get("SelectionName").isJsonNull()) && !jsonObj.get("SelectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SelectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SelectionName").toString()));
      }
      if ((jsonObj.get("Spov") != null && !jsonObj.get("Spov").isJsonNull()) && !jsonObj.get("Spov").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Spov` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Spov").toString()));
      }
      if ((jsonObj.get("ExtEventId") != null && !jsonObj.get("ExtEventId").isJsonNull()) && !jsonObj.get("ExtEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtEventId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AamsNotClosedEventDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AamsNotClosedEventDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AamsNotClosedEventDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AamsNotClosedEventDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AamsNotClosedEventDetails>() {
           @Override
           public void write(JsonWriter out, AamsNotClosedEventDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AamsNotClosedEventDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AamsNotClosedEventDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AamsNotClosedEventDetails
  * @throws IOException if the JSON string is invalid with respect to AamsNotClosedEventDetails
  */
  public static AamsNotClosedEventDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AamsNotClosedEventDetails.class);
  }

 /**
  * Convert an instance of AamsNotClosedEventDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

