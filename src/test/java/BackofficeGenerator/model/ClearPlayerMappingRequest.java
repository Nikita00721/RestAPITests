/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ClearPlayerMappingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class ClearPlayerMappingRequest {
  public static final String SERIALIZED_NAME_INT_COMPETITOR_ID = "IntCompetitorId";
  @SerializedName(SERIALIZED_NAME_INT_COMPETITOR_ID)
  private Integer intCompetitorId;

  public static final String SERIALIZED_NAME_AAMS_TEAM_ID = "AamsTeamId";
  @SerializedName(SERIALIZED_NAME_AAMS_TEAM_ID)
  private Integer aamsTeamId;

  public static final String SERIALIZED_NAME_SPORT_CATEGORY_ID = "SportCategoryId";
  @SerializedName(SERIALIZED_NAME_SPORT_CATEGORY_ID)
  private Integer sportCategoryId;

  public static final String SERIALIZED_NAME_INT_PLAYER_ID = "IntPlayerId";
  @SerializedName(SERIALIZED_NAME_INT_PLAYER_ID)
  private Integer intPlayerId;

  public ClearPlayerMappingRequest() {
  }

  public ClearPlayerMappingRequest intCompetitorId(Integer intCompetitorId) {
    this.intCompetitorId = intCompetitorId;
    return this;
  }

   /**
   * Get intCompetitorId
   * @return intCompetitorId
  **/
  @javax.annotation.Nullable
  public Integer getIntCompetitorId() {
    return intCompetitorId;
  }

  public void setIntCompetitorId(Integer intCompetitorId) {
    this.intCompetitorId = intCompetitorId;
  }


  public ClearPlayerMappingRequest aamsTeamId(Integer aamsTeamId) {
    this.aamsTeamId = aamsTeamId;
    return this;
  }

   /**
   * Get aamsTeamId
   * @return aamsTeamId
  **/
  @javax.annotation.Nullable
  public Integer getAamsTeamId() {
    return aamsTeamId;
  }

  public void setAamsTeamId(Integer aamsTeamId) {
    this.aamsTeamId = aamsTeamId;
  }


  public ClearPlayerMappingRequest sportCategoryId(Integer sportCategoryId) {
    this.sportCategoryId = sportCategoryId;
    return this;
  }

   /**
   * Get sportCategoryId
   * @return sportCategoryId
  **/
  @javax.annotation.Nullable
  public Integer getSportCategoryId() {
    return sportCategoryId;
  }

  public void setSportCategoryId(Integer sportCategoryId) {
    this.sportCategoryId = sportCategoryId;
  }


  public ClearPlayerMappingRequest intPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
    return this;
  }

   /**
   * Get intPlayerId
   * @return intPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getIntPlayerId() {
    return intPlayerId;
  }

  public void setIntPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClearPlayerMappingRequest clearPlayerMappingRequest = (ClearPlayerMappingRequest) o;
    return Objects.equals(this.intCompetitorId, clearPlayerMappingRequest.intCompetitorId) &&
        Objects.equals(this.aamsTeamId, clearPlayerMappingRequest.aamsTeamId) &&
        Objects.equals(this.sportCategoryId, clearPlayerMappingRequest.sportCategoryId) &&
        Objects.equals(this.intPlayerId, clearPlayerMappingRequest.intPlayerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intCompetitorId, aamsTeamId, sportCategoryId, intPlayerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClearPlayerMappingRequest {\n");
    sb.append("    intCompetitorId: ").append(toIndentedString(intCompetitorId)).append("\n");
    sb.append("    aamsTeamId: ").append(toIndentedString(aamsTeamId)).append("\n");
    sb.append("    sportCategoryId: ").append(toIndentedString(sportCategoryId)).append("\n");
    sb.append("    intPlayerId: ").append(toIndentedString(intPlayerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntCompetitorId");
    openapiFields.add("AamsTeamId");
    openapiFields.add("SportCategoryId");
    openapiFields.add("IntPlayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ClearPlayerMappingRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClearPlayerMappingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClearPlayerMappingRequest is not found in the empty JSON string", ClearPlayerMappingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClearPlayerMappingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClearPlayerMappingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClearPlayerMappingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClearPlayerMappingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClearPlayerMappingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClearPlayerMappingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ClearPlayerMappingRequest>() {
           @Override
           public void write(JsonWriter out, ClearPlayerMappingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClearPlayerMappingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClearPlayerMappingRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClearPlayerMappingRequest
  * @throws IOException if the JSON string is invalid with respect to ClearPlayerMappingRequest
  */
  public static ClearPlayerMappingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClearPlayerMappingRequest.class);
  }

 /**
  * Convert an instance of ClearPlayerMappingRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

