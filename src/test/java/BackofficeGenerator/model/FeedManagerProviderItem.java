/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * FeedManagerProviderItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class FeedManagerProviderItem {
  public static final String SERIALIZED_NAME_FEED_PROVIDER_NAME = "FeedProviderName";
  @SerializedName(SERIALIZED_NAME_FEED_PROVIDER_NAME)
  private String feedProviderName;

  public static final String SERIALIZED_NAME_IS_EVENT_PROVIDER = "IsEventProvider";
  @SerializedName(SERIALIZED_NAME_IS_EVENT_PROVIDER)
  private Boolean isEventProvider;

  public static final String SERIALIZED_NAME_IS_MARKET_PROVIDER = "IsMarketProvider";
  @SerializedName(SERIALIZED_NAME_IS_MARKET_PROVIDER)
  private Boolean isMarketProvider;

  public static final String SERIALIZED_NAME_FEED_PROVIDER_ID = "FeedProviderId";
  @SerializedName(SERIALIZED_NAME_FEED_PROVIDER_ID)
  private Integer feedProviderId;

  public FeedManagerProviderItem() {
  }

  public FeedManagerProviderItem feedProviderName(String feedProviderName) {
    this.feedProviderName = feedProviderName;
    return this;
  }

   /**
   * Get feedProviderName
   * @return feedProviderName
  **/
  @javax.annotation.Nullable
  public String getFeedProviderName() {
    return feedProviderName;
  }

  public void setFeedProviderName(String feedProviderName) {
    this.feedProviderName = feedProviderName;
  }


  public FeedManagerProviderItem isEventProvider(Boolean isEventProvider) {
    this.isEventProvider = isEventProvider;
    return this;
  }

   /**
   * Get isEventProvider
   * @return isEventProvider
  **/
  @javax.annotation.Nullable
  public Boolean getIsEventProvider() {
    return isEventProvider;
  }

  public void setIsEventProvider(Boolean isEventProvider) {
    this.isEventProvider = isEventProvider;
  }


  public FeedManagerProviderItem isMarketProvider(Boolean isMarketProvider) {
    this.isMarketProvider = isMarketProvider;
    return this;
  }

   /**
   * Get isMarketProvider
   * @return isMarketProvider
  **/
  @javax.annotation.Nullable
  public Boolean getIsMarketProvider() {
    return isMarketProvider;
  }

  public void setIsMarketProvider(Boolean isMarketProvider) {
    this.isMarketProvider = isMarketProvider;
  }


  public FeedManagerProviderItem feedProviderId(Integer feedProviderId) {
    this.feedProviderId = feedProviderId;
    return this;
  }

   /**
   * Get feedProviderId
   * @return feedProviderId
  **/
  @javax.annotation.Nullable
  public Integer getFeedProviderId() {
    return feedProviderId;
  }

  public void setFeedProviderId(Integer feedProviderId) {
    this.feedProviderId = feedProviderId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedManagerProviderItem feedManagerProviderItem = (FeedManagerProviderItem) o;
    return Objects.equals(this.feedProviderName, feedManagerProviderItem.feedProviderName) &&
        Objects.equals(this.isEventProvider, feedManagerProviderItem.isEventProvider) &&
        Objects.equals(this.isMarketProvider, feedManagerProviderItem.isMarketProvider) &&
        Objects.equals(this.feedProviderId, feedManagerProviderItem.feedProviderId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedProviderName, isEventProvider, isMarketProvider, feedProviderId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedManagerProviderItem {\n");
    sb.append("    feedProviderName: ").append(toIndentedString(feedProviderName)).append("\n");
    sb.append("    isEventProvider: ").append(toIndentedString(isEventProvider)).append("\n");
    sb.append("    isMarketProvider: ").append(toIndentedString(isMarketProvider)).append("\n");
    sb.append("    feedProviderId: ").append(toIndentedString(feedProviderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeedProviderName");
    openapiFields.add("IsEventProvider");
    openapiFields.add("IsMarketProvider");
    openapiFields.add("FeedProviderId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeedManagerProviderItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedManagerProviderItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedManagerProviderItem is not found in the empty JSON string", FeedManagerProviderItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedManagerProviderItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedManagerProviderItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FeedProviderName") != null && !jsonObj.get("FeedProviderName").isJsonNull()) && !jsonObj.get("FeedProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedProviderName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedManagerProviderItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedManagerProviderItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedManagerProviderItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedManagerProviderItem.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedManagerProviderItem>() {
           @Override
           public void write(JsonWriter out, FeedManagerProviderItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedManagerProviderItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedManagerProviderItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedManagerProviderItem
  * @throws IOException if the JSON string is invalid with respect to FeedManagerProviderItem
  */
  public static FeedManagerProviderItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedManagerProviderItem.class);
  }

 /**
  * Convert an instance of FeedManagerProviderItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

