/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * LimitSettingsItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class LimitSettingsItem {
  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_STAKE_LIMIT_VIO_ACTION = "StakeLimitVioAction";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_VIO_ACTION)
  private StakeLimitViolationActions stakeLimitVioAction;

  public static final String SERIALIZED_NAME_NIGHT_STAKE_LIMIT_VIO_ACTION = "NightStakeLimitVioAction";
  @SerializedName(SERIALIZED_NAME_NIGHT_STAKE_LIMIT_VIO_ACTION)
  private NightStakeLimitViolationActions nightStakeLimitVioAction;

  public static final String SERIALIZED_NAME_SOFT_WIN_VIO_ACTION = "SoftWinVioAction";
  @SerializedName(SERIALIZED_NAME_SOFT_WIN_VIO_ACTION)
  private SoftWinningsViolationActions softWinVioAction;

  public static final String SERIALIZED_NAME_NIGHT_SOFT_WIN_VIO_ACTION = "NightSoftWinVioAction";
  @SerializedName(SERIALIZED_NAME_NIGHT_SOFT_WIN_VIO_ACTION)
  private NightSoftWinningsViolationActions nightSoftWinVioAction;

  public static final String SERIALIZED_NAME_HARD_WIN_VIO_ACTION = "HardWinVioAction";
  @SerializedName(SERIALIZED_NAME_HARD_WIN_VIO_ACTION)
  private HardWinningsViolationActions hardWinVioAction;

  public static final String SERIALIZED_NAME_NIGHT_HARD_WIN_VIO_ACTION = "NightHardWinVioAction";
  @SerializedName(SERIALIZED_NAME_NIGHT_HARD_WIN_VIO_ACTION)
  private NightHardWinningsViolationActions nightHardWinVioAction;

  public static final String SERIALIZED_NAME_PLAYER_LIMIT_GROUP_ID = "PlayerLimitGroupId";
  @SerializedName(SERIALIZED_NAME_PLAYER_LIMIT_GROUP_ID)
  private Integer playerLimitGroupId;

  public LimitSettingsItem() {
  }

  public LimitSettingsItem isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public LimitSettingsItem stakeLimitVioAction(StakeLimitViolationActions stakeLimitVioAction) {
    this.stakeLimitVioAction = stakeLimitVioAction;
    return this;
  }

   /**
   * Get stakeLimitVioAction
   * @return stakeLimitVioAction
  **/
  @javax.annotation.Nullable
  public StakeLimitViolationActions getStakeLimitVioAction() {
    return stakeLimitVioAction;
  }

  public void setStakeLimitVioAction(StakeLimitViolationActions stakeLimitVioAction) {
    this.stakeLimitVioAction = stakeLimitVioAction;
  }


  public LimitSettingsItem nightStakeLimitVioAction(NightStakeLimitViolationActions nightStakeLimitVioAction) {
    this.nightStakeLimitVioAction = nightStakeLimitVioAction;
    return this;
  }

   /**
   * Get nightStakeLimitVioAction
   * @return nightStakeLimitVioAction
  **/
  @javax.annotation.Nullable
  public NightStakeLimitViolationActions getNightStakeLimitVioAction() {
    return nightStakeLimitVioAction;
  }

  public void setNightStakeLimitVioAction(NightStakeLimitViolationActions nightStakeLimitVioAction) {
    this.nightStakeLimitVioAction = nightStakeLimitVioAction;
  }


  public LimitSettingsItem softWinVioAction(SoftWinningsViolationActions softWinVioAction) {
    this.softWinVioAction = softWinVioAction;
    return this;
  }

   /**
   * Get softWinVioAction
   * @return softWinVioAction
  **/
  @javax.annotation.Nullable
  public SoftWinningsViolationActions getSoftWinVioAction() {
    return softWinVioAction;
  }

  public void setSoftWinVioAction(SoftWinningsViolationActions softWinVioAction) {
    this.softWinVioAction = softWinVioAction;
  }


  public LimitSettingsItem nightSoftWinVioAction(NightSoftWinningsViolationActions nightSoftWinVioAction) {
    this.nightSoftWinVioAction = nightSoftWinVioAction;
    return this;
  }

   /**
   * Get nightSoftWinVioAction
   * @return nightSoftWinVioAction
  **/
  @javax.annotation.Nullable
  public NightSoftWinningsViolationActions getNightSoftWinVioAction() {
    return nightSoftWinVioAction;
  }

  public void setNightSoftWinVioAction(NightSoftWinningsViolationActions nightSoftWinVioAction) {
    this.nightSoftWinVioAction = nightSoftWinVioAction;
  }


  public LimitSettingsItem hardWinVioAction(HardWinningsViolationActions hardWinVioAction) {
    this.hardWinVioAction = hardWinVioAction;
    return this;
  }

   /**
   * Get hardWinVioAction
   * @return hardWinVioAction
  **/
  @javax.annotation.Nullable
  public HardWinningsViolationActions getHardWinVioAction() {
    return hardWinVioAction;
  }

  public void setHardWinVioAction(HardWinningsViolationActions hardWinVioAction) {
    this.hardWinVioAction = hardWinVioAction;
  }


  public LimitSettingsItem nightHardWinVioAction(NightHardWinningsViolationActions nightHardWinVioAction) {
    this.nightHardWinVioAction = nightHardWinVioAction;
    return this;
  }

   /**
   * Get nightHardWinVioAction
   * @return nightHardWinVioAction
  **/
  @javax.annotation.Nullable
  public NightHardWinningsViolationActions getNightHardWinVioAction() {
    return nightHardWinVioAction;
  }

  public void setNightHardWinVioAction(NightHardWinningsViolationActions nightHardWinVioAction) {
    this.nightHardWinVioAction = nightHardWinVioAction;
  }


  public LimitSettingsItem playerLimitGroupId(Integer playerLimitGroupId) {
    this.playerLimitGroupId = playerLimitGroupId;
    return this;
  }

   /**
   * Get playerLimitGroupId
   * @return playerLimitGroupId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerLimitGroupId() {
    return playerLimitGroupId;
  }

  public void setPlayerLimitGroupId(Integer playerLimitGroupId) {
    this.playerLimitGroupId = playerLimitGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LimitSettingsItem limitSettingsItem = (LimitSettingsItem) o;
    return Objects.equals(this.isEnabled, limitSettingsItem.isEnabled) &&
        Objects.equals(this.stakeLimitVioAction, limitSettingsItem.stakeLimitVioAction) &&
        Objects.equals(this.nightStakeLimitVioAction, limitSettingsItem.nightStakeLimitVioAction) &&
        Objects.equals(this.softWinVioAction, limitSettingsItem.softWinVioAction) &&
        Objects.equals(this.nightSoftWinVioAction, limitSettingsItem.nightSoftWinVioAction) &&
        Objects.equals(this.hardWinVioAction, limitSettingsItem.hardWinVioAction) &&
        Objects.equals(this.nightHardWinVioAction, limitSettingsItem.nightHardWinVioAction) &&
        Objects.equals(this.playerLimitGroupId, limitSettingsItem.playerLimitGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEnabled, stakeLimitVioAction, nightStakeLimitVioAction, softWinVioAction, nightSoftWinVioAction, hardWinVioAction, nightHardWinVioAction, playerLimitGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LimitSettingsItem {\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    stakeLimitVioAction: ").append(toIndentedString(stakeLimitVioAction)).append("\n");
    sb.append("    nightStakeLimitVioAction: ").append(toIndentedString(nightStakeLimitVioAction)).append("\n");
    sb.append("    softWinVioAction: ").append(toIndentedString(softWinVioAction)).append("\n");
    sb.append("    nightSoftWinVioAction: ").append(toIndentedString(nightSoftWinVioAction)).append("\n");
    sb.append("    hardWinVioAction: ").append(toIndentedString(hardWinVioAction)).append("\n");
    sb.append("    nightHardWinVioAction: ").append(toIndentedString(nightHardWinVioAction)).append("\n");
    sb.append("    playerLimitGroupId: ").append(toIndentedString(playerLimitGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsEnabled");
    openapiFields.add("StakeLimitVioAction");
    openapiFields.add("NightStakeLimitVioAction");
    openapiFields.add("SoftWinVioAction");
    openapiFields.add("NightSoftWinVioAction");
    openapiFields.add("HardWinVioAction");
    openapiFields.add("NightHardWinVioAction");
    openapiFields.add("PlayerLimitGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LimitSettingsItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LimitSettingsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LimitSettingsItem is not found in the empty JSON string", LimitSettingsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LimitSettingsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LimitSettingsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StakeLimitVioAction`
      if (jsonObj.get("StakeLimitVioAction") != null && !jsonObj.get("StakeLimitVioAction").isJsonNull()) {
        StakeLimitViolationActions.validateJsonElement(jsonObj.get("StakeLimitVioAction"));
      }
      // validate the optional field `NightStakeLimitVioAction`
      if (jsonObj.get("NightStakeLimitVioAction") != null && !jsonObj.get("NightStakeLimitVioAction").isJsonNull()) {
        NightStakeLimitViolationActions.validateJsonElement(jsonObj.get("NightStakeLimitVioAction"));
      }
      // validate the optional field `SoftWinVioAction`
      if (jsonObj.get("SoftWinVioAction") != null && !jsonObj.get("SoftWinVioAction").isJsonNull()) {
        SoftWinningsViolationActions.validateJsonElement(jsonObj.get("SoftWinVioAction"));
      }
      // validate the optional field `NightSoftWinVioAction`
      if (jsonObj.get("NightSoftWinVioAction") != null && !jsonObj.get("NightSoftWinVioAction").isJsonNull()) {
        NightSoftWinningsViolationActions.validateJsonElement(jsonObj.get("NightSoftWinVioAction"));
      }
      // validate the optional field `HardWinVioAction`
      if (jsonObj.get("HardWinVioAction") != null && !jsonObj.get("HardWinVioAction").isJsonNull()) {
        HardWinningsViolationActions.validateJsonElement(jsonObj.get("HardWinVioAction"));
      }
      // validate the optional field `NightHardWinVioAction`
      if (jsonObj.get("NightHardWinVioAction") != null && !jsonObj.get("NightHardWinVioAction").isJsonNull()) {
        NightHardWinningsViolationActions.validateJsonElement(jsonObj.get("NightHardWinVioAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LimitSettingsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LimitSettingsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LimitSettingsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LimitSettingsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LimitSettingsItem>() {
           @Override
           public void write(JsonWriter out, LimitSettingsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LimitSettingsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LimitSettingsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LimitSettingsItem
  * @throws IOException if the JSON string is invalid with respect to LimitSettingsItem
  */
  public static LimitSettingsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LimitSettingsItem.class);
  }

 /**
  * Convert an instance of LimitSettingsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

