/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * AnalysisPerChampionshipItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class AnalysisPerChampionshipItem {
  public static final String SERIALIZED_NAME_CHAMPIONSHIP_NAME = "ChampionshipName";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_NAME)
  private String championshipName;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "CategoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_VOLUME = "Volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Double volume;

  public static final String SERIALIZED_NAME_RETURNED = "Returned";
  @SerializedName(SERIALIZED_NAME_RETURNED)
  private Double returned;

  public static final String SERIALIZED_NAME_G_G_R = "GGR";
  @SerializedName(SERIALIZED_NAME_G_G_R)
  private Double GGR;

  public static final String SERIALIZED_NAME_MARGIN = "Margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private Double margin;

  public static final String SERIALIZED_NAME_VOLUME_PERCENT = "VolumePercent";
  @SerializedName(SERIALIZED_NAME_VOLUME_PERCENT)
  private Double volumePercent;

  public static final String SERIALIZED_NAME_BET_COUNT = "BetCount";
  @SerializedName(SERIALIZED_NAME_BET_COUNT)
  private Long betCount;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_ID = "ChampionshipId";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_ID)
  private Integer championshipId;

  public AnalysisPerChampionshipItem() {
  }

  public AnalysisPerChampionshipItem championshipName(String championshipName) {
    this.championshipName = championshipName;
    return this;
  }

   /**
   * Get championshipName
   * @return championshipName
  **/
  @javax.annotation.Nullable
  public String getChampionshipName() {
    return championshipName;
  }

  public void setChampionshipName(String championshipName) {
    this.championshipName = championshipName;
  }


  public AnalysisPerChampionshipItem sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public AnalysisPerChampionshipItem sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public AnalysisPerChampionshipItem sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public AnalysisPerChampionshipItem categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public AnalysisPerChampionshipItem categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * Get categoryName
   * @return categoryName
  **/
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public AnalysisPerChampionshipItem volume(Double volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @javax.annotation.Nullable
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }


  public AnalysisPerChampionshipItem returned(Double returned) {
    this.returned = returned;
    return this;
  }

   /**
   * Get returned
   * @return returned
  **/
  @javax.annotation.Nullable
  public Double getReturned() {
    return returned;
  }

  public void setReturned(Double returned) {
    this.returned = returned;
  }


  public AnalysisPerChampionshipItem GGR(Double GGR) {
    this.GGR = GGR;
    return this;
  }

   /**
   * Get GGR
   * @return GGR
  **/
  @javax.annotation.Nullable
  public Double getGGR() {
    return GGR;
  }

  public void setGGR(Double GGR) {
    this.GGR = GGR;
  }


  public AnalysisPerChampionshipItem margin(Double margin) {
    this.margin = margin;
    return this;
  }

   /**
   * Get margin
   * @return margin
  **/
  @javax.annotation.Nullable
  public Double getMargin() {
    return margin;
  }

  public void setMargin(Double margin) {
    this.margin = margin;
  }


  public AnalysisPerChampionshipItem volumePercent(Double volumePercent) {
    this.volumePercent = volumePercent;
    return this;
  }

   /**
   * Get volumePercent
   * @return volumePercent
  **/
  @javax.annotation.Nullable
  public Double getVolumePercent() {
    return volumePercent;
  }

  public void setVolumePercent(Double volumePercent) {
    this.volumePercent = volumePercent;
  }


  public AnalysisPerChampionshipItem betCount(Long betCount) {
    this.betCount = betCount;
    return this;
  }

   /**
   * Get betCount
   * @return betCount
  **/
  @javax.annotation.Nullable
  public Long getBetCount() {
    return betCount;
  }

  public void setBetCount(Long betCount) {
    this.betCount = betCount;
  }


  public AnalysisPerChampionshipItem championshipId(Integer championshipId) {
    this.championshipId = championshipId;
    return this;
  }

   /**
   * Get championshipId
   * @return championshipId
  **/
  @javax.annotation.Nullable
  public Integer getChampionshipId() {
    return championshipId;
  }

  public void setChampionshipId(Integer championshipId) {
    this.championshipId = championshipId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisPerChampionshipItem analysisPerChampionshipItem = (AnalysisPerChampionshipItem) o;
    return Objects.equals(this.championshipName, analysisPerChampionshipItem.championshipName) &&
        Objects.equals(this.sportTypeId, analysisPerChampionshipItem.sportTypeId) &&
        Objects.equals(this.sportId, analysisPerChampionshipItem.sportId) &&
        Objects.equals(this.sportName, analysisPerChampionshipItem.sportName) &&
        Objects.equals(this.categoryId, analysisPerChampionshipItem.categoryId) &&
        Objects.equals(this.categoryName, analysisPerChampionshipItem.categoryName) &&
        Objects.equals(this.volume, analysisPerChampionshipItem.volume) &&
        Objects.equals(this.returned, analysisPerChampionshipItem.returned) &&
        Objects.equals(this.GGR, analysisPerChampionshipItem.GGR) &&
        Objects.equals(this.margin, analysisPerChampionshipItem.margin) &&
        Objects.equals(this.volumePercent, analysisPerChampionshipItem.volumePercent) &&
        Objects.equals(this.betCount, analysisPerChampionshipItem.betCount) &&
        Objects.equals(this.championshipId, analysisPerChampionshipItem.championshipId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(championshipName, sportTypeId, sportId, sportName, categoryId, categoryName, volume, returned, GGR, margin, volumePercent, betCount, championshipId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisPerChampionshipItem {\n");
    sb.append("    championshipName: ").append(toIndentedString(championshipName)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    GGR: ").append(toIndentedString(GGR)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    volumePercent: ").append(toIndentedString(volumePercent)).append("\n");
    sb.append("    betCount: ").append(toIndentedString(betCount)).append("\n");
    sb.append("    championshipId: ").append(toIndentedString(championshipId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChampionshipName");
    openapiFields.add("SportTypeId");
    openapiFields.add("SportId");
    openapiFields.add("SportName");
    openapiFields.add("CategoryId");
    openapiFields.add("CategoryName");
    openapiFields.add("Volume");
    openapiFields.add("Returned");
    openapiFields.add("GGR");
    openapiFields.add("Margin");
    openapiFields.add("VolumePercent");
    openapiFields.add("BetCount");
    openapiFields.add("ChampionshipId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AnalysisPerChampionshipItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisPerChampionshipItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisPerChampionshipItem is not found in the empty JSON string", AnalysisPerChampionshipItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisPerChampionshipItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisPerChampionshipItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ChampionshipName") != null && !jsonObj.get("ChampionshipName").isJsonNull()) && !jsonObj.get("ChampionshipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampionshipName").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if ((jsonObj.get("CategoryName") != null && !jsonObj.get("CategoryName").isJsonNull()) && !jsonObj.get("CategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisPerChampionshipItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisPerChampionshipItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisPerChampionshipItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisPerChampionshipItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisPerChampionshipItem>() {
           @Override
           public void write(JsonWriter out, AnalysisPerChampionshipItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisPerChampionshipItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalysisPerChampionshipItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalysisPerChampionshipItem
  * @throws IOException if the JSON string is invalid with respect to AnalysisPerChampionshipItem
  */
  public static AnalysisPerChampionshipItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisPerChampionshipItem.class);
  }

 /**
  * Convert an instance of AnalysisPerChampionshipItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

