/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * RefundByTimeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class RefundByTimeInfo {
  public static final String SERIALIZED_NAME_END = "End";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_MATCH_ID = "MatchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private String matchId;

  public static final String SERIALIZED_NAME_MARKET_ID = "MarketId";
  @SerializedName(SERIALIZED_NAME_MARKET_ID)
  private Long marketId;

  public static final String SERIALIZED_NAME_INT_EVENT_ID = "IntEventId";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_ID)
  private Long intEventId;

  public static final String SERIALIZED_NAME_EVENT_NAME = "EventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EXT_MARKET_NAME = "ExtMarketName";
  @SerializedName(SERIALIZED_NAME_EXT_MARKET_NAME)
  private String extMarketName;

  public static final String SERIALIZED_NAME_VARS = "Vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private String vars;

  public static final String SERIALIZED_NAME_START = "Start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public RefundByTimeInfo() {
  }

  public RefundByTimeInfo end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEnd() {
    return end;
  }

  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  public RefundByTimeInfo matchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

   /**
   * Get matchId
   * @return matchId
  **/
  @javax.annotation.Nullable
  public String getMatchId() {
    return matchId;
  }

  public void setMatchId(String matchId) {
    this.matchId = matchId;
  }


  public RefundByTimeInfo marketId(Long marketId) {
    this.marketId = marketId;
    return this;
  }

   /**
   * Get marketId
   * @return marketId
  **/
  @javax.annotation.Nullable
  public Long getMarketId() {
    return marketId;
  }

  public void setMarketId(Long marketId) {
    this.marketId = marketId;
  }


  public RefundByTimeInfo intEventId(Long intEventId) {
    this.intEventId = intEventId;
    return this;
  }

   /**
   * Get intEventId
   * @return intEventId
  **/
  @javax.annotation.Nullable
  public Long getIntEventId() {
    return intEventId;
  }

  public void setIntEventId(Long intEventId) {
    this.intEventId = intEventId;
  }


  public RefundByTimeInfo eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Get eventName
   * @return eventName
  **/
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public RefundByTimeInfo extMarketName(String extMarketName) {
    this.extMarketName = extMarketName;
    return this;
  }

   /**
   * Get extMarketName
   * @return extMarketName
  **/
  @javax.annotation.Nullable
  public String getExtMarketName() {
    return extMarketName;
  }

  public void setExtMarketName(String extMarketName) {
    this.extMarketName = extMarketName;
  }


  public RefundByTimeInfo vars(String vars) {
    this.vars = vars;
    return this;
  }

   /**
   * Get vars
   * @return vars
  **/
  @javax.annotation.Nullable
  public String getVars() {
    return vars;
  }

  public void setVars(String vars) {
    this.vars = vars;
  }


  public RefundByTimeInfo start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundByTimeInfo refundByTimeInfo = (RefundByTimeInfo) o;
    return Objects.equals(this.end, refundByTimeInfo.end) &&
        Objects.equals(this.matchId, refundByTimeInfo.matchId) &&
        Objects.equals(this.marketId, refundByTimeInfo.marketId) &&
        Objects.equals(this.intEventId, refundByTimeInfo.intEventId) &&
        Objects.equals(this.eventName, refundByTimeInfo.eventName) &&
        Objects.equals(this.extMarketName, refundByTimeInfo.extMarketName) &&
        Objects.equals(this.vars, refundByTimeInfo.vars) &&
        Objects.equals(this.start, refundByTimeInfo.start);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(end, matchId, marketId, intEventId, eventName, extMarketName, vars, start);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundByTimeInfo {\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    marketId: ").append(toIndentedString(marketId)).append("\n");
    sb.append("    intEventId: ").append(toIndentedString(intEventId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    extMarketName: ").append(toIndentedString(extMarketName)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("End");
    openapiFields.add("MatchId");
    openapiFields.add("MarketId");
    openapiFields.add("IntEventId");
    openapiFields.add("EventName");
    openapiFields.add("ExtMarketName");
    openapiFields.add("Vars");
    openapiFields.add("Start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RefundByTimeInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefundByTimeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefundByTimeInfo is not found in the empty JSON string", RefundByTimeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefundByTimeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefundByTimeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("MatchId") != null && !jsonObj.get("MatchId").isJsonNull()) && !jsonObj.get("MatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatchId").toString()));
      }
      if ((jsonObj.get("EventName") != null && !jsonObj.get("EventName").isJsonNull()) && !jsonObj.get("EventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventName").toString()));
      }
      if ((jsonObj.get("ExtMarketName") != null && !jsonObj.get("ExtMarketName").isJsonNull()) && !jsonObj.get("ExtMarketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtMarketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtMarketName").toString()));
      }
      if ((jsonObj.get("Vars") != null && !jsonObj.get("Vars").isJsonNull()) && !jsonObj.get("Vars").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Vars` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Vars").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefundByTimeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefundByTimeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefundByTimeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefundByTimeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RefundByTimeInfo>() {
           @Override
           public void write(JsonWriter out, RefundByTimeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefundByTimeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RefundByTimeInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RefundByTimeInfo
  * @throws IOException if the JSON string is invalid with respect to RefundByTimeInfo
  */
  public static RefundByTimeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefundByTimeInfo.class);
  }

 /**
  * Convert an instance of RefundByTimeInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

