/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * SportGroupItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SportGroupItem {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_OVERVIEW = "IsOverview";
  @SerializedName(SERIALIZED_NAME_IS_OVERVIEW)
  private Boolean isOverview;

  public static final String SERIALIZED_NAME_OVERVIEW_ORDER = "OverviewOrder";
  @SerializedName(SERIALIZED_NAME_OVERVIEW_ORDER)
  private Integer overviewOrder;

  public static final String SERIALIZED_NAME_IS_BET_BUILDER_GROUP = "IsBetBuilderGroup";
  @SerializedName(SERIALIZED_NAME_IS_BET_BUILDER_GROUP)
  private Boolean isBetBuilderGroup;

  public static final String SERIALIZED_NAME_IS_FAST_GROUP = "IsFastGroup";
  @SerializedName(SERIALIZED_NAME_IS_FAST_GROUP)
  private Boolean isFastGroup;

  public static final String SERIALIZED_NAME_SPECIFIER_ID = "SpecifierId";
  @SerializedName(SERIALIZED_NAME_SPECIFIER_ID)
  private Integer specifierId;

  public static final String SERIALIZED_NAME_MARKETS = "Markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<SportGroupMarketItem> markets;

  public static final String SERIALIZED_NAME_MARKET_GROUP_ID = "MarketGroupId";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUP_ID)
  private Integer marketGroupId;

  public SportGroupItem() {
  }

  public SportGroupItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SportGroupItem isOverview(Boolean isOverview) {
    this.isOverview = isOverview;
    return this;
  }

   /**
   * Get isOverview
   * @return isOverview
  **/
  @javax.annotation.Nullable
  public Boolean getIsOverview() {
    return isOverview;
  }

  public void setIsOverview(Boolean isOverview) {
    this.isOverview = isOverview;
  }


  public SportGroupItem overviewOrder(Integer overviewOrder) {
    this.overviewOrder = overviewOrder;
    return this;
  }

   /**
   * Get overviewOrder
   * @return overviewOrder
  **/
  @javax.annotation.Nullable
  public Integer getOverviewOrder() {
    return overviewOrder;
  }

  public void setOverviewOrder(Integer overviewOrder) {
    this.overviewOrder = overviewOrder;
  }


  public SportGroupItem isBetBuilderGroup(Boolean isBetBuilderGroup) {
    this.isBetBuilderGroup = isBetBuilderGroup;
    return this;
  }

   /**
   * Get isBetBuilderGroup
   * @return isBetBuilderGroup
  **/
  @javax.annotation.Nullable
  public Boolean getIsBetBuilderGroup() {
    return isBetBuilderGroup;
  }

  public void setIsBetBuilderGroup(Boolean isBetBuilderGroup) {
    this.isBetBuilderGroup = isBetBuilderGroup;
  }


  public SportGroupItem isFastGroup(Boolean isFastGroup) {
    this.isFastGroup = isFastGroup;
    return this;
  }

   /**
   * Get isFastGroup
   * @return isFastGroup
  **/
  @javax.annotation.Nullable
  public Boolean getIsFastGroup() {
    return isFastGroup;
  }

  public void setIsFastGroup(Boolean isFastGroup) {
    this.isFastGroup = isFastGroup;
  }


  public SportGroupItem specifierId(Integer specifierId) {
    this.specifierId = specifierId;
    return this;
  }

   /**
   * Get specifierId
   * @return specifierId
  **/
  @javax.annotation.Nullable
  public Integer getSpecifierId() {
    return specifierId;
  }

  public void setSpecifierId(Integer specifierId) {
    this.specifierId = specifierId;
  }


  public SportGroupItem markets(List<SportGroupMarketItem> markets) {
    this.markets = markets;
    return this;
  }

  public SportGroupItem addMarketsItem(SportGroupMarketItem marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nullable
  public List<SportGroupMarketItem> getMarkets() {
    return markets;
  }

  public void setMarkets(List<SportGroupMarketItem> markets) {
    this.markets = markets;
  }


  public SportGroupItem marketGroupId(Integer marketGroupId) {
    this.marketGroupId = marketGroupId;
    return this;
  }

   /**
   * Get marketGroupId
   * @return marketGroupId
  **/
  @javax.annotation.Nullable
  public Integer getMarketGroupId() {
    return marketGroupId;
  }

  public void setMarketGroupId(Integer marketGroupId) {
    this.marketGroupId = marketGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SportGroupItem sportGroupItem = (SportGroupItem) o;
    return Objects.equals(this.name, sportGroupItem.name) &&
        Objects.equals(this.isOverview, sportGroupItem.isOverview) &&
        Objects.equals(this.overviewOrder, sportGroupItem.overviewOrder) &&
        Objects.equals(this.isBetBuilderGroup, sportGroupItem.isBetBuilderGroup) &&
        Objects.equals(this.isFastGroup, sportGroupItem.isFastGroup) &&
        Objects.equals(this.specifierId, sportGroupItem.specifierId) &&
        Objects.equals(this.markets, sportGroupItem.markets) &&
        Objects.equals(this.marketGroupId, sportGroupItem.marketGroupId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isOverview, overviewOrder, isBetBuilderGroup, isFastGroup, specifierId, markets, marketGroupId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SportGroupItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isOverview: ").append(toIndentedString(isOverview)).append("\n");
    sb.append("    overviewOrder: ").append(toIndentedString(overviewOrder)).append("\n");
    sb.append("    isBetBuilderGroup: ").append(toIndentedString(isBetBuilderGroup)).append("\n");
    sb.append("    isFastGroup: ").append(toIndentedString(isFastGroup)).append("\n");
    sb.append("    specifierId: ").append(toIndentedString(specifierId)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    marketGroupId: ").append(toIndentedString(marketGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("IsOverview");
    openapiFields.add("OverviewOrder");
    openapiFields.add("IsBetBuilderGroup");
    openapiFields.add("IsFastGroup");
    openapiFields.add("SpecifierId");
    openapiFields.add("Markets");
    openapiFields.add("MarketGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SportGroupItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SportGroupItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SportGroupItem is not found in the empty JSON string", SportGroupItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SportGroupItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SportGroupItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Markets") != null && !jsonObj.get("Markets").isJsonNull()) {
        JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("Markets");
        if (jsonArraymarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Markets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Markets` to be an array in the JSON string but got `%s`", jsonObj.get("Markets").toString()));
          }

          // validate the optional field `Markets` (array)
          for (int i = 0; i < jsonArraymarkets.size(); i++) {
            SportGroupMarketItem.validateJsonElement(jsonArraymarkets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SportGroupItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SportGroupItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SportGroupItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SportGroupItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SportGroupItem>() {
           @Override
           public void write(JsonWriter out, SportGroupItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SportGroupItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SportGroupItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SportGroupItem
  * @throws IOException if the JSON string is invalid with respect to SportGroupItem
  */
  public static SportGroupItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SportGroupItem.class);
  }

 /**
  * Convert an instance of SportGroupItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

