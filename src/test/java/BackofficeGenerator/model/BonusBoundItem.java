/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * BonusBoundItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BonusBoundItem {
  public static final String SERIALIZED_NAME_LOW_BOUND = "LowBound";
  @SerializedName(SERIALIZED_NAME_LOW_BOUND)
  private Integer lowBound;

  public static final String SERIALIZED_NAME_UPPER_BOUND = "UpperBound";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND)
  private Integer upperBound;

  public static final String SERIALIZED_NAME_BONUS_VALUE = "BonusValue";
  @SerializedName(SERIALIZED_NAME_BONUS_VALUE)
  private Double bonusValue;

  public static final String SERIALIZED_NAME_BONUS_BOUND_ID = "BonusBoundId";
  @SerializedName(SERIALIZED_NAME_BONUS_BOUND_ID)
  private Integer bonusBoundId;

  public BonusBoundItem() {
  }

  public BonusBoundItem lowBound(Integer lowBound) {
    this.lowBound = lowBound;
    return this;
  }

   /**
   * Get lowBound
   * @return lowBound
  **/
  @javax.annotation.Nullable
  public Integer getLowBound() {
    return lowBound;
  }

  public void setLowBound(Integer lowBound) {
    this.lowBound = lowBound;
  }


  public BonusBoundItem upperBound(Integer upperBound) {
    this.upperBound = upperBound;
    return this;
  }

   /**
   * Get upperBound
   * @return upperBound
  **/
  @javax.annotation.Nullable
  public Integer getUpperBound() {
    return upperBound;
  }

  public void setUpperBound(Integer upperBound) {
    this.upperBound = upperBound;
  }


  public BonusBoundItem bonusValue(Double bonusValue) {
    this.bonusValue = bonusValue;
    return this;
  }

   /**
   * Get bonusValue
   * @return bonusValue
  **/
  @javax.annotation.Nullable
  public Double getBonusValue() {
    return bonusValue;
  }

  public void setBonusValue(Double bonusValue) {
    this.bonusValue = bonusValue;
  }


  public BonusBoundItem bonusBoundId(Integer bonusBoundId) {
    this.bonusBoundId = bonusBoundId;
    return this;
  }

   /**
   * Get bonusBoundId
   * @return bonusBoundId
  **/
  @javax.annotation.Nullable
  public Integer getBonusBoundId() {
    return bonusBoundId;
  }

  public void setBonusBoundId(Integer bonusBoundId) {
    this.bonusBoundId = bonusBoundId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BonusBoundItem bonusBoundItem = (BonusBoundItem) o;
    return Objects.equals(this.lowBound, bonusBoundItem.lowBound) &&
        Objects.equals(this.upperBound, bonusBoundItem.upperBound) &&
        Objects.equals(this.bonusValue, bonusBoundItem.bonusValue) &&
        Objects.equals(this.bonusBoundId, bonusBoundItem.bonusBoundId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lowBound, upperBound, bonusValue, bonusBoundId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BonusBoundItem {\n");
    sb.append("    lowBound: ").append(toIndentedString(lowBound)).append("\n");
    sb.append("    upperBound: ").append(toIndentedString(upperBound)).append("\n");
    sb.append("    bonusValue: ").append(toIndentedString(bonusValue)).append("\n");
    sb.append("    bonusBoundId: ").append(toIndentedString(bonusBoundId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LowBound");
    openapiFields.add("UpperBound");
    openapiFields.add("BonusValue");
    openapiFields.add("BonusBoundId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BonusBoundItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BonusBoundItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BonusBoundItem is not found in the empty JSON string", BonusBoundItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BonusBoundItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BonusBoundItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BonusBoundItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BonusBoundItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BonusBoundItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BonusBoundItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BonusBoundItem>() {
           @Override
           public void write(JsonWriter out, BonusBoundItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BonusBoundItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BonusBoundItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BonusBoundItem
  * @throws IOException if the JSON string is invalid with respect to BonusBoundItem
  */
  public static BonusBoundItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BonusBoundItem.class);
  }

 /**
  * Convert an instance of BonusBoundItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

