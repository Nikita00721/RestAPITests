/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * TerminalDeviceDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TerminalDeviceDetails {
  public static final String SERIALIZED_NAME_DEVICE_STATUS = "DeviceStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATUS)
  private DeviceStatuses deviceStatus;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "UpdateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "ShortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_FULL_DESCRIPTION = "FullDescription";
  @SerializedName(SERIALIZED_NAME_FULL_DESCRIPTION)
  private String fullDescription;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public TerminalDeviceDetails() {
  }

  public TerminalDeviceDetails deviceStatus(DeviceStatuses deviceStatus) {
    this.deviceStatus = deviceStatus;
    return this;
  }

   /**
   * Get deviceStatus
   * @return deviceStatus
  **/
  @javax.annotation.Nullable
  public DeviceStatuses getDeviceStatus() {
    return deviceStatus;
  }

  public void setDeviceStatus(DeviceStatuses deviceStatus) {
    this.deviceStatus = deviceStatus;
  }


  public TerminalDeviceDetails errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Get errorCode
   * @return errorCode
  **/
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public TerminalDeviceDetails updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public TerminalDeviceDetails value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public TerminalDeviceDetails shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

   /**
   * Get shortDescription
   * @return shortDescription
  **/
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public TerminalDeviceDetails fullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
    return this;
  }

   /**
   * Get fullDescription
   * @return fullDescription
  **/
  @javax.annotation.Nullable
  public String getFullDescription() {
    return fullDescription;
  }

  public void setFullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
  }


  public TerminalDeviceDetails deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Get deviceName
   * @return deviceName
  **/
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminalDeviceDetails terminalDeviceDetails = (TerminalDeviceDetails) o;
    return Objects.equals(this.deviceStatus, terminalDeviceDetails.deviceStatus) &&
        Objects.equals(this.errorCode, terminalDeviceDetails.errorCode) &&
        Objects.equals(this.updateTime, terminalDeviceDetails.updateTime) &&
        Objects.equals(this.value, terminalDeviceDetails.value) &&
        Objects.equals(this.shortDescription, terminalDeviceDetails.shortDescription) &&
        Objects.equals(this.fullDescription, terminalDeviceDetails.fullDescription) &&
        Objects.equals(this.deviceName, terminalDeviceDetails.deviceName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceStatus, errorCode, updateTime, value, shortDescription, fullDescription, deviceName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminalDeviceDetails {\n");
    sb.append("    deviceStatus: ").append(toIndentedString(deviceStatus)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceStatus");
    openapiFields.add("ErrorCode");
    openapiFields.add("UpdateTime");
    openapiFields.add("Value");
    openapiFields.add("ShortDescription");
    openapiFields.add("FullDescription");
    openapiFields.add("DeviceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TerminalDeviceDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminalDeviceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminalDeviceDetails is not found in the empty JSON string", TerminalDeviceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminalDeviceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminalDeviceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DeviceStatus`
      if (jsonObj.get("DeviceStatus") != null && !jsonObj.get("DeviceStatus").isJsonNull()) {
        DeviceStatuses.validateJsonElement(jsonObj.get("DeviceStatus"));
      }
      if ((jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) && !jsonObj.get("ErrorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorCode").toString()));
      }
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
      if ((jsonObj.get("ShortDescription") != null && !jsonObj.get("ShortDescription").isJsonNull()) && !jsonObj.get("ShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortDescription").toString()));
      }
      if ((jsonObj.get("FullDescription") != null && !jsonObj.get("FullDescription").isJsonNull()) && !jsonObj.get("FullDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullDescription").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminalDeviceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminalDeviceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminalDeviceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminalDeviceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminalDeviceDetails>() {
           @Override
           public void write(JsonWriter out, TerminalDeviceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminalDeviceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TerminalDeviceDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TerminalDeviceDetails
  * @throws IOException if the JSON string is invalid with respect to TerminalDeviceDetails
  */
  public static TerminalDeviceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminalDeviceDetails.class);
  }

 /**
  * Convert an instance of TerminalDeviceDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

