/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TimeoutsSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TimeoutsSummary {
  public static final String SERIALIZED_NAME_REGISTERED_EVENTS = "RegisteredEvents";
  @SerializedName(SERIALIZED_NAME_REGISTERED_EVENTS)
  private Integer registeredEvents;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "UpdateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private Integer updateDate;

  public static final String SERIALIZED_NAME_REFUNDS = "Refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private Integer refunds;

  public static final String SERIALIZED_NAME_WAITING_FOR_REGULATOR_BETS = "WaitingForRegulatorBets";
  @SerializedName(SERIALIZED_NAME_WAITING_FOR_REGULATOR_BETS)
  private Integer waitingForRegulatorBets;

  public static final String SERIALIZED_NAME_BETS = "Bets";
  @SerializedName(SERIALIZED_NAME_BETS)
  private Integer bets;

  public TimeoutsSummary() {
  }

  public TimeoutsSummary registeredEvents(Integer registeredEvents) {
    this.registeredEvents = registeredEvents;
    return this;
  }

   /**
   * Get registeredEvents
   * @return registeredEvents
  **/
  @javax.annotation.Nullable
  public Integer getRegisteredEvents() {
    return registeredEvents;
  }

  public void setRegisteredEvents(Integer registeredEvents) {
    this.registeredEvents = registeredEvents;
  }


  public TimeoutsSummary updateDate(Integer updateDate) {
    this.updateDate = updateDate;
    return this;
  }

   /**
   * Get updateDate
   * @return updateDate
  **/
  @javax.annotation.Nullable
  public Integer getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(Integer updateDate) {
    this.updateDate = updateDate;
  }


  public TimeoutsSummary refunds(Integer refunds) {
    this.refunds = refunds;
    return this;
  }

   /**
   * Get refunds
   * @return refunds
  **/
  @javax.annotation.Nullable
  public Integer getRefunds() {
    return refunds;
  }

  public void setRefunds(Integer refunds) {
    this.refunds = refunds;
  }


  public TimeoutsSummary waitingForRegulatorBets(Integer waitingForRegulatorBets) {
    this.waitingForRegulatorBets = waitingForRegulatorBets;
    return this;
  }

   /**
   * Get waitingForRegulatorBets
   * @return waitingForRegulatorBets
  **/
  @javax.annotation.Nullable
  public Integer getWaitingForRegulatorBets() {
    return waitingForRegulatorBets;
  }

  public void setWaitingForRegulatorBets(Integer waitingForRegulatorBets) {
    this.waitingForRegulatorBets = waitingForRegulatorBets;
  }


  public TimeoutsSummary bets(Integer bets) {
    this.bets = bets;
    return this;
  }

   /**
   * Get bets
   * @return bets
  **/
  @javax.annotation.Nullable
  public Integer getBets() {
    return bets;
  }

  public void setBets(Integer bets) {
    this.bets = bets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeoutsSummary timeoutsSummary = (TimeoutsSummary) o;
    return Objects.equals(this.registeredEvents, timeoutsSummary.registeredEvents) &&
        Objects.equals(this.updateDate, timeoutsSummary.updateDate) &&
        Objects.equals(this.refunds, timeoutsSummary.refunds) &&
        Objects.equals(this.waitingForRegulatorBets, timeoutsSummary.waitingForRegulatorBets) &&
        Objects.equals(this.bets, timeoutsSummary.bets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredEvents, updateDate, refunds, waitingForRegulatorBets, bets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeoutsSummary {\n");
    sb.append("    registeredEvents: ").append(toIndentedString(registeredEvents)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    waitingForRegulatorBets: ").append(toIndentedString(waitingForRegulatorBets)).append("\n");
    sb.append("    bets: ").append(toIndentedString(bets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RegisteredEvents");
    openapiFields.add("UpdateDate");
    openapiFields.add("Refunds");
    openapiFields.add("WaitingForRegulatorBets");
    openapiFields.add("Bets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TimeoutsSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeoutsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeoutsSummary is not found in the empty JSON string", TimeoutsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeoutsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeoutsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeoutsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeoutsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeoutsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeoutsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeoutsSummary>() {
           @Override
           public void write(JsonWriter out, TimeoutsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeoutsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeoutsSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeoutsSummary
  * @throws IOException if the JSON string is invalid with respect to TimeoutsSummary
  */
  public static TimeoutsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeoutsSummary.class);
  }

 /**
  * Convert an instance of TimeoutsSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

