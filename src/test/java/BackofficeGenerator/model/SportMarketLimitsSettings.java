/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * SportMarketLimitsSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SportMarketLimitsSettings {
  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private Integer marketTypeId;

  public static final String SERIALIZED_NAME_MARKET_TYPE_NAME = "MarketTypeName";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_NAME)
  private String marketTypeName;

  public static final String SERIALIZED_NAME_STAKE_LIMIT_FACTOR = "StakeLimitFactor";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_FACTOR)
  private Double stakeLimitFactor;

  public static final String SERIALIZED_NAME_DEFAULT_STAKE_LIMIT_FACTOR = "DefaultStakeLimitFactor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STAKE_LIMIT_FACTOR)
  private Double defaultStakeLimitFactor;

  public static final String SERIALIZED_NAME_NET_WIN_FACTOR = "NetWinFactor";
  @SerializedName(SERIALIZED_NAME_NET_WIN_FACTOR)
  private Double netWinFactor;

  public static final String SERIALIZED_NAME_DEFAULT_NET_WIN_FACTOR = "DefaultNetWinFactor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NET_WIN_FACTOR)
  private Double defaultNetWinFactor;

  public static final String SERIALIZED_NAME_IS_STAKE_LIMIT_PER_SELECTION = "IsStakeLimitPerSelection";
  @SerializedName(SERIALIZED_NAME_IS_STAKE_LIMIT_PER_SELECTION)
  private Boolean isStakeLimitPerSelection;

  public static final String SERIALIZED_NAME_DEFAULT_IS_STAKE_LIMIT_PER_SELECTION = "DefaultIsStakeLimitPerSelection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IS_STAKE_LIMIT_PER_SELECTION)
  private Boolean defaultIsStakeLimitPerSelection;

  public static final String SERIALIZED_NAME_IS_WIN_LIMIT_PER_SELECTION = "IsWinLimitPerSelection";
  @SerializedName(SERIALIZED_NAME_IS_WIN_LIMIT_PER_SELECTION)
  private Boolean isWinLimitPerSelection;

  public static final String SERIALIZED_NAME_DEFAULT_IS_WIN_LIMIT_PER_SELECTION = "DefaultIsWinLimitPerSelection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IS_WIN_LIMIT_PER_SELECTION)
  private Boolean defaultIsWinLimitPerSelection;

  public static final String SERIALIZED_NAME_IS_INHERITED = "IsInherited";
  @SerializedName(SERIALIZED_NAME_IS_INHERITED)
  private Boolean isInherited;

  public static final String SERIALIZED_NAME_SPORT_MARKET_ID = "SportMarketId";
  @SerializedName(SERIALIZED_NAME_SPORT_MARKET_ID)
  private Integer sportMarketId;

  public SportMarketLimitsSettings() {
  }

  public SportMarketLimitsSettings sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public SportMarketLimitsSettings sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public SportMarketLimitsSettings marketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
  }


  public SportMarketLimitsSettings marketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
    return this;
  }

   /**
   * Get marketTypeName
   * @return marketTypeName
  **/
  @javax.annotation.Nullable
  public String getMarketTypeName() {
    return marketTypeName;
  }

  public void setMarketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
  }


  public SportMarketLimitsSettings stakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
    return this;
  }

   /**
   * Get stakeLimitFactor
   * @return stakeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getStakeLimitFactor() {
    return stakeLimitFactor;
  }

  public void setStakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
  }


  public SportMarketLimitsSettings defaultStakeLimitFactor(Double defaultStakeLimitFactor) {
    this.defaultStakeLimitFactor = defaultStakeLimitFactor;
    return this;
  }

   /**
   * Get defaultStakeLimitFactor
   * @return defaultStakeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getDefaultStakeLimitFactor() {
    return defaultStakeLimitFactor;
  }

  public void setDefaultStakeLimitFactor(Double defaultStakeLimitFactor) {
    this.defaultStakeLimitFactor = defaultStakeLimitFactor;
  }


  public SportMarketLimitsSettings netWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
    return this;
  }

   /**
   * Get netWinFactor
   * @return netWinFactor
  **/
  @javax.annotation.Nullable
  public Double getNetWinFactor() {
    return netWinFactor;
  }

  public void setNetWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
  }


  public SportMarketLimitsSettings defaultNetWinFactor(Double defaultNetWinFactor) {
    this.defaultNetWinFactor = defaultNetWinFactor;
    return this;
  }

   /**
   * Get defaultNetWinFactor
   * @return defaultNetWinFactor
  **/
  @javax.annotation.Nullable
  public Double getDefaultNetWinFactor() {
    return defaultNetWinFactor;
  }

  public void setDefaultNetWinFactor(Double defaultNetWinFactor) {
    this.defaultNetWinFactor = defaultNetWinFactor;
  }


  public SportMarketLimitsSettings isStakeLimitPerSelection(Boolean isStakeLimitPerSelection) {
    this.isStakeLimitPerSelection = isStakeLimitPerSelection;
    return this;
  }

   /**
   * Get isStakeLimitPerSelection
   * @return isStakeLimitPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getIsStakeLimitPerSelection() {
    return isStakeLimitPerSelection;
  }

  public void setIsStakeLimitPerSelection(Boolean isStakeLimitPerSelection) {
    this.isStakeLimitPerSelection = isStakeLimitPerSelection;
  }


  public SportMarketLimitsSettings defaultIsStakeLimitPerSelection(Boolean defaultIsStakeLimitPerSelection) {
    this.defaultIsStakeLimitPerSelection = defaultIsStakeLimitPerSelection;
    return this;
  }

   /**
   * Get defaultIsStakeLimitPerSelection
   * @return defaultIsStakeLimitPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultIsStakeLimitPerSelection() {
    return defaultIsStakeLimitPerSelection;
  }

  public void setDefaultIsStakeLimitPerSelection(Boolean defaultIsStakeLimitPerSelection) {
    this.defaultIsStakeLimitPerSelection = defaultIsStakeLimitPerSelection;
  }


  public SportMarketLimitsSettings isWinLimitPerSelection(Boolean isWinLimitPerSelection) {
    this.isWinLimitPerSelection = isWinLimitPerSelection;
    return this;
  }

   /**
   * Get isWinLimitPerSelection
   * @return isWinLimitPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getIsWinLimitPerSelection() {
    return isWinLimitPerSelection;
  }

  public void setIsWinLimitPerSelection(Boolean isWinLimitPerSelection) {
    this.isWinLimitPerSelection = isWinLimitPerSelection;
  }


  public SportMarketLimitsSettings defaultIsWinLimitPerSelection(Boolean defaultIsWinLimitPerSelection) {
    this.defaultIsWinLimitPerSelection = defaultIsWinLimitPerSelection;
    return this;
  }

   /**
   * Get defaultIsWinLimitPerSelection
   * @return defaultIsWinLimitPerSelection
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultIsWinLimitPerSelection() {
    return defaultIsWinLimitPerSelection;
  }

  public void setDefaultIsWinLimitPerSelection(Boolean defaultIsWinLimitPerSelection) {
    this.defaultIsWinLimitPerSelection = defaultIsWinLimitPerSelection;
  }


  public SportMarketLimitsSettings isInherited(Boolean isInherited) {
    this.isInherited = isInherited;
    return this;
  }

   /**
   * Get isInherited
   * @return isInherited
  **/
  @javax.annotation.Nullable
  public Boolean getIsInherited() {
    return isInherited;
  }

  public void setIsInherited(Boolean isInherited) {
    this.isInherited = isInherited;
  }


  public SportMarketLimitsSettings sportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
    return this;
  }

   /**
   * Get sportMarketId
   * @return sportMarketId
  **/
  @javax.annotation.Nullable
  public Integer getSportMarketId() {
    return sportMarketId;
  }

  public void setSportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SportMarketLimitsSettings sportMarketLimitsSettings = (SportMarketLimitsSettings) o;
    return Objects.equals(this.sportTypeId, sportMarketLimitsSettings.sportTypeId) &&
        Objects.equals(this.sportName, sportMarketLimitsSettings.sportName) &&
        Objects.equals(this.marketTypeId, sportMarketLimitsSettings.marketTypeId) &&
        Objects.equals(this.marketTypeName, sportMarketLimitsSettings.marketTypeName) &&
        Objects.equals(this.stakeLimitFactor, sportMarketLimitsSettings.stakeLimitFactor) &&
        Objects.equals(this.defaultStakeLimitFactor, sportMarketLimitsSettings.defaultStakeLimitFactor) &&
        Objects.equals(this.netWinFactor, sportMarketLimitsSettings.netWinFactor) &&
        Objects.equals(this.defaultNetWinFactor, sportMarketLimitsSettings.defaultNetWinFactor) &&
        Objects.equals(this.isStakeLimitPerSelection, sportMarketLimitsSettings.isStakeLimitPerSelection) &&
        Objects.equals(this.defaultIsStakeLimitPerSelection, sportMarketLimitsSettings.defaultIsStakeLimitPerSelection) &&
        Objects.equals(this.isWinLimitPerSelection, sportMarketLimitsSettings.isWinLimitPerSelection) &&
        Objects.equals(this.defaultIsWinLimitPerSelection, sportMarketLimitsSettings.defaultIsWinLimitPerSelection) &&
        Objects.equals(this.isInherited, sportMarketLimitsSettings.isInherited) &&
        Objects.equals(this.sportMarketId, sportMarketLimitsSettings.sportMarketId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportTypeId, sportName, marketTypeId, marketTypeName, stakeLimitFactor, defaultStakeLimitFactor, netWinFactor, defaultNetWinFactor, isStakeLimitPerSelection, defaultIsStakeLimitPerSelection, isWinLimitPerSelection, defaultIsWinLimitPerSelection, isInherited, sportMarketId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SportMarketLimitsSettings {\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("    marketTypeName: ").append(toIndentedString(marketTypeName)).append("\n");
    sb.append("    stakeLimitFactor: ").append(toIndentedString(stakeLimitFactor)).append("\n");
    sb.append("    defaultStakeLimitFactor: ").append(toIndentedString(defaultStakeLimitFactor)).append("\n");
    sb.append("    netWinFactor: ").append(toIndentedString(netWinFactor)).append("\n");
    sb.append("    defaultNetWinFactor: ").append(toIndentedString(defaultNetWinFactor)).append("\n");
    sb.append("    isStakeLimitPerSelection: ").append(toIndentedString(isStakeLimitPerSelection)).append("\n");
    sb.append("    defaultIsStakeLimitPerSelection: ").append(toIndentedString(defaultIsStakeLimitPerSelection)).append("\n");
    sb.append("    isWinLimitPerSelection: ").append(toIndentedString(isWinLimitPerSelection)).append("\n");
    sb.append("    defaultIsWinLimitPerSelection: ").append(toIndentedString(defaultIsWinLimitPerSelection)).append("\n");
    sb.append("    isInherited: ").append(toIndentedString(isInherited)).append("\n");
    sb.append("    sportMarketId: ").append(toIndentedString(sportMarketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportTypeId");
    openapiFields.add("SportName");
    openapiFields.add("MarketTypeId");
    openapiFields.add("MarketTypeName");
    openapiFields.add("StakeLimitFactor");
    openapiFields.add("DefaultStakeLimitFactor");
    openapiFields.add("NetWinFactor");
    openapiFields.add("DefaultNetWinFactor");
    openapiFields.add("IsStakeLimitPerSelection");
    openapiFields.add("DefaultIsStakeLimitPerSelection");
    openapiFields.add("IsWinLimitPerSelection");
    openapiFields.add("DefaultIsWinLimitPerSelection");
    openapiFields.add("IsInherited");
    openapiFields.add("SportMarketId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SportMarketLimitsSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SportMarketLimitsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SportMarketLimitsSettings is not found in the empty JSON string", SportMarketLimitsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SportMarketLimitsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SportMarketLimitsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if ((jsonObj.get("MarketTypeName") != null && !jsonObj.get("MarketTypeName").isJsonNull()) && !jsonObj.get("MarketTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SportMarketLimitsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SportMarketLimitsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SportMarketLimitsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SportMarketLimitsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SportMarketLimitsSettings>() {
           @Override
           public void write(JsonWriter out, SportMarketLimitsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SportMarketLimitsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SportMarketLimitsSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SportMarketLimitsSettings
  * @throws IOException if the JSON string is invalid with respect to SportMarketLimitsSettings
  */
  public static SportMarketLimitsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SportMarketLimitsSettings.class);
  }

 /**
  * Convert an instance of SportMarketLimitsSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

