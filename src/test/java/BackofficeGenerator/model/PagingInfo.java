/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * PagingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class PagingInfo {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "PageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Long total;

  public static final String SERIALIZED_NAME_SKIP = "Skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Integer skip;

  public static final String SERIALIZED_NAME_TAKE = "Take";
  @SerializedName(SERIALIZED_NAME_TAKE)
  private Integer take;

  public static final String SERIALIZED_NAME_PAGES_COUNT = "PagesCount";
  @SerializedName(SERIALIZED_NAME_PAGES_COUNT)
  private Integer pagesCount;

  public static final String SERIALIZED_NAME_HAS_NEXT = "HasNext";
  @SerializedName(SERIALIZED_NAME_HAS_NEXT)
  private Boolean hasNext;

  public static final String SERIALIZED_NAME_HAS_PREV = "HasPrev";
  @SerializedName(SERIALIZED_NAME_HAS_PREV)
  private Boolean hasPrev;

  public static final String SERIALIZED_NAME_PAGE = "Page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public PagingInfo() {
  }

  public PagingInfo(
     Integer skip, 
     Integer take, 
     Integer pagesCount, 
     Boolean hasNext, 
     Boolean hasPrev
  ) {
    this();
    this.skip = skip;
    this.take = take;
    this.pagesCount = pagesCount;
    this.hasNext = hasNext;
    this.hasPrev = hasPrev;
  }

  public PagingInfo pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PagingInfo total(Long total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Long getTotal() {
    return total;
  }

  public void setTotal(Long total) {
    this.total = total;
  }


   /**
   * Get skip
   * @return skip
  **/
  @javax.annotation.Nullable
  public Integer getSkip() {
    return skip;
  }



   /**
   * Get take
   * @return take
  **/
  @javax.annotation.Nullable
  public Integer getTake() {
    return take;
  }



   /**
   * Get pagesCount
   * @return pagesCount
  **/
  @javax.annotation.Nullable
  public Integer getPagesCount() {
    return pagesCount;
  }



   /**
   * Get hasNext
   * @return hasNext
  **/
  @javax.annotation.Nullable
  public Boolean getHasNext() {
    return hasNext;
  }



   /**
   * Get hasPrev
   * @return hasPrev
  **/
  @javax.annotation.Nullable
  public Boolean getHasPrev() {
    return hasPrev;
  }



  public PagingInfo page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagingInfo pagingInfo = (PagingInfo) o;
    return Objects.equals(this.pageSize, pagingInfo.pageSize) &&
        Objects.equals(this.total, pagingInfo.total) &&
        Objects.equals(this.skip, pagingInfo.skip) &&
        Objects.equals(this.take, pagingInfo.take) &&
        Objects.equals(this.pagesCount, pagingInfo.pagesCount) &&
        Objects.equals(this.hasNext, pagingInfo.hasNext) &&
        Objects.equals(this.hasPrev, pagingInfo.hasPrev) &&
        Objects.equals(this.page, pagingInfo.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, total, skip, take, pagesCount, hasNext, hasPrev, page);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagingInfo {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    take: ").append(toIndentedString(take)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    hasPrev: ").append(toIndentedString(hasPrev)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PageSize");
    openapiFields.add("Total");
    openapiFields.add("Skip");
    openapiFields.add("Take");
    openapiFields.add("PagesCount");
    openapiFields.add("HasNext");
    openapiFields.add("HasPrev");
    openapiFields.add("Page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PagingInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagingInfo is not found in the empty JSON string", PagingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PagingInfo>() {
           @Override
           public void write(JsonWriter out, PagingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PagingInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PagingInfo
  * @throws IOException if the JSON string is invalid with respect to PagingInfo
  */
  public static PagingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagingInfo.class);
  }

 /**
  * Convert an instance of PagingInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

