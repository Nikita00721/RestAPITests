/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * SportGroupMarketItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SportGroupMarketItem {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUB_GROUP_ID = "SubGroupId";
  @SerializedName(SERIALIZED_NAME_SUB_GROUP_ID)
  private Integer subGroupId;

  public static final String SERIALIZED_NAME_SUB_GROUP_NAME = "SubGroupName";
  @SerializedName(SERIALIZED_NAME_SUB_GROUP_NAME)
  private String subGroupName;

  public static final String SERIALIZED_NAME_IS_HEADER = "IsHeader";
  @SerializedName(SERIALIZED_NAME_IS_HEADER)
  private Boolean isHeader;

  public static final String SERIALIZED_NAME_IS_POPULAR = "IsPopular";
  @SerializedName(SERIALIZED_NAME_IS_POPULAR)
  private Boolean isPopular;

  public static final String SERIALIZED_NAME_HEADER_ORDER = "HeaderOrder";
  @SerializedName(SERIALIZED_NAME_HEADER_ORDER)
  private Integer headerOrder;

  public static final String SERIALIZED_NAME_HEADER_TYPE = "HeaderType";
  @SerializedName(SERIALIZED_NAME_HEADER_TYPE)
  private HeaderTypes headerType;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_TYPE_ID = "SpecialOddsTypeId";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_TYPE_ID)
  private Integer specialOddsTypeId;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_VALUE = "SpecialOddsValue";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_VALUE)
  private Map<String, String> specialOddsValue;

  public static final String SERIALIZED_NAME_SHOW_HEADER_COLUMN_NAMES = "ShowHeaderColumnNames";
  @SerializedName(SERIALIZED_NAME_SHOW_HEADER_COLUMN_NAMES)
  private Boolean showHeaderColumnNames;

  public static final String SERIALIZED_NAME_CHILDREN = "Children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<SportGroupMarketChildItem> children;

  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private Integer marketTypeId;

  public SportGroupMarketItem() {
  }

  public SportGroupMarketItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SportGroupMarketItem subGroupId(Integer subGroupId) {
    this.subGroupId = subGroupId;
    return this;
  }

   /**
   * Get subGroupId
   * @return subGroupId
  **/
  @javax.annotation.Nullable
  public Integer getSubGroupId() {
    return subGroupId;
  }

  public void setSubGroupId(Integer subGroupId) {
    this.subGroupId = subGroupId;
  }


  public SportGroupMarketItem subGroupName(String subGroupName) {
    this.subGroupName = subGroupName;
    return this;
  }

   /**
   * Get subGroupName
   * @return subGroupName
  **/
  @javax.annotation.Nullable
  public String getSubGroupName() {
    return subGroupName;
  }

  public void setSubGroupName(String subGroupName) {
    this.subGroupName = subGroupName;
  }


  public SportGroupMarketItem isHeader(Boolean isHeader) {
    this.isHeader = isHeader;
    return this;
  }

   /**
   * Get isHeader
   * @return isHeader
  **/
  @javax.annotation.Nullable
  public Boolean getIsHeader() {
    return isHeader;
  }

  public void setIsHeader(Boolean isHeader) {
    this.isHeader = isHeader;
  }


  public SportGroupMarketItem isPopular(Boolean isPopular) {
    this.isPopular = isPopular;
    return this;
  }

   /**
   * Get isPopular
   * @return isPopular
  **/
  @javax.annotation.Nullable
  public Boolean getIsPopular() {
    return isPopular;
  }

  public void setIsPopular(Boolean isPopular) {
    this.isPopular = isPopular;
  }


  public SportGroupMarketItem headerOrder(Integer headerOrder) {
    this.headerOrder = headerOrder;
    return this;
  }

   /**
   * Get headerOrder
   * @return headerOrder
  **/
  @javax.annotation.Nullable
  public Integer getHeaderOrder() {
    return headerOrder;
  }

  public void setHeaderOrder(Integer headerOrder) {
    this.headerOrder = headerOrder;
  }


  public SportGroupMarketItem headerType(HeaderTypes headerType) {
    this.headerType = headerType;
    return this;
  }

   /**
   * Get headerType
   * @return headerType
  **/
  @javax.annotation.Nullable
  public HeaderTypes getHeaderType() {
    return headerType;
  }

  public void setHeaderType(HeaderTypes headerType) {
    this.headerType = headerType;
  }


  public SportGroupMarketItem specialOddsTypeId(Integer specialOddsTypeId) {
    this.specialOddsTypeId = specialOddsTypeId;
    return this;
  }

   /**
   * Get specialOddsTypeId
   * @return specialOddsTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSpecialOddsTypeId() {
    return specialOddsTypeId;
  }

  public void setSpecialOddsTypeId(Integer specialOddsTypeId) {
    this.specialOddsTypeId = specialOddsTypeId;
  }


  public SportGroupMarketItem specialOddsValue(Map<String, String> specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
    return this;
  }

  public SportGroupMarketItem putSpecialOddsValueItem(String key, String specialOddsValueItem) {
    if (this.specialOddsValue == null) {
      this.specialOddsValue = new HashMap<>();
    }
    this.specialOddsValue.put(key, specialOddsValueItem);
    return this;
  }

   /**
   * Get specialOddsValue
   * @return specialOddsValue
  **/
  @javax.annotation.Nullable
  public Map<String, String> getSpecialOddsValue() {
    return specialOddsValue;
  }

  public void setSpecialOddsValue(Map<String, String> specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
  }


  public SportGroupMarketItem showHeaderColumnNames(Boolean showHeaderColumnNames) {
    this.showHeaderColumnNames = showHeaderColumnNames;
    return this;
  }

   /**
   * Get showHeaderColumnNames
   * @return showHeaderColumnNames
  **/
  @javax.annotation.Nullable
  public Boolean getShowHeaderColumnNames() {
    return showHeaderColumnNames;
  }

  public void setShowHeaderColumnNames(Boolean showHeaderColumnNames) {
    this.showHeaderColumnNames = showHeaderColumnNames;
  }


  public SportGroupMarketItem children(List<SportGroupMarketChildItem> children) {
    this.children = children;
    return this;
  }

  public SportGroupMarketItem addChildrenItem(SportGroupMarketChildItem childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  public List<SportGroupMarketChildItem> getChildren() {
    return children;
  }

  public void setChildren(List<SportGroupMarketChildItem> children) {
    this.children = children;
  }


  public SportGroupMarketItem marketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SportGroupMarketItem sportGroupMarketItem = (SportGroupMarketItem) o;
    return Objects.equals(this.name, sportGroupMarketItem.name) &&
        Objects.equals(this.subGroupId, sportGroupMarketItem.subGroupId) &&
        Objects.equals(this.subGroupName, sportGroupMarketItem.subGroupName) &&
        Objects.equals(this.isHeader, sportGroupMarketItem.isHeader) &&
        Objects.equals(this.isPopular, sportGroupMarketItem.isPopular) &&
        Objects.equals(this.headerOrder, sportGroupMarketItem.headerOrder) &&
        Objects.equals(this.headerType, sportGroupMarketItem.headerType) &&
        Objects.equals(this.specialOddsTypeId, sportGroupMarketItem.specialOddsTypeId) &&
        Objects.equals(this.specialOddsValue, sportGroupMarketItem.specialOddsValue) &&
        Objects.equals(this.showHeaderColumnNames, sportGroupMarketItem.showHeaderColumnNames) &&
        Objects.equals(this.children, sportGroupMarketItem.children) &&
        Objects.equals(this.marketTypeId, sportGroupMarketItem.marketTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, subGroupId, subGroupName, isHeader, isPopular, headerOrder, headerType, specialOddsTypeId, specialOddsValue, showHeaderColumnNames, children, marketTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SportGroupMarketItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subGroupId: ").append(toIndentedString(subGroupId)).append("\n");
    sb.append("    subGroupName: ").append(toIndentedString(subGroupName)).append("\n");
    sb.append("    isHeader: ").append(toIndentedString(isHeader)).append("\n");
    sb.append("    isPopular: ").append(toIndentedString(isPopular)).append("\n");
    sb.append("    headerOrder: ").append(toIndentedString(headerOrder)).append("\n");
    sb.append("    headerType: ").append(toIndentedString(headerType)).append("\n");
    sb.append("    specialOddsTypeId: ").append(toIndentedString(specialOddsTypeId)).append("\n");
    sb.append("    specialOddsValue: ").append(toIndentedString(specialOddsValue)).append("\n");
    sb.append("    showHeaderColumnNames: ").append(toIndentedString(showHeaderColumnNames)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("SubGroupId");
    openapiFields.add("SubGroupName");
    openapiFields.add("IsHeader");
    openapiFields.add("IsPopular");
    openapiFields.add("HeaderOrder");
    openapiFields.add("HeaderType");
    openapiFields.add("SpecialOddsTypeId");
    openapiFields.add("SpecialOddsValue");
    openapiFields.add("ShowHeaderColumnNames");
    openapiFields.add("Children");
    openapiFields.add("MarketTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SportGroupMarketItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SportGroupMarketItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SportGroupMarketItem is not found in the empty JSON string", SportGroupMarketItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SportGroupMarketItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SportGroupMarketItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SubGroupName") != null && !jsonObj.get("SubGroupName").isJsonNull()) && !jsonObj.get("SubGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubGroupName").toString()));
      }
      // validate the optional field `HeaderType`
      if (jsonObj.get("HeaderType") != null && !jsonObj.get("HeaderType").isJsonNull()) {
        HeaderTypes.validateJsonElement(jsonObj.get("HeaderType"));
      }
      if (jsonObj.get("Children") != null && !jsonObj.get("Children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("Children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Children` to be an array in the JSON string but got `%s`", jsonObj.get("Children").toString()));
          }

          // validate the optional field `Children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            SportGroupMarketChildItem.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SportGroupMarketItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SportGroupMarketItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SportGroupMarketItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SportGroupMarketItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SportGroupMarketItem>() {
           @Override
           public void write(JsonWriter out, SportGroupMarketItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SportGroupMarketItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SportGroupMarketItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SportGroupMarketItem
  * @throws IOException if the JSON string is invalid with respect to SportGroupMarketItem
  */
  public static SportGroupMarketItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SportGroupMarketItem.class);
  }

 /**
  * Convert an instance of SportGroupMarketItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

