/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * FeedManagerChampGroupAssignedChamp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class FeedManagerChampGroupAssignedChamp {
  public static final String SERIALIZED_NAME_IS_ASSIGNED = "IsAssigned";
  @SerializedName(SERIALIZED_NAME_IS_ASSIGNED)
  private Boolean isAssigned;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Integer champId;

  public FeedManagerChampGroupAssignedChamp() {
  }

  public FeedManagerChampGroupAssignedChamp isAssigned(Boolean isAssigned) {
    this.isAssigned = isAssigned;
    return this;
  }

   /**
   * Get isAssigned
   * @return isAssigned
  **/
  @javax.annotation.Nullable
  public Boolean getIsAssigned() {
    return isAssigned;
  }

  public void setIsAssigned(Boolean isAssigned) {
    this.isAssigned = isAssigned;
  }


  public FeedManagerChampGroupAssignedChamp champId(Integer champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nullable
  public Integer getChampId() {
    return champId;
  }

  public void setChampId(Integer champId) {
    this.champId = champId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedManagerChampGroupAssignedChamp feedManagerChampGroupAssignedChamp = (FeedManagerChampGroupAssignedChamp) o;
    return Objects.equals(this.isAssigned, feedManagerChampGroupAssignedChamp.isAssigned) &&
        Objects.equals(this.champId, feedManagerChampGroupAssignedChamp.champId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAssigned, champId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedManagerChampGroupAssignedChamp {\n");
    sb.append("    isAssigned: ").append(toIndentedString(isAssigned)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsAssigned");
    openapiFields.add("ChampId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeedManagerChampGroupAssignedChamp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedManagerChampGroupAssignedChamp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedManagerChampGroupAssignedChamp is not found in the empty JSON string", FeedManagerChampGroupAssignedChamp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedManagerChampGroupAssignedChamp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedManagerChampGroupAssignedChamp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedManagerChampGroupAssignedChamp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedManagerChampGroupAssignedChamp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedManagerChampGroupAssignedChamp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedManagerChampGroupAssignedChamp.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedManagerChampGroupAssignedChamp>() {
           @Override
           public void write(JsonWriter out, FeedManagerChampGroupAssignedChamp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedManagerChampGroupAssignedChamp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedManagerChampGroupAssignedChamp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedManagerChampGroupAssignedChamp
  * @throws IOException if the JSON string is invalid with respect to FeedManagerChampGroupAssignedChamp
  */
  public static FeedManagerChampGroupAssignedChamp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedManagerChampGroupAssignedChamp.class);
  }

 /**
  * Convert an instance of FeedManagerChampGroupAssignedChamp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

