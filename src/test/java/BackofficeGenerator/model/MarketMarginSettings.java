/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * MarketMarginSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class MarketMarginSettings {
  public static final String SERIALIZED_NAME_ADJUSTMENT_TYPE = "AdjustmentType";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_TYPE)
  private MarketMarginAdjustmentType adjustmentType;

  public static final String SERIALIZED_NAME_ADJUSTMENT_VALUE = "AdjustmentValue";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_VALUE)
  private Double adjustmentValue;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Double key;

  public static final String SERIALIZED_NAME_LADDER_TYPE_ID = "LadderTypeId";
  @SerializedName(SERIALIZED_NAME_LADDER_TYPE_ID)
  private LadderTypes ladderTypeId;

  public static final String SERIALIZED_NAME_MARGIN_RULE_ID = "MarginRuleId";
  @SerializedName(SERIALIZED_NAME_MARGIN_RULE_ID)
  private MarginRules marginRuleId;

  public static final String SERIALIZED_NAME_DEFAULT_KEY = "DefaultKey";
  @SerializedName(SERIALIZED_NAME_DEFAULT_KEY)
  private Double defaultKey;

  public static final String SERIALIZED_NAME_IS_MULTILINE = "IsMultiline";
  @SerializedName(SERIALIZED_NAME_IS_MULTILINE)
  private Boolean isMultiline;

  public static final String SERIALIZED_NAME_TIME_LIMIT_FACTOR = "TimeLimitFactor";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT_FACTOR)
  private Double timeLimitFactor;

  public static final String SERIALIZED_NAME_AVAILABLE_ADJUSTMENT_TYPES = "AvailableAdjustmentTypes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ADJUSTMENT_TYPES)
  private List<MarketMarginAdjustmentType> availableAdjustmentTypes;

  public static final String SERIALIZED_NAME_MAX_LINES = "MaxLines";
  @SerializedName(SERIALIZED_NAME_MAX_LINES)
  private Integer maxLines;

  public MarketMarginSettings() {
  }

  public MarketMarginSettings adjustmentType(MarketMarginAdjustmentType adjustmentType) {
    this.adjustmentType = adjustmentType;
    return this;
  }

   /**
   * Get adjustmentType
   * @return adjustmentType
  **/
  @javax.annotation.Nullable
  public MarketMarginAdjustmentType getAdjustmentType() {
    return adjustmentType;
  }

  public void setAdjustmentType(MarketMarginAdjustmentType adjustmentType) {
    this.adjustmentType = adjustmentType;
  }


  public MarketMarginSettings adjustmentValue(Double adjustmentValue) {
    this.adjustmentValue = adjustmentValue;
    return this;
  }

   /**
   * Get adjustmentValue
   * @return adjustmentValue
  **/
  @javax.annotation.Nullable
  public Double getAdjustmentValue() {
    return adjustmentValue;
  }

  public void setAdjustmentValue(Double adjustmentValue) {
    this.adjustmentValue = adjustmentValue;
  }


  public MarketMarginSettings key(Double key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  public Double getKey() {
    return key;
  }

  public void setKey(Double key) {
    this.key = key;
  }


  public MarketMarginSettings ladderTypeId(LadderTypes ladderTypeId) {
    this.ladderTypeId = ladderTypeId;
    return this;
  }

   /**
   * Get ladderTypeId
   * @return ladderTypeId
  **/
  @javax.annotation.Nullable
  public LadderTypes getLadderTypeId() {
    return ladderTypeId;
  }

  public void setLadderTypeId(LadderTypes ladderTypeId) {
    this.ladderTypeId = ladderTypeId;
  }


  public MarketMarginSettings marginRuleId(MarginRules marginRuleId) {
    this.marginRuleId = marginRuleId;
    return this;
  }

   /**
   * Get marginRuleId
   * @return marginRuleId
  **/
  @javax.annotation.Nullable
  public MarginRules getMarginRuleId() {
    return marginRuleId;
  }

  public void setMarginRuleId(MarginRules marginRuleId) {
    this.marginRuleId = marginRuleId;
  }


  public MarketMarginSettings defaultKey(Double defaultKey) {
    this.defaultKey = defaultKey;
    return this;
  }

   /**
   * Get defaultKey
   * @return defaultKey
  **/
  @javax.annotation.Nullable
  public Double getDefaultKey() {
    return defaultKey;
  }

  public void setDefaultKey(Double defaultKey) {
    this.defaultKey = defaultKey;
  }


  public MarketMarginSettings isMultiline(Boolean isMultiline) {
    this.isMultiline = isMultiline;
    return this;
  }

   /**
   * Get isMultiline
   * @return isMultiline
  **/
  @javax.annotation.Nullable
  public Boolean getIsMultiline() {
    return isMultiline;
  }

  public void setIsMultiline(Boolean isMultiline) {
    this.isMultiline = isMultiline;
  }


  public MarketMarginSettings timeLimitFactor(Double timeLimitFactor) {
    this.timeLimitFactor = timeLimitFactor;
    return this;
  }

   /**
   * Get timeLimitFactor
   * @return timeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getTimeLimitFactor() {
    return timeLimitFactor;
  }

  public void setTimeLimitFactor(Double timeLimitFactor) {
    this.timeLimitFactor = timeLimitFactor;
  }


  public MarketMarginSettings availableAdjustmentTypes(List<MarketMarginAdjustmentType> availableAdjustmentTypes) {
    this.availableAdjustmentTypes = availableAdjustmentTypes;
    return this;
  }

  public MarketMarginSettings addAvailableAdjustmentTypesItem(MarketMarginAdjustmentType availableAdjustmentTypesItem) {
    if (this.availableAdjustmentTypes == null) {
      this.availableAdjustmentTypes = new ArrayList<>();
    }
    this.availableAdjustmentTypes.add(availableAdjustmentTypesItem);
    return this;
  }

   /**
   * Get availableAdjustmentTypes
   * @return availableAdjustmentTypes
  **/
  @javax.annotation.Nullable
  public List<MarketMarginAdjustmentType> getAvailableAdjustmentTypes() {
    return availableAdjustmentTypes;
  }

  public void setAvailableAdjustmentTypes(List<MarketMarginAdjustmentType> availableAdjustmentTypes) {
    this.availableAdjustmentTypes = availableAdjustmentTypes;
  }


  public MarketMarginSettings maxLines(Integer maxLines) {
    this.maxLines = maxLines;
    return this;
  }

   /**
   * Get maxLines
   * @return maxLines
  **/
  @javax.annotation.Nullable
  public Integer getMaxLines() {
    return maxLines;
  }

  public void setMaxLines(Integer maxLines) {
    this.maxLines = maxLines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketMarginSettings marketMarginSettings = (MarketMarginSettings) o;
    return Objects.equals(this.adjustmentType, marketMarginSettings.adjustmentType) &&
        Objects.equals(this.adjustmentValue, marketMarginSettings.adjustmentValue) &&
        Objects.equals(this.key, marketMarginSettings.key) &&
        Objects.equals(this.ladderTypeId, marketMarginSettings.ladderTypeId) &&
        Objects.equals(this.marginRuleId, marketMarginSettings.marginRuleId) &&
        Objects.equals(this.defaultKey, marketMarginSettings.defaultKey) &&
        Objects.equals(this.isMultiline, marketMarginSettings.isMultiline) &&
        Objects.equals(this.timeLimitFactor, marketMarginSettings.timeLimitFactor) &&
        Objects.equals(this.availableAdjustmentTypes, marketMarginSettings.availableAdjustmentTypes) &&
        Objects.equals(this.maxLines, marketMarginSettings.maxLines);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentType, adjustmentValue, key, ladderTypeId, marginRuleId, defaultKey, isMultiline, timeLimitFactor, availableAdjustmentTypes, maxLines);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketMarginSettings {\n");
    sb.append("    adjustmentType: ").append(toIndentedString(adjustmentType)).append("\n");
    sb.append("    adjustmentValue: ").append(toIndentedString(adjustmentValue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    ladderTypeId: ").append(toIndentedString(ladderTypeId)).append("\n");
    sb.append("    marginRuleId: ").append(toIndentedString(marginRuleId)).append("\n");
    sb.append("    defaultKey: ").append(toIndentedString(defaultKey)).append("\n");
    sb.append("    isMultiline: ").append(toIndentedString(isMultiline)).append("\n");
    sb.append("    timeLimitFactor: ").append(toIndentedString(timeLimitFactor)).append("\n");
    sb.append("    availableAdjustmentTypes: ").append(toIndentedString(availableAdjustmentTypes)).append("\n");
    sb.append("    maxLines: ").append(toIndentedString(maxLines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdjustmentType");
    openapiFields.add("AdjustmentValue");
    openapiFields.add("Key");
    openapiFields.add("LadderTypeId");
    openapiFields.add("MarginRuleId");
    openapiFields.add("DefaultKey");
    openapiFields.add("IsMultiline");
    openapiFields.add("TimeLimitFactor");
    openapiFields.add("AvailableAdjustmentTypes");
    openapiFields.add("MaxLines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketMarginSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketMarginSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketMarginSettings is not found in the empty JSON string", MarketMarginSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketMarginSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketMarginSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdjustmentType`
      if (jsonObj.get("AdjustmentType") != null && !jsonObj.get("AdjustmentType").isJsonNull()) {
        MarketMarginAdjustmentType.validateJsonElement(jsonObj.get("AdjustmentType"));
      }
      // validate the optional field `LadderTypeId`
      if (jsonObj.get("LadderTypeId") != null && !jsonObj.get("LadderTypeId").isJsonNull()) {
        LadderTypes.validateJsonElement(jsonObj.get("LadderTypeId"));
      }
      // validate the optional field `MarginRuleId`
      if (jsonObj.get("MarginRuleId") != null && !jsonObj.get("MarginRuleId").isJsonNull()) {
        MarginRules.validateJsonElement(jsonObj.get("MarginRuleId"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AvailableAdjustmentTypes") != null && !jsonObj.get("AvailableAdjustmentTypes").isJsonNull() && !jsonObj.get("AvailableAdjustmentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AvailableAdjustmentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("AvailableAdjustmentTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketMarginSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketMarginSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketMarginSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketMarginSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketMarginSettings>() {
           @Override
           public void write(JsonWriter out, MarketMarginSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketMarginSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketMarginSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketMarginSettings
  * @throws IOException if the JSON string is invalid with respect to MarketMarginSettings
  */
  public static MarketMarginSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketMarginSettings.class);
  }

 /**
  * Convert an instance of MarketMarginSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

