/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * PlayerLimitGroupsItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class PlayerLimitGroupsItem {
  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_PLAYER_LIMIT_GROUP_NAME = "PlayerLimitGroupName";
  @SerializedName(SERIALIZED_NAME_PLAYER_LIMIT_GROUP_NAME)
  private String playerLimitGroupName;

  public static final String SERIALIZED_NAME_BRAND_NAME = "BrandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_FACTOR = "Factor";
  @SerializedName(SERIALIZED_NAME_FACTOR)
  private Double factor;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_PLAYER_LIMIT_GROUP_ID = "PlayerLimitGroupId";
  @SerializedName(SERIALIZED_NAME_PLAYER_LIMIT_GROUP_ID)
  private Integer playerLimitGroupId;

  public PlayerLimitGroupsItem() {
  }

  public PlayerLimitGroupsItem brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public PlayerLimitGroupsItem playerLimitGroupName(String playerLimitGroupName) {
    this.playerLimitGroupName = playerLimitGroupName;
    return this;
  }

   /**
   * Get playerLimitGroupName
   * @return playerLimitGroupName
  **/
  @javax.annotation.Nullable
  public String getPlayerLimitGroupName() {
    return playerLimitGroupName;
  }

  public void setPlayerLimitGroupName(String playerLimitGroupName) {
    this.playerLimitGroupName = playerLimitGroupName;
  }


  public PlayerLimitGroupsItem brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * Get brandName
   * @return brandName
  **/
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public PlayerLimitGroupsItem factor(Double factor) {
    this.factor = factor;
    return this;
  }

   /**
   * Get factor
   * @return factor
  **/
  @javax.annotation.Nullable
  public Double getFactor() {
    return factor;
  }

  public void setFactor(Double factor) {
    this.factor = factor;
  }


  public PlayerLimitGroupsItem isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public PlayerLimitGroupsItem playerLimitGroupId(Integer playerLimitGroupId) {
    this.playerLimitGroupId = playerLimitGroupId;
    return this;
  }

   /**
   * Get playerLimitGroupId
   * @return playerLimitGroupId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerLimitGroupId() {
    return playerLimitGroupId;
  }

  public void setPlayerLimitGroupId(Integer playerLimitGroupId) {
    this.playerLimitGroupId = playerLimitGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerLimitGroupsItem playerLimitGroupsItem = (PlayerLimitGroupsItem) o;
    return Objects.equals(this.brandId, playerLimitGroupsItem.brandId) &&
        Objects.equals(this.playerLimitGroupName, playerLimitGroupsItem.playerLimitGroupName) &&
        Objects.equals(this.brandName, playerLimitGroupsItem.brandName) &&
        Objects.equals(this.factor, playerLimitGroupsItem.factor) &&
        Objects.equals(this.isEnabled, playerLimitGroupsItem.isEnabled) &&
        Objects.equals(this.playerLimitGroupId, playerLimitGroupsItem.playerLimitGroupId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, playerLimitGroupName, brandName, factor, isEnabled, playerLimitGroupId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerLimitGroupsItem {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    playerLimitGroupName: ").append(toIndentedString(playerLimitGroupName)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    playerLimitGroupId: ").append(toIndentedString(playerLimitGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrandId");
    openapiFields.add("PlayerLimitGroupName");
    openapiFields.add("BrandName");
    openapiFields.add("Factor");
    openapiFields.add("IsEnabled");
    openapiFields.add("PlayerLimitGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PlayerLimitGroupsItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerLimitGroupsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerLimitGroupsItem is not found in the empty JSON string", PlayerLimitGroupsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerLimitGroupsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerLimitGroupsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PlayerLimitGroupName") != null && !jsonObj.get("PlayerLimitGroupName").isJsonNull()) && !jsonObj.get("PlayerLimitGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerLimitGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerLimitGroupName").toString()));
      }
      if ((jsonObj.get("BrandName") != null && !jsonObj.get("BrandName").isJsonNull()) && !jsonObj.get("BrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerLimitGroupsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerLimitGroupsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerLimitGroupsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerLimitGroupsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerLimitGroupsItem>() {
           @Override
           public void write(JsonWriter out, PlayerLimitGroupsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerLimitGroupsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerLimitGroupsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerLimitGroupsItem
  * @throws IOException if the JSON string is invalid with respect to PlayerLimitGroupsItem
  */
  public static PlayerLimitGroupsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerLimitGroupsItem.class);
  }

 /**
  * Convert an instance of PlayerLimitGroupsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

