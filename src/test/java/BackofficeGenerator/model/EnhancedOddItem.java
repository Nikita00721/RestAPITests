/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * EnhancedOddItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class EnhancedOddItem {
  public static final String SERIALIZED_NAME_FEED_PRICE = "FeedPrice";
  @SerializedName(SERIALIZED_NAME_FEED_PRICE)
  private Double feedPrice;

  public static final String SERIALIZED_NAME_CHAMP_PRICE = "ChampPrice";
  @SerializedName(SERIALIZED_NAME_CHAMP_PRICE)
  private Double champPrice;

  public static final String SERIALIZED_NAME_ENHANCED_PRICE = "EnhancedPrice";
  @SerializedName(SERIALIZED_NAME_ENHANCED_PRICE)
  private Double enhancedPrice;

  public static final String SERIALIZED_NAME_FAIR_ODDS = "FairOdds";
  @SerializedName(SERIALIZED_NAME_FAIR_ODDS)
  private Double fairOdds;

  public static final String SERIALIZED_NAME_ODDS_CONFLICT_ITEM = "OddsConflictItem";
  @SerializedName(SERIALIZED_NAME_ODDS_CONFLICT_ITEM)
  private OddsConflicts oddsConflictItem;

  public static final String SERIALIZED_NAME_SELECTION_NAME = "SelectionName";
  @SerializedName(SERIALIZED_NAME_SELECTION_NAME)
  private String selectionName;

  public EnhancedOddItem() {
  }

  public EnhancedOddItem feedPrice(Double feedPrice) {
    this.feedPrice = feedPrice;
    return this;
  }

   /**
   * Get feedPrice
   * @return feedPrice
  **/
  @javax.annotation.Nullable
  public Double getFeedPrice() {
    return feedPrice;
  }

  public void setFeedPrice(Double feedPrice) {
    this.feedPrice = feedPrice;
  }


  public EnhancedOddItem champPrice(Double champPrice) {
    this.champPrice = champPrice;
    return this;
  }

   /**
   * Get champPrice
   * @return champPrice
  **/
  @javax.annotation.Nullable
  public Double getChampPrice() {
    return champPrice;
  }

  public void setChampPrice(Double champPrice) {
    this.champPrice = champPrice;
  }


  public EnhancedOddItem enhancedPrice(Double enhancedPrice) {
    this.enhancedPrice = enhancedPrice;
    return this;
  }

   /**
   * Get enhancedPrice
   * @return enhancedPrice
  **/
  @javax.annotation.Nullable
  public Double getEnhancedPrice() {
    return enhancedPrice;
  }

  public void setEnhancedPrice(Double enhancedPrice) {
    this.enhancedPrice = enhancedPrice;
  }


  public EnhancedOddItem fairOdds(Double fairOdds) {
    this.fairOdds = fairOdds;
    return this;
  }

   /**
   * Get fairOdds
   * @return fairOdds
  **/
  @javax.annotation.Nullable
  public Double getFairOdds() {
    return fairOdds;
  }

  public void setFairOdds(Double fairOdds) {
    this.fairOdds = fairOdds;
  }


  public EnhancedOddItem oddsConflictItem(OddsConflicts oddsConflictItem) {
    this.oddsConflictItem = oddsConflictItem;
    return this;
  }

   /**
   * Get oddsConflictItem
   * @return oddsConflictItem
  **/
  @javax.annotation.Nullable
  public OddsConflicts getOddsConflictItem() {
    return oddsConflictItem;
  }

  public void setOddsConflictItem(OddsConflicts oddsConflictItem) {
    this.oddsConflictItem = oddsConflictItem;
  }


  public EnhancedOddItem selectionName(String selectionName) {
    this.selectionName = selectionName;
    return this;
  }

   /**
   * Get selectionName
   * @return selectionName
  **/
  @javax.annotation.Nullable
  public String getSelectionName() {
    return selectionName;
  }

  public void setSelectionName(String selectionName) {
    this.selectionName = selectionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedOddItem enhancedOddItem = (EnhancedOddItem) o;
    return Objects.equals(this.feedPrice, enhancedOddItem.feedPrice) &&
        Objects.equals(this.champPrice, enhancedOddItem.champPrice) &&
        Objects.equals(this.enhancedPrice, enhancedOddItem.enhancedPrice) &&
        Objects.equals(this.fairOdds, enhancedOddItem.fairOdds) &&
        Objects.equals(this.oddsConflictItem, enhancedOddItem.oddsConflictItem) &&
        Objects.equals(this.selectionName, enhancedOddItem.selectionName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedPrice, champPrice, enhancedPrice, fairOdds, oddsConflictItem, selectionName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedOddItem {\n");
    sb.append("    feedPrice: ").append(toIndentedString(feedPrice)).append("\n");
    sb.append("    champPrice: ").append(toIndentedString(champPrice)).append("\n");
    sb.append("    enhancedPrice: ").append(toIndentedString(enhancedPrice)).append("\n");
    sb.append("    fairOdds: ").append(toIndentedString(fairOdds)).append("\n");
    sb.append("    oddsConflictItem: ").append(toIndentedString(oddsConflictItem)).append("\n");
    sb.append("    selectionName: ").append(toIndentedString(selectionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeedPrice");
    openapiFields.add("ChampPrice");
    openapiFields.add("EnhancedPrice");
    openapiFields.add("FairOdds");
    openapiFields.add("OddsConflictItem");
    openapiFields.add("SelectionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnhancedOddItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedOddItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedOddItem is not found in the empty JSON string", EnhancedOddItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedOddItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedOddItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OddsConflictItem`
      if (jsonObj.get("OddsConflictItem") != null && !jsonObj.get("OddsConflictItem").isJsonNull()) {
        OddsConflicts.validateJsonElement(jsonObj.get("OddsConflictItem"));
      }
      if ((jsonObj.get("SelectionName") != null && !jsonObj.get("SelectionName").isJsonNull()) && !jsonObj.get("SelectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SelectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SelectionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedOddItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedOddItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedOddItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedOddItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedOddItem>() {
           @Override
           public void write(JsonWriter out, EnhancedOddItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedOddItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnhancedOddItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnhancedOddItem
  * @throws IOException if the JSON string is invalid with respect to EnhancedOddItem
  */
  public static EnhancedOddItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedOddItem.class);
  }

 /**
  * Convert an instance of EnhancedOddItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

