/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * OrderingTotoListRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class OrderingTotoListRecord {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TotoType type;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_BETS_COUNT = "BetsCount";
  @SerializedName(SERIALIZED_NAME_BETS_COUNT)
  private Integer betsCount;

  public static final String SERIALIZED_NAME_IS_VOIDED = "IsVoided";
  @SerializedName(SERIALIZED_NAME_IS_VOIDED)
  private Boolean isVoided;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_TOTO_ID = "TotoId";
  @SerializedName(SERIALIZED_NAME_TOTO_ID)
  private Integer totoId;

  public OrderingTotoListRecord() {
  }

  public OrderingTotoListRecord name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrderingTotoListRecord dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public OrderingTotoListRecord dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public OrderingTotoListRecord type(TotoType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TotoType getType() {
    return type;
  }

  public void setType(TotoType type) {
    this.type = type;
  }


  public OrderingTotoListRecord isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public OrderingTotoListRecord betsCount(Integer betsCount) {
    this.betsCount = betsCount;
    return this;
  }

   /**
   * Get betsCount
   * @return betsCount
  **/
  @javax.annotation.Nullable
  public Integer getBetsCount() {
    return betsCount;
  }

  public void setBetsCount(Integer betsCount) {
    this.betsCount = betsCount;
  }


  public OrderingTotoListRecord isVoided(Boolean isVoided) {
    this.isVoided = isVoided;
    return this;
  }

   /**
   * Get isVoided
   * @return isVoided
  **/
  @javax.annotation.Nullable
  public Boolean getIsVoided() {
    return isVoided;
  }

  public void setIsVoided(Boolean isVoided) {
    this.isVoided = isVoided;
  }


  public OrderingTotoListRecord sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public OrderingTotoListRecord totoId(Integer totoId) {
    this.totoId = totoId;
    return this;
  }

   /**
   * Get totoId
   * @return totoId
  **/
  @javax.annotation.Nullable
  public Integer getTotoId() {
    return totoId;
  }

  public void setTotoId(Integer totoId) {
    this.totoId = totoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderingTotoListRecord orderingTotoListRecord = (OrderingTotoListRecord) o;
    return Objects.equals(this.name, orderingTotoListRecord.name) &&
        Objects.equals(this.dateFrom, orderingTotoListRecord.dateFrom) &&
        Objects.equals(this.dateTo, orderingTotoListRecord.dateTo) &&
        Objects.equals(this.type, orderingTotoListRecord.type) &&
        Objects.equals(this.isEnabled, orderingTotoListRecord.isEnabled) &&
        Objects.equals(this.betsCount, orderingTotoListRecord.betsCount) &&
        Objects.equals(this.isVoided, orderingTotoListRecord.isVoided) &&
        Objects.equals(this.sortOrder, orderingTotoListRecord.sortOrder) &&
        Objects.equals(this.totoId, orderingTotoListRecord.totoId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dateFrom, dateTo, type, isEnabled, betsCount, isVoided, sortOrder, totoId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderingTotoListRecord {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    betsCount: ").append(toIndentedString(betsCount)).append("\n");
    sb.append("    isVoided: ").append(toIndentedString(isVoided)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    totoId: ").append(toIndentedString(totoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("Type");
    openapiFields.add("IsEnabled");
    openapiFields.add("BetsCount");
    openapiFields.add("IsVoided");
    openapiFields.add("SortOrder");
    openapiFields.add("TotoId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderingTotoListRecord
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderingTotoListRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderingTotoListRecord is not found in the empty JSON string", OrderingTotoListRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderingTotoListRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderingTotoListRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TotoType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderingTotoListRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderingTotoListRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderingTotoListRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderingTotoListRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderingTotoListRecord>() {
           @Override
           public void write(JsonWriter out, OrderingTotoListRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderingTotoListRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderingTotoListRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderingTotoListRecord
  * @throws IOException if the JSON string is invalid with respect to OrderingTotoListRecord
  */
  public static OrderingTotoListRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderingTotoListRecord.class);
  }

 /**
  * Convert an instance of OrderingTotoListRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

