/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * ConfigStreamPackageItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class ConfigStreamPackageItem {
  public static final String SERIALIZED_NAME_PROVIDER_ID = "ProviderId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private Integer providerId;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "ProviderName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "IsPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_ENABLED = "IsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_GLOBALLY_ENABLED = "IsGloballyEnabled";
  @SerializedName(SERIALIZED_NAME_IS_GLOBALLY_ENABLED)
  private Boolean isGloballyEnabled;

  public static final String SERIALIZED_NAME_LINKED_CONFIGS = "LinkedConfigs";
  @SerializedName(SERIALIZED_NAME_LINKED_CONFIGS)
  private List<String> linkedConfigs;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private StreamPackageLoginData settings;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "PackageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private Integer packageId;

  public ConfigStreamPackageItem() {
  }

  public ConfigStreamPackageItem providerId(Integer providerId) {
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @javax.annotation.Nullable
  public Integer getProviderId() {
    return providerId;
  }

  public void setProviderId(Integer providerId) {
    this.providerId = providerId;
  }


  public ConfigStreamPackageItem providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

   /**
   * Get providerName
   * @return providerName
  **/
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public ConfigStreamPackageItem isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public ConfigStreamPackageItem isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ConfigStreamPackageItem isGloballyEnabled(Boolean isGloballyEnabled) {
    this.isGloballyEnabled = isGloballyEnabled;
    return this;
  }

   /**
   * Get isGloballyEnabled
   * @return isGloballyEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getIsGloballyEnabled() {
    return isGloballyEnabled;
  }

  public void setIsGloballyEnabled(Boolean isGloballyEnabled) {
    this.isGloballyEnabled = isGloballyEnabled;
  }


  public ConfigStreamPackageItem linkedConfigs(List<String> linkedConfigs) {
    this.linkedConfigs = linkedConfigs;
    return this;
  }

  public ConfigStreamPackageItem addLinkedConfigsItem(String linkedConfigsItem) {
    if (this.linkedConfigs == null) {
      this.linkedConfigs = new ArrayList<>();
    }
    this.linkedConfigs.add(linkedConfigsItem);
    return this;
  }

   /**
   * Get linkedConfigs
   * @return linkedConfigs
  **/
  @javax.annotation.Nullable
  public List<String> getLinkedConfigs() {
    return linkedConfigs;
  }

  public void setLinkedConfigs(List<String> linkedConfigs) {
    this.linkedConfigs = linkedConfigs;
  }


  public ConfigStreamPackageItem settings(StreamPackageLoginData settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public StreamPackageLoginData getSettings() {
    return settings;
  }

  public void setSettings(StreamPackageLoginData settings) {
    this.settings = settings;
  }


  public ConfigStreamPackageItem packageId(Integer packageId) {
    this.packageId = packageId;
    return this;
  }

   /**
   * Get packageId
   * @return packageId
  **/
  @javax.annotation.Nullable
  public Integer getPackageId() {
    return packageId;
  }

  public void setPackageId(Integer packageId) {
    this.packageId = packageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigStreamPackageItem configStreamPackageItem = (ConfigStreamPackageItem) o;
    return Objects.equals(this.providerId, configStreamPackageItem.providerId) &&
        Objects.equals(this.providerName, configStreamPackageItem.providerName) &&
        Objects.equals(this.isPublic, configStreamPackageItem.isPublic) &&
        Objects.equals(this.isEnabled, configStreamPackageItem.isEnabled) &&
        Objects.equals(this.isGloballyEnabled, configStreamPackageItem.isGloballyEnabled) &&
        Objects.equals(this.linkedConfigs, configStreamPackageItem.linkedConfigs) &&
        Objects.equals(this.settings, configStreamPackageItem.settings) &&
        Objects.equals(this.packageId, configStreamPackageItem.packageId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerId, providerName, isPublic, isEnabled, isGloballyEnabled, linkedConfigs, settings, packageId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigStreamPackageItem {\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isGloballyEnabled: ").append(toIndentedString(isGloballyEnabled)).append("\n");
    sb.append("    linkedConfigs: ").append(toIndentedString(linkedConfigs)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProviderId");
    openapiFields.add("ProviderName");
    openapiFields.add("IsPublic");
    openapiFields.add("IsEnabled");
    openapiFields.add("IsGloballyEnabled");
    openapiFields.add("LinkedConfigs");
    openapiFields.add("Settings");
    openapiFields.add("PackageId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConfigStreamPackageItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigStreamPackageItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigStreamPackageItem is not found in the empty JSON string", ConfigStreamPackageItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigStreamPackageItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigStreamPackageItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ProviderName") != null && !jsonObj.get("ProviderName").isJsonNull()) && !jsonObj.get("ProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LinkedConfigs") != null && !jsonObj.get("LinkedConfigs").isJsonNull() && !jsonObj.get("LinkedConfigs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinkedConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("LinkedConfigs").toString()));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        StreamPackageLoginData.validateJsonElement(jsonObj.get("Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigStreamPackageItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigStreamPackageItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigStreamPackageItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigStreamPackageItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigStreamPackageItem>() {
           @Override
           public void write(JsonWriter out, ConfigStreamPackageItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigStreamPackageItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigStreamPackageItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigStreamPackageItem
  * @throws IOException if the JSON string is invalid with respect to ConfigStreamPackageItem
  */
  public static ConfigStreamPackageItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigStreamPackageItem.class);
  }

 /**
  * Convert an instance of ConfigStreamPackageItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

