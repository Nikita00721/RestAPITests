/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetParticipantsForAamsMappingRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetParticipantsForAamsMappingRequestFilters {
  public static final String SERIALIZED_NAME_INTERNAL_PARTICIPANT_ID = "InternalParticipantId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PARTICIPANT_ID)
  private Integer internalParticipantId;

  public static final String SERIALIZED_NAME_INTERNAL_PARTICIPANT_NAME = "InternalParticipantName";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PARTICIPANT_NAME)
  private String internalParticipantName;

  public static final String SERIALIZED_NAME_AAMS_TEAM_ID = "AamsTeamId";
  @SerializedName(SERIALIZED_NAME_AAMS_TEAM_ID)
  private Integer aamsTeamId;

  public static final String SERIALIZED_NAME_AAMS_TEAM_NAME = "AamsTeamName";
  @SerializedName(SERIALIZED_NAME_AAMS_TEAM_NAME)
  private String aamsTeamName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MappingStatus status;

  public static final String SERIALIZED_NAME_INTERNAL_CHAMP_ID = "InternalChampId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_CHAMP_ID)
  private Integer internalChampId;

  public GetParticipantsForAamsMappingRequestFilters() {
  }

  public GetParticipantsForAamsMappingRequestFilters internalParticipantId(Integer internalParticipantId) {
    this.internalParticipantId = internalParticipantId;
    return this;
  }

   /**
   * Get internalParticipantId
   * @return internalParticipantId
  **/
  @javax.annotation.Nullable
  public Integer getInternalParticipantId() {
    return internalParticipantId;
  }

  public void setInternalParticipantId(Integer internalParticipantId) {
    this.internalParticipantId = internalParticipantId;
  }


  public GetParticipantsForAamsMappingRequestFilters internalParticipantName(String internalParticipantName) {
    this.internalParticipantName = internalParticipantName;
    return this;
  }

   /**
   * Get internalParticipantName
   * @return internalParticipantName
  **/
  @javax.annotation.Nullable
  public String getInternalParticipantName() {
    return internalParticipantName;
  }

  public void setInternalParticipantName(String internalParticipantName) {
    this.internalParticipantName = internalParticipantName;
  }


  public GetParticipantsForAamsMappingRequestFilters aamsTeamId(Integer aamsTeamId) {
    this.aamsTeamId = aamsTeamId;
    return this;
  }

   /**
   * Get aamsTeamId
   * @return aamsTeamId
  **/
  @javax.annotation.Nullable
  public Integer getAamsTeamId() {
    return aamsTeamId;
  }

  public void setAamsTeamId(Integer aamsTeamId) {
    this.aamsTeamId = aamsTeamId;
  }


  public GetParticipantsForAamsMappingRequestFilters aamsTeamName(String aamsTeamName) {
    this.aamsTeamName = aamsTeamName;
    return this;
  }

   /**
   * Get aamsTeamName
   * @return aamsTeamName
  **/
  @javax.annotation.Nullable
  public String getAamsTeamName() {
    return aamsTeamName;
  }

  public void setAamsTeamName(String aamsTeamName) {
    this.aamsTeamName = aamsTeamName;
  }


  public GetParticipantsForAamsMappingRequestFilters status(MappingStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public MappingStatus getStatus() {
    return status;
  }

  public void setStatus(MappingStatus status) {
    this.status = status;
  }


  public GetParticipantsForAamsMappingRequestFilters internalChampId(Integer internalChampId) {
    this.internalChampId = internalChampId;
    return this;
  }

   /**
   * Get internalChampId
   * @return internalChampId
  **/
  @javax.annotation.Nullable
  public Integer getInternalChampId() {
    return internalChampId;
  }

  public void setInternalChampId(Integer internalChampId) {
    this.internalChampId = internalChampId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetParticipantsForAamsMappingRequestFilters getParticipantsForAamsMappingRequestFilters = (GetParticipantsForAamsMappingRequestFilters) o;
    return Objects.equals(this.internalParticipantId, getParticipantsForAamsMappingRequestFilters.internalParticipantId) &&
        Objects.equals(this.internalParticipantName, getParticipantsForAamsMappingRequestFilters.internalParticipantName) &&
        Objects.equals(this.aamsTeamId, getParticipantsForAamsMappingRequestFilters.aamsTeamId) &&
        Objects.equals(this.aamsTeamName, getParticipantsForAamsMappingRequestFilters.aamsTeamName) &&
        Objects.equals(this.status, getParticipantsForAamsMappingRequestFilters.status) &&
        Objects.equals(this.internalChampId, getParticipantsForAamsMappingRequestFilters.internalChampId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalParticipantId, internalParticipantName, aamsTeamId, aamsTeamName, status, internalChampId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetParticipantsForAamsMappingRequestFilters {\n");
    sb.append("    internalParticipantId: ").append(toIndentedString(internalParticipantId)).append("\n");
    sb.append("    internalParticipantName: ").append(toIndentedString(internalParticipantName)).append("\n");
    sb.append("    aamsTeamId: ").append(toIndentedString(aamsTeamId)).append("\n");
    sb.append("    aamsTeamName: ").append(toIndentedString(aamsTeamName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    internalChampId: ").append(toIndentedString(internalChampId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InternalParticipantId");
    openapiFields.add("InternalParticipantName");
    openapiFields.add("AamsTeamId");
    openapiFields.add("AamsTeamName");
    openapiFields.add("Status");
    openapiFields.add("InternalChampId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetParticipantsForAamsMappingRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetParticipantsForAamsMappingRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetParticipantsForAamsMappingRequestFilters is not found in the empty JSON string", GetParticipantsForAamsMappingRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetParticipantsForAamsMappingRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetParticipantsForAamsMappingRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("InternalParticipantName") != null && !jsonObj.get("InternalParticipantName").isJsonNull()) && !jsonObj.get("InternalParticipantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalParticipantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalParticipantName").toString()));
      }
      if ((jsonObj.get("AamsTeamName") != null && !jsonObj.get("AamsTeamName").isJsonNull()) && !jsonObj.get("AamsTeamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsTeamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsTeamName").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MappingStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetParticipantsForAamsMappingRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetParticipantsForAamsMappingRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetParticipantsForAamsMappingRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetParticipantsForAamsMappingRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetParticipantsForAamsMappingRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetParticipantsForAamsMappingRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetParticipantsForAamsMappingRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetParticipantsForAamsMappingRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetParticipantsForAamsMappingRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetParticipantsForAamsMappingRequestFilters
  */
  public static GetParticipantsForAamsMappingRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetParticipantsForAamsMappingRequestFilters.class);
  }

 /**
  * Convert an instance of GetParticipantsForAamsMappingRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

