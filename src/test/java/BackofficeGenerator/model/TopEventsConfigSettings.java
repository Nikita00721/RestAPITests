/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * TopEventsConfigSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TopEventsConfigSettings {
  public static final String SERIALIZED_NAME_EVENTS_COUNT = "EventsCount";
  @SerializedName(SERIALIZED_NAME_EVENTS_COUNT)
  private Integer eventsCount;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private TopEventsConfigMode mode;

  public static final String SERIALIZED_NAME_LANGUAGE_TABS = "LanguageTabs";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_TABS)
  private List<LanguageTab> languageTabs;

  public static final String SERIALIZED_NAME_ENABLE_CAROUSEL = "EnableCarousel";
  @SerializedName(SERIALIZED_NAME_ENABLE_CAROUSEL)
  private Boolean enableCarousel;

  public TopEventsConfigSettings() {
  }

  public TopEventsConfigSettings eventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
    return this;
  }

   /**
   * Get eventsCount
   * @return eventsCount
  **/
  @javax.annotation.Nullable
  public Integer getEventsCount() {
    return eventsCount;
  }

  public void setEventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
  }


  public TopEventsConfigSettings mode(TopEventsConfigMode mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  public TopEventsConfigMode getMode() {
    return mode;
  }

  public void setMode(TopEventsConfigMode mode) {
    this.mode = mode;
  }


  public TopEventsConfigSettings languageTabs(List<LanguageTab> languageTabs) {
    this.languageTabs = languageTabs;
    return this;
  }

  public TopEventsConfigSettings addLanguageTabsItem(LanguageTab languageTabsItem) {
    if (this.languageTabs == null) {
      this.languageTabs = new ArrayList<>();
    }
    this.languageTabs.add(languageTabsItem);
    return this;
  }

   /**
   * Get languageTabs
   * @return languageTabs
  **/
  @javax.annotation.Nullable
  public List<LanguageTab> getLanguageTabs() {
    return languageTabs;
  }

  public void setLanguageTabs(List<LanguageTab> languageTabs) {
    this.languageTabs = languageTabs;
  }


  public TopEventsConfigSettings enableCarousel(Boolean enableCarousel) {
    this.enableCarousel = enableCarousel;
    return this;
  }

   /**
   * Get enableCarousel
   * @return enableCarousel
  **/
  @javax.annotation.Nullable
  public Boolean getEnableCarousel() {
    return enableCarousel;
  }

  public void setEnableCarousel(Boolean enableCarousel) {
    this.enableCarousel = enableCarousel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopEventsConfigSettings topEventsConfigSettings = (TopEventsConfigSettings) o;
    return Objects.equals(this.eventsCount, topEventsConfigSettings.eventsCount) &&
        Objects.equals(this.mode, topEventsConfigSettings.mode) &&
        Objects.equals(this.languageTabs, topEventsConfigSettings.languageTabs) &&
        Objects.equals(this.enableCarousel, topEventsConfigSettings.enableCarousel);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventsCount, mode, languageTabs, enableCarousel);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopEventsConfigSettings {\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    languageTabs: ").append(toIndentedString(languageTabs)).append("\n");
    sb.append("    enableCarousel: ").append(toIndentedString(enableCarousel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventsCount");
    openapiFields.add("Mode");
    openapiFields.add("LanguageTabs");
    openapiFields.add("EnableCarousel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TopEventsConfigSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopEventsConfigSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopEventsConfigSettings is not found in the empty JSON string", TopEventsConfigSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopEventsConfigSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopEventsConfigSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        TopEventsConfigMode.validateJsonElement(jsonObj.get("Mode"));
      }
      if (jsonObj.get("LanguageTabs") != null && !jsonObj.get("LanguageTabs").isJsonNull()) {
        JsonArray jsonArraylanguageTabs = jsonObj.getAsJsonArray("LanguageTabs");
        if (jsonArraylanguageTabs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LanguageTabs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LanguageTabs` to be an array in the JSON string but got `%s`", jsonObj.get("LanguageTabs").toString()));
          }

          // validate the optional field `LanguageTabs` (array)
          for (int i = 0; i < jsonArraylanguageTabs.size(); i++) {
            LanguageTab.validateJsonElement(jsonArraylanguageTabs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopEventsConfigSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopEventsConfigSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopEventsConfigSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopEventsConfigSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TopEventsConfigSettings>() {
           @Override
           public void write(JsonWriter out, TopEventsConfigSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopEventsConfigSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopEventsConfigSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopEventsConfigSettings
  * @throws IOException if the JSON string is invalid with respect to TopEventsConfigSettings
  */
  public static TopEventsConfigSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopEventsConfigSettings.class);
  }

 /**
  * Convert an instance of TopEventsConfigSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

