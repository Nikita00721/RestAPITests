/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * MappedInternalMarket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class MappedInternalMarket {
  public static final String SERIALIZED_NAME_INT_MARKET_NAME = "IntMarketName";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_NAME)
  private String intMarketName;

  public static final String SERIALIZED_NAME_IS_OUTRIGHT = "IsOutright";
  @SerializedName(SERIALIZED_NAME_IS_OUTRIGHT)
  private Boolean isOutright;

  public static final String SERIALIZED_NAME_INT_SPORT_ID = "IntSportId";
  @SerializedName(SERIALIZED_NAME_INT_SPORT_ID)
  private Integer intSportId;

  public static final String SERIALIZED_NAME_AAMS_MARKETS = "AamsMarkets";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKETS)
  private List<AamsMarket> aamsMarkets;

  public static final String SERIALIZED_NAME_INTERNAL_SELECTIONS_COUNT = "InternalSelectionsCount";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SELECTIONS_COUNT)
  private Integer internalSelectionsCount;

  public static final String SERIALIZED_NAME_AAMS_SELECTIONS_COUNT = "AamsSelectionsCount";
  @SerializedName(SERIALIZED_NAME_AAMS_SELECTIONS_COUNT)
  private Integer aamsSelectionsCount;

  public static final String SERIALIZED_NAME_AAMS_MARKET_IDS = "AamsMarketIds";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKET_IDS)
  private List<Integer> aamsMarketIds;

  public static final String SERIALIZED_NAME_AAMS_MARKET_NAMES = "AamsMarketNames";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKET_NAMES)
  private List<String> aamsMarketNames;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MappingStatus status;

  public static final String SERIALIZED_NAME_INT_MARKET_ID = "IntMarketId";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_ID)
  private Integer intMarketId;

  public MappedInternalMarket() {
  }

  public MappedInternalMarket(
     Integer aamsSelectionsCount, 
     List<Integer> aamsMarketIds, 
     List<String> aamsMarketNames
  ) {
    this();
    this.aamsSelectionsCount = aamsSelectionsCount;
    this.aamsMarketIds = aamsMarketIds;
    this.aamsMarketNames = aamsMarketNames;
  }

  public MappedInternalMarket intMarketName(String intMarketName) {
    this.intMarketName = intMarketName;
    return this;
  }

   /**
   * Get intMarketName
   * @return intMarketName
  **/
  @javax.annotation.Nullable
  public String getIntMarketName() {
    return intMarketName;
  }

  public void setIntMarketName(String intMarketName) {
    this.intMarketName = intMarketName;
  }


  public MappedInternalMarket isOutright(Boolean isOutright) {
    this.isOutright = isOutright;
    return this;
  }

   /**
   * Get isOutright
   * @return isOutright
  **/
  @javax.annotation.Nullable
  public Boolean getIsOutright() {
    return isOutright;
  }

  public void setIsOutright(Boolean isOutright) {
    this.isOutright = isOutright;
  }


  public MappedInternalMarket intSportId(Integer intSportId) {
    this.intSportId = intSportId;
    return this;
  }

   /**
   * Get intSportId
   * @return intSportId
  **/
  @javax.annotation.Nullable
  public Integer getIntSportId() {
    return intSportId;
  }

  public void setIntSportId(Integer intSportId) {
    this.intSportId = intSportId;
  }


  public MappedInternalMarket aamsMarkets(List<AamsMarket> aamsMarkets) {
    this.aamsMarkets = aamsMarkets;
    return this;
  }

  public MappedInternalMarket addAamsMarketsItem(AamsMarket aamsMarketsItem) {
    if (this.aamsMarkets == null) {
      this.aamsMarkets = new ArrayList<>();
    }
    this.aamsMarkets.add(aamsMarketsItem);
    return this;
  }

   /**
   * Get aamsMarkets
   * @return aamsMarkets
  **/
  @javax.annotation.Nullable
  public List<AamsMarket> getAamsMarkets() {
    return aamsMarkets;
  }

  public void setAamsMarkets(List<AamsMarket> aamsMarkets) {
    this.aamsMarkets = aamsMarkets;
  }


  public MappedInternalMarket internalSelectionsCount(Integer internalSelectionsCount) {
    this.internalSelectionsCount = internalSelectionsCount;
    return this;
  }

   /**
   * Get internalSelectionsCount
   * @return internalSelectionsCount
  **/
  @javax.annotation.Nullable
  public Integer getInternalSelectionsCount() {
    return internalSelectionsCount;
  }

  public void setInternalSelectionsCount(Integer internalSelectionsCount) {
    this.internalSelectionsCount = internalSelectionsCount;
  }


   /**
   * Get aamsSelectionsCount
   * @return aamsSelectionsCount
  **/
  @javax.annotation.Nullable
  public Integer getAamsSelectionsCount() {
    return aamsSelectionsCount;
  }



   /**
   * Get aamsMarketIds
   * @return aamsMarketIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getAamsMarketIds() {
    return aamsMarketIds;
  }



   /**
   * Get aamsMarketNames
   * @return aamsMarketNames
  **/
  @javax.annotation.Nullable
  public List<String> getAamsMarketNames() {
    return aamsMarketNames;
  }



  public MappedInternalMarket status(MappingStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public MappingStatus getStatus() {
    return status;
  }

  public void setStatus(MappingStatus status) {
    this.status = status;
  }


  public MappedInternalMarket intMarketId(Integer intMarketId) {
    this.intMarketId = intMarketId;
    return this;
  }

   /**
   * Get intMarketId
   * @return intMarketId
  **/
  @javax.annotation.Nullable
  public Integer getIntMarketId() {
    return intMarketId;
  }

  public void setIntMarketId(Integer intMarketId) {
    this.intMarketId = intMarketId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappedInternalMarket mappedInternalMarket = (MappedInternalMarket) o;
    return Objects.equals(this.intMarketName, mappedInternalMarket.intMarketName) &&
        Objects.equals(this.isOutright, mappedInternalMarket.isOutright) &&
        Objects.equals(this.intSportId, mappedInternalMarket.intSportId) &&
        Objects.equals(this.aamsMarkets, mappedInternalMarket.aamsMarkets) &&
        Objects.equals(this.internalSelectionsCount, mappedInternalMarket.internalSelectionsCount) &&
        Objects.equals(this.aamsSelectionsCount, mappedInternalMarket.aamsSelectionsCount) &&
        Objects.equals(this.aamsMarketIds, mappedInternalMarket.aamsMarketIds) &&
        Objects.equals(this.aamsMarketNames, mappedInternalMarket.aamsMarketNames) &&
        Objects.equals(this.status, mappedInternalMarket.status) &&
        Objects.equals(this.intMarketId, mappedInternalMarket.intMarketId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(intMarketName, isOutright, intSportId, aamsMarkets, internalSelectionsCount, aamsSelectionsCount, aamsMarketIds, aamsMarketNames, status, intMarketId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappedInternalMarket {\n");
    sb.append("    intMarketName: ").append(toIndentedString(intMarketName)).append("\n");
    sb.append("    isOutright: ").append(toIndentedString(isOutright)).append("\n");
    sb.append("    intSportId: ").append(toIndentedString(intSportId)).append("\n");
    sb.append("    aamsMarkets: ").append(toIndentedString(aamsMarkets)).append("\n");
    sb.append("    internalSelectionsCount: ").append(toIndentedString(internalSelectionsCount)).append("\n");
    sb.append("    aamsSelectionsCount: ").append(toIndentedString(aamsSelectionsCount)).append("\n");
    sb.append("    aamsMarketIds: ").append(toIndentedString(aamsMarketIds)).append("\n");
    sb.append("    aamsMarketNames: ").append(toIndentedString(aamsMarketNames)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    intMarketId: ").append(toIndentedString(intMarketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntMarketName");
    openapiFields.add("IsOutright");
    openapiFields.add("IntSportId");
    openapiFields.add("AamsMarkets");
    openapiFields.add("InternalSelectionsCount");
    openapiFields.add("AamsSelectionsCount");
    openapiFields.add("AamsMarketIds");
    openapiFields.add("AamsMarketNames");
    openapiFields.add("Status");
    openapiFields.add("IntMarketId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MappedInternalMarket
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappedInternalMarket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappedInternalMarket is not found in the empty JSON string", MappedInternalMarket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappedInternalMarket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappedInternalMarket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IntMarketName") != null && !jsonObj.get("IntMarketName").isJsonNull()) && !jsonObj.get("IntMarketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntMarketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntMarketName").toString()));
      }
      if (jsonObj.get("AamsMarkets") != null && !jsonObj.get("AamsMarkets").isJsonNull()) {
        JsonArray jsonArrayaamsMarkets = jsonObj.getAsJsonArray("AamsMarkets");
        if (jsonArrayaamsMarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AamsMarkets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AamsMarkets` to be an array in the JSON string but got `%s`", jsonObj.get("AamsMarkets").toString()));
          }

          // validate the optional field `AamsMarkets` (array)
          for (int i = 0; i < jsonArrayaamsMarkets.size(); i++) {
            AamsMarket.validateJsonElement(jsonArrayaamsMarkets.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AamsMarketIds") != null && !jsonObj.get("AamsMarketIds").isJsonNull() && !jsonObj.get("AamsMarketIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsMarketIds` to be an array in the JSON string but got `%s`", jsonObj.get("AamsMarketIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AamsMarketNames") != null && !jsonObj.get("AamsMarketNames").isJsonNull() && !jsonObj.get("AamsMarketNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsMarketNames` to be an array in the JSON string but got `%s`", jsonObj.get("AamsMarketNames").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MappingStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappedInternalMarket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappedInternalMarket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappedInternalMarket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappedInternalMarket.class));

       return (TypeAdapter<T>) new TypeAdapter<MappedInternalMarket>() {
           @Override
           public void write(JsonWriter out, MappedInternalMarket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappedInternalMarket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MappedInternalMarket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MappedInternalMarket
  * @throws IOException if the JSON string is invalid with respect to MappedInternalMarket
  */
  public static MappedInternalMarket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappedInternalMarket.class);
  }

 /**
  * Convert an instance of MappedInternalMarket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

