/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * TotoBetItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TotoBetItem {
  public static final String SERIALIZED_NAME_BRAND_NAME = "BrandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_AFFILIATE_NAME = "AffiliateName";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_NAME)
  private String affiliateName;

  public static final String SERIALIZED_NAME_PLAYER_NAME = "PlayerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_BET_DATE = "BetDate";
  @SerializedName(SERIALIZED_NAME_BET_DATE)
  private OffsetDateTime betDate;

  public static final String SERIALIZED_NAME_STAKE = "Stake";
  @SerializedName(SERIALIZED_NAME_STAKE)
  private Double stake;

  public static final String SERIALIZED_NAME_WINNINGS = "Winnings";
  @SerializedName(SERIALIZED_NAME_WINNINGS)
  private Double winnings;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "EventCount";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private Integer eventCount;

  public static final String SERIALIZED_NAME_BET_STATUS = "BetStatus";
  @SerializedName(SERIALIZED_NAME_BET_STATUS)
  private Integer betStatus;

  public static final String SERIALIZED_NAME_CURRENCY_SIGN = "CurrencySign";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SIGN)
  private String currencySign;

  public static final String SERIALIZED_NAME_BET_ID = "BetId";
  @SerializedName(SERIALIZED_NAME_BET_ID)
  private Long betId;

  public TotoBetItem() {
  }

  public TotoBetItem brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * Get brandName
   * @return brandName
  **/
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public TotoBetItem brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public TotoBetItem affiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
    return this;
  }

   /**
   * Get affiliateName
   * @return affiliateName
  **/
  @javax.annotation.Nullable
  public String getAffiliateName() {
    return affiliateName;
  }

  public void setAffiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
  }


  public TotoBetItem playerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

   /**
   * Get playerName
   * @return playerName
  **/
  @javax.annotation.Nullable
  public String getPlayerName() {
    return playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }


  public TotoBetItem playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public TotoBetItem betDate(OffsetDateTime betDate) {
    this.betDate = betDate;
    return this;
  }

   /**
   * Get betDate
   * @return betDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBetDate() {
    return betDate;
  }

  public void setBetDate(OffsetDateTime betDate) {
    this.betDate = betDate;
  }


  public TotoBetItem stake(Double stake) {
    this.stake = stake;
    return this;
  }

   /**
   * Get stake
   * @return stake
  **/
  @javax.annotation.Nullable
  public Double getStake() {
    return stake;
  }

  public void setStake(Double stake) {
    this.stake = stake;
  }


  public TotoBetItem winnings(Double winnings) {
    this.winnings = winnings;
    return this;
  }

   /**
   * Get winnings
   * @return winnings
  **/
  @javax.annotation.Nullable
  public Double getWinnings() {
    return winnings;
  }

  public void setWinnings(Double winnings) {
    this.winnings = winnings;
  }


  public TotoBetItem eventCount(Integer eventCount) {
    this.eventCount = eventCount;
    return this;
  }

   /**
   * Get eventCount
   * @return eventCount
  **/
  @javax.annotation.Nullable
  public Integer getEventCount() {
    return eventCount;
  }

  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }


  public TotoBetItem betStatus(Integer betStatus) {
    this.betStatus = betStatus;
    return this;
  }

   /**
   * Get betStatus
   * @return betStatus
  **/
  @javax.annotation.Nullable
  public Integer getBetStatus() {
    return betStatus;
  }

  public void setBetStatus(Integer betStatus) {
    this.betStatus = betStatus;
  }


  public TotoBetItem currencySign(String currencySign) {
    this.currencySign = currencySign;
    return this;
  }

   /**
   * Get currencySign
   * @return currencySign
  **/
  @javax.annotation.Nullable
  public String getCurrencySign() {
    return currencySign;
  }

  public void setCurrencySign(String currencySign) {
    this.currencySign = currencySign;
  }


  public TotoBetItem betId(Long betId) {
    this.betId = betId;
    return this;
  }

   /**
   * Get betId
   * @return betId
  **/
  @javax.annotation.Nullable
  public Long getBetId() {
    return betId;
  }

  public void setBetId(Long betId) {
    this.betId = betId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotoBetItem totoBetItem = (TotoBetItem) o;
    return Objects.equals(this.brandName, totoBetItem.brandName) &&
        Objects.equals(this.brandId, totoBetItem.brandId) &&
        Objects.equals(this.affiliateName, totoBetItem.affiliateName) &&
        Objects.equals(this.playerName, totoBetItem.playerName) &&
        Objects.equals(this.playerId, totoBetItem.playerId) &&
        Objects.equals(this.betDate, totoBetItem.betDate) &&
        Objects.equals(this.stake, totoBetItem.stake) &&
        Objects.equals(this.winnings, totoBetItem.winnings) &&
        Objects.equals(this.eventCount, totoBetItem.eventCount) &&
        Objects.equals(this.betStatus, totoBetItem.betStatus) &&
        Objects.equals(this.currencySign, totoBetItem.currencySign) &&
        Objects.equals(this.betId, totoBetItem.betId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandName, brandId, affiliateName, playerName, playerId, betDate, stake, winnings, eventCount, betStatus, currencySign, betId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotoBetItem {\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    affiliateName: ").append(toIndentedString(affiliateName)).append("\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    betDate: ").append(toIndentedString(betDate)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    winnings: ").append(toIndentedString(winnings)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    betStatus: ").append(toIndentedString(betStatus)).append("\n");
    sb.append("    currencySign: ").append(toIndentedString(currencySign)).append("\n");
    sb.append("    betId: ").append(toIndentedString(betId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BrandName");
    openapiFields.add("BrandId");
    openapiFields.add("AffiliateName");
    openapiFields.add("PlayerName");
    openapiFields.add("PlayerId");
    openapiFields.add("BetDate");
    openapiFields.add("Stake");
    openapiFields.add("Winnings");
    openapiFields.add("EventCount");
    openapiFields.add("BetStatus");
    openapiFields.add("CurrencySign");
    openapiFields.add("BetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotoBetItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotoBetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotoBetItem is not found in the empty JSON string", TotoBetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotoBetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotoBetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BrandName") != null && !jsonObj.get("BrandName").isJsonNull()) && !jsonObj.get("BrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandName").toString()));
      }
      if ((jsonObj.get("AffiliateName") != null && !jsonObj.get("AffiliateName").isJsonNull()) && !jsonObj.get("AffiliateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffiliateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AffiliateName").toString()));
      }
      if ((jsonObj.get("PlayerName") != null && !jsonObj.get("PlayerName").isJsonNull()) && !jsonObj.get("PlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerName").toString()));
      }
      if ((jsonObj.get("CurrencySign") != null && !jsonObj.get("CurrencySign").isJsonNull()) && !jsonObj.get("CurrencySign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencySign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencySign").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotoBetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotoBetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotoBetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotoBetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TotoBetItem>() {
           @Override
           public void write(JsonWriter out, TotoBetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotoBetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotoBetItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotoBetItem
  * @throws IOException if the JSON string is invalid with respect to TotoBetItem
  */
  public static TotoBetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotoBetItem.class);
  }

 /**
  * Convert an instance of TotoBetItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

