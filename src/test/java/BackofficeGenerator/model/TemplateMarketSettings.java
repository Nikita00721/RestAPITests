/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * TemplateMarketSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TemplateMarketSettings {
  public static final String SERIALIZED_NAME_STAKE_LIMIT_FACTOR = "StakeLimitFactor";
  @SerializedName(SERIALIZED_NAME_STAKE_LIMIT_FACTOR)
  private Double stakeLimitFactor;

  public static final String SERIALIZED_NAME_DEFAULT_STAKE_LIMIT_FACTOR = "DefaultStakeLimitFactor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STAKE_LIMIT_FACTOR)
  private Double defaultStakeLimitFactor;

  public static final String SERIALIZED_NAME_NET_WIN_FACTOR = "NetWinFactor";
  @SerializedName(SERIALIZED_NAME_NET_WIN_FACTOR)
  private Double netWinFactor;

  public static final String SERIALIZED_NAME_DEFAULT_NET_WIN_FACTOR = "DefaultNetWinFactor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NET_WIN_FACTOR)
  private Double defaultNetWinFactor;

  public static final String SERIALIZED_NAME_IS_STAKE_LIMIT_INHERITED = "IsStakeLimitInherited";
  @SerializedName(SERIALIZED_NAME_IS_STAKE_LIMIT_INHERITED)
  private Boolean isStakeLimitInherited;

  public static final String SERIALIZED_NAME_IS_NET_WIN_LIMIT_INHERITED = "IsNetWinLimitInherited";
  @SerializedName(SERIALIZED_NAME_IS_NET_WIN_LIMIT_INHERITED)
  private Boolean isNetWinLimitInherited;

  public static final String SERIALIZED_NAME_MARGINS = "Margins";
  @SerializedName(SERIALIZED_NAME_MARGINS)
  private List<MarginHeaderItem> margins;

  public static final String SERIALIZED_NAME_RANGE_LIMIT = "RangeLimit";
  @SerializedName(SERIALIZED_NAME_RANGE_LIMIT)
  private Double rangeLimit;

  public TemplateMarketSettings() {
  }

  public TemplateMarketSettings stakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
    return this;
  }

   /**
   * Get stakeLimitFactor
   * @return stakeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getStakeLimitFactor() {
    return stakeLimitFactor;
  }

  public void setStakeLimitFactor(Double stakeLimitFactor) {
    this.stakeLimitFactor = stakeLimitFactor;
  }


  public TemplateMarketSettings defaultStakeLimitFactor(Double defaultStakeLimitFactor) {
    this.defaultStakeLimitFactor = defaultStakeLimitFactor;
    return this;
  }

   /**
   * Get defaultStakeLimitFactor
   * @return defaultStakeLimitFactor
  **/
  @javax.annotation.Nullable
  public Double getDefaultStakeLimitFactor() {
    return defaultStakeLimitFactor;
  }

  public void setDefaultStakeLimitFactor(Double defaultStakeLimitFactor) {
    this.defaultStakeLimitFactor = defaultStakeLimitFactor;
  }


  public TemplateMarketSettings netWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
    return this;
  }

   /**
   * Get netWinFactor
   * @return netWinFactor
  **/
  @javax.annotation.Nullable
  public Double getNetWinFactor() {
    return netWinFactor;
  }

  public void setNetWinFactor(Double netWinFactor) {
    this.netWinFactor = netWinFactor;
  }


  public TemplateMarketSettings defaultNetWinFactor(Double defaultNetWinFactor) {
    this.defaultNetWinFactor = defaultNetWinFactor;
    return this;
  }

   /**
   * Get defaultNetWinFactor
   * @return defaultNetWinFactor
  **/
  @javax.annotation.Nullable
  public Double getDefaultNetWinFactor() {
    return defaultNetWinFactor;
  }

  public void setDefaultNetWinFactor(Double defaultNetWinFactor) {
    this.defaultNetWinFactor = defaultNetWinFactor;
  }


  public TemplateMarketSettings isStakeLimitInherited(Boolean isStakeLimitInherited) {
    this.isStakeLimitInherited = isStakeLimitInherited;
    return this;
  }

   /**
   * Get isStakeLimitInherited
   * @return isStakeLimitInherited
  **/
  @javax.annotation.Nullable
  public Boolean getIsStakeLimitInherited() {
    return isStakeLimitInherited;
  }

  public void setIsStakeLimitInherited(Boolean isStakeLimitInherited) {
    this.isStakeLimitInherited = isStakeLimitInherited;
  }


  public TemplateMarketSettings isNetWinLimitInherited(Boolean isNetWinLimitInherited) {
    this.isNetWinLimitInherited = isNetWinLimitInherited;
    return this;
  }

   /**
   * Get isNetWinLimitInherited
   * @return isNetWinLimitInherited
  **/
  @javax.annotation.Nullable
  public Boolean getIsNetWinLimitInherited() {
    return isNetWinLimitInherited;
  }

  public void setIsNetWinLimitInherited(Boolean isNetWinLimitInherited) {
    this.isNetWinLimitInherited = isNetWinLimitInherited;
  }


  public TemplateMarketSettings margins(List<MarginHeaderItem> margins) {
    this.margins = margins;
    return this;
  }

  public TemplateMarketSettings addMarginsItem(MarginHeaderItem marginsItem) {
    if (this.margins == null) {
      this.margins = new ArrayList<>();
    }
    this.margins.add(marginsItem);
    return this;
  }

   /**
   * Get margins
   * @return margins
  **/
  @javax.annotation.Nullable
  public List<MarginHeaderItem> getMargins() {
    return margins;
  }

  public void setMargins(List<MarginHeaderItem> margins) {
    this.margins = margins;
  }


  public TemplateMarketSettings rangeLimit(Double rangeLimit) {
    this.rangeLimit = rangeLimit;
    return this;
  }

   /**
   * Get rangeLimit
   * @return rangeLimit
  **/
  @javax.annotation.Nullable
  public Double getRangeLimit() {
    return rangeLimit;
  }

  public void setRangeLimit(Double rangeLimit) {
    this.rangeLimit = rangeLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateMarketSettings templateMarketSettings = (TemplateMarketSettings) o;
    return Objects.equals(this.stakeLimitFactor, templateMarketSettings.stakeLimitFactor) &&
        Objects.equals(this.defaultStakeLimitFactor, templateMarketSettings.defaultStakeLimitFactor) &&
        Objects.equals(this.netWinFactor, templateMarketSettings.netWinFactor) &&
        Objects.equals(this.defaultNetWinFactor, templateMarketSettings.defaultNetWinFactor) &&
        Objects.equals(this.isStakeLimitInherited, templateMarketSettings.isStakeLimitInherited) &&
        Objects.equals(this.isNetWinLimitInherited, templateMarketSettings.isNetWinLimitInherited) &&
        Objects.equals(this.margins, templateMarketSettings.margins) &&
        Objects.equals(this.rangeLimit, templateMarketSettings.rangeLimit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(stakeLimitFactor, defaultStakeLimitFactor, netWinFactor, defaultNetWinFactor, isStakeLimitInherited, isNetWinLimitInherited, margins, rangeLimit);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateMarketSettings {\n");
    sb.append("    stakeLimitFactor: ").append(toIndentedString(stakeLimitFactor)).append("\n");
    sb.append("    defaultStakeLimitFactor: ").append(toIndentedString(defaultStakeLimitFactor)).append("\n");
    sb.append("    netWinFactor: ").append(toIndentedString(netWinFactor)).append("\n");
    sb.append("    defaultNetWinFactor: ").append(toIndentedString(defaultNetWinFactor)).append("\n");
    sb.append("    isStakeLimitInherited: ").append(toIndentedString(isStakeLimitInherited)).append("\n");
    sb.append("    isNetWinLimitInherited: ").append(toIndentedString(isNetWinLimitInherited)).append("\n");
    sb.append("    margins: ").append(toIndentedString(margins)).append("\n");
    sb.append("    rangeLimit: ").append(toIndentedString(rangeLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StakeLimitFactor");
    openapiFields.add("DefaultStakeLimitFactor");
    openapiFields.add("NetWinFactor");
    openapiFields.add("DefaultNetWinFactor");
    openapiFields.add("IsStakeLimitInherited");
    openapiFields.add("IsNetWinLimitInherited");
    openapiFields.add("Margins");
    openapiFields.add("RangeLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TemplateMarketSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateMarketSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateMarketSettings is not found in the empty JSON string", TemplateMarketSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplateMarketSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplateMarketSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Margins") != null && !jsonObj.get("Margins").isJsonNull()) {
        JsonArray jsonArraymargins = jsonObj.getAsJsonArray("Margins");
        if (jsonArraymargins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Margins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Margins` to be an array in the JSON string but got `%s`", jsonObj.get("Margins").toString()));
          }

          // validate the optional field `Margins` (array)
          for (int i = 0; i < jsonArraymargins.size(); i++) {
            MarginHeaderItem.validateJsonElement(jsonArraymargins.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateMarketSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateMarketSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateMarketSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateMarketSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateMarketSettings>() {
           @Override
           public void write(JsonWriter out, TemplateMarketSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateMarketSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TemplateMarketSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TemplateMarketSettings
  * @throws IOException if the JSON string is invalid with respect to TemplateMarketSettings
  */
  public static TemplateMarketSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateMarketSettings.class);
  }

 /**
  * Convert an instance of TemplateMarketSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

