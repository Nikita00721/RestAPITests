/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * Terminal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class Terminal {
  public static final String SERIALIZED_NAME_TERMINAL_NAME = "TerminalName";
  @SerializedName(SERIALIZED_NAME_TERMINAL_NAME)
  private String terminalName;

  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_EXT_USER_ID = "ExtUserId";
  @SerializedName(SERIALIZED_NAME_EXT_USER_ID)
  private Long extUserId;

  public static final String SERIALIZED_NAME_EXT_USER_NAME = "ExtUserName";
  @SerializedName(SERIALIZED_NAME_EXT_USER_NAME)
  private String extUserName;

  public static final String SERIALIZED_NAME_TERMINAL_VERSION = "TerminalVersion";
  @SerializedName(SERIALIZED_NAME_TERMINAL_VERSION)
  private String terminalVersion;

  public static final String SERIALIZED_NAME_TERMINAL_STATUS = "TerminalStatus";
  @SerializedName(SERIALIZED_NAME_TERMINAL_STATUS)
  private TerminalStatuses terminalStatus;

  public static final String SERIALIZED_NAME_TERMINAL_ID = "TerminalId";
  @SerializedName(SERIALIZED_NAME_TERMINAL_ID)
  private String terminalId;

  public Terminal() {
  }

  public Terminal terminalName(String terminalName) {
    this.terminalName = terminalName;
    return this;
  }

   /**
   * Get terminalName
   * @return terminalName
  **/
  @javax.annotation.Nullable
  public String getTerminalName() {
    return terminalName;
  }

  public void setTerminalName(String terminalName) {
    this.terminalName = terminalName;
  }


  public Terminal groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public Terminal groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * Get groupName
   * @return groupName
  **/
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public Terminal extUserId(Long extUserId) {
    this.extUserId = extUserId;
    return this;
  }

   /**
   * Get extUserId
   * @return extUserId
  **/
  @javax.annotation.Nullable
  public Long getExtUserId() {
    return extUserId;
  }

  public void setExtUserId(Long extUserId) {
    this.extUserId = extUserId;
  }


  public Terminal extUserName(String extUserName) {
    this.extUserName = extUserName;
    return this;
  }

   /**
   * Get extUserName
   * @return extUserName
  **/
  @javax.annotation.Nullable
  public String getExtUserName() {
    return extUserName;
  }

  public void setExtUserName(String extUserName) {
    this.extUserName = extUserName;
  }


  public Terminal terminalVersion(String terminalVersion) {
    this.terminalVersion = terminalVersion;
    return this;
  }

   /**
   * Get terminalVersion
   * @return terminalVersion
  **/
  @javax.annotation.Nullable
  public String getTerminalVersion() {
    return terminalVersion;
  }

  public void setTerminalVersion(String terminalVersion) {
    this.terminalVersion = terminalVersion;
  }


  public Terminal terminalStatus(TerminalStatuses terminalStatus) {
    this.terminalStatus = terminalStatus;
    return this;
  }

   /**
   * Get terminalStatus
   * @return terminalStatus
  **/
  @javax.annotation.Nullable
  public TerminalStatuses getTerminalStatus() {
    return terminalStatus;
  }

  public void setTerminalStatus(TerminalStatuses terminalStatus) {
    this.terminalStatus = terminalStatus;
  }


  public Terminal terminalId(String terminalId) {
    this.terminalId = terminalId;
    return this;
  }

   /**
   * Get terminalId
   * @return terminalId
  **/
  @javax.annotation.Nullable
  public String getTerminalId() {
    return terminalId;
  }

  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Terminal terminal = (Terminal) o;
    return Objects.equals(this.terminalName, terminal.terminalName) &&
        Objects.equals(this.groupId, terminal.groupId) &&
        Objects.equals(this.groupName, terminal.groupName) &&
        Objects.equals(this.extUserId, terminal.extUserId) &&
        Objects.equals(this.extUserName, terminal.extUserName) &&
        Objects.equals(this.terminalVersion, terminal.terminalVersion) &&
        Objects.equals(this.terminalStatus, terminal.terminalStatus) &&
        Objects.equals(this.terminalId, terminal.terminalId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(terminalName, groupId, groupName, extUserId, extUserName, terminalVersion, terminalStatus, terminalId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Terminal {\n");
    sb.append("    terminalName: ").append(toIndentedString(terminalName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    extUserId: ").append(toIndentedString(extUserId)).append("\n");
    sb.append("    extUserName: ").append(toIndentedString(extUserName)).append("\n");
    sb.append("    terminalVersion: ").append(toIndentedString(terminalVersion)).append("\n");
    sb.append("    terminalStatus: ").append(toIndentedString(terminalStatus)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TerminalName");
    openapiFields.add("GroupId");
    openapiFields.add("GroupName");
    openapiFields.add("ExtUserId");
    openapiFields.add("ExtUserName");
    openapiFields.add("TerminalVersion");
    openapiFields.add("TerminalStatus");
    openapiFields.add("TerminalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Terminal
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Terminal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Terminal is not found in the empty JSON string", Terminal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Terminal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Terminal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TerminalName") != null && !jsonObj.get("TerminalName").isJsonNull()) && !jsonObj.get("TerminalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminalName").toString()));
      }
      if ((jsonObj.get("GroupName") != null && !jsonObj.get("GroupName").isJsonNull()) && !jsonObj.get("GroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupName").toString()));
      }
      if ((jsonObj.get("ExtUserName") != null && !jsonObj.get("ExtUserName").isJsonNull()) && !jsonObj.get("ExtUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtUserName").toString()));
      }
      if ((jsonObj.get("TerminalVersion") != null && !jsonObj.get("TerminalVersion").isJsonNull()) && !jsonObj.get("TerminalVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminalVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminalVersion").toString()));
      }
      // validate the optional field `TerminalStatus`
      if (jsonObj.get("TerminalStatus") != null && !jsonObj.get("TerminalStatus").isJsonNull()) {
        TerminalStatuses.validateJsonElement(jsonObj.get("TerminalStatus"));
      }
      if ((jsonObj.get("TerminalId") != null && !jsonObj.get("TerminalId").isJsonNull()) && !jsonObj.get("TerminalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Terminal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Terminal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Terminal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Terminal.class));

       return (TypeAdapter<T>) new TypeAdapter<Terminal>() {
           @Override
           public void write(JsonWriter out, Terminal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Terminal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Terminal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Terminal
  * @throws IOException if the JSON string is invalid with respect to Terminal
  */
  public static Terminal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Terminal.class);
  }

 /**
  * Convert an instance of Terminal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

