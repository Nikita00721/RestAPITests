/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * FeedManagerConfigItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class FeedManagerConfigItem {
  public static final String SERIALIZED_NAME_PARENT_CONFIG_ID = "ParentConfigId";
  @SerializedName(SERIALIZED_NAME_PARENT_CONFIG_ID)
  private Integer parentConfigId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "AccessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypes accessType;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "IsDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<BrandName> brands;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_IS_READ_ONLY = "IsReadOnly";
  @SerializedName(SERIALIZED_NAME_IS_READ_ONLY)
  private Boolean isReadOnly;

  public static final String SERIALIZED_NAME_CONFIG_ID = "ConfigId";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private Integer configId;

  public FeedManagerConfigItem() {
  }

  public FeedManagerConfigItem parentConfigId(Integer parentConfigId) {
    this.parentConfigId = parentConfigId;
    return this;
  }

   /**
   * Get parentConfigId
   * @return parentConfigId
  **/
  @javax.annotation.Nullable
  public Integer getParentConfigId() {
    return parentConfigId;
  }

  public void setParentConfigId(Integer parentConfigId) {
    this.parentConfigId = parentConfigId;
  }


  public FeedManagerConfigItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FeedManagerConfigItem accessType(AccessTypes accessType) {
    this.accessType = accessType;
    return this;
  }

   /**
   * Get accessType
   * @return accessType
  **/
  @javax.annotation.Nullable
  public AccessTypes getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypes accessType) {
    this.accessType = accessType;
  }


  public FeedManagerConfigItem isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Get isDefault
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public FeedManagerConfigItem brands(List<BrandName> brands) {
    this.brands = brands;
    return this;
  }

  public FeedManagerConfigItem addBrandsItem(BrandName brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

   /**
   * Get brands
   * @return brands
  **/
  @javax.annotation.Nullable
  public List<BrandName> getBrands() {
    return brands;
  }

  public void setBrands(List<BrandName> brands) {
    this.brands = brands;
  }


  public FeedManagerConfigItem createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public FeedManagerConfigItem isReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    return this;
  }

   /**
   * Get isReadOnly
   * @return isReadOnly
  **/
  @javax.annotation.Nullable
  public Boolean getIsReadOnly() {
    return isReadOnly;
  }

  public void setIsReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
  }


  public FeedManagerConfigItem configId(Integer configId) {
    this.configId = configId;
    return this;
  }

   /**
   * Get configId
   * @return configId
  **/
  @javax.annotation.Nullable
  public Integer getConfigId() {
    return configId;
  }

  public void setConfigId(Integer configId) {
    this.configId = configId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedManagerConfigItem feedManagerConfigItem = (FeedManagerConfigItem) o;
    return Objects.equals(this.parentConfigId, feedManagerConfigItem.parentConfigId) &&
        Objects.equals(this.name, feedManagerConfigItem.name) &&
        Objects.equals(this.accessType, feedManagerConfigItem.accessType) &&
        Objects.equals(this.isDefault, feedManagerConfigItem.isDefault) &&
        Objects.equals(this.brands, feedManagerConfigItem.brands) &&
        Objects.equals(this.createdDate, feedManagerConfigItem.createdDate) &&
        Objects.equals(this.isReadOnly, feedManagerConfigItem.isReadOnly) &&
        Objects.equals(this.configId, feedManagerConfigItem.configId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentConfigId, name, accessType, isDefault, brands, createdDate, isReadOnly, configId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedManagerConfigItem {\n");
    sb.append("    parentConfigId: ").append(toIndentedString(parentConfigId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParentConfigId");
    openapiFields.add("Name");
    openapiFields.add("AccessType");
    openapiFields.add("IsDefault");
    openapiFields.add("Brands");
    openapiFields.add("CreatedDate");
    openapiFields.add("IsReadOnly");
    openapiFields.add("ConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeedManagerConfigItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedManagerConfigItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedManagerConfigItem is not found in the empty JSON string", FeedManagerConfigItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedManagerConfigItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedManagerConfigItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `AccessType`
      if (jsonObj.get("AccessType") != null && !jsonObj.get("AccessType").isJsonNull()) {
        AccessTypes.validateJsonElement(jsonObj.get("AccessType"));
      }
      if (jsonObj.get("Brands") != null && !jsonObj.get("Brands").isJsonNull()) {
        JsonArray jsonArraybrands = jsonObj.getAsJsonArray("Brands");
        if (jsonArraybrands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Brands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Brands` to be an array in the JSON string but got `%s`", jsonObj.get("Brands").toString()));
          }

          // validate the optional field `Brands` (array)
          for (int i = 0; i < jsonArraybrands.size(); i++) {
            BrandName.validateJsonElement(jsonArraybrands.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedManagerConfigItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedManagerConfigItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedManagerConfigItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedManagerConfigItem.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedManagerConfigItem>() {
           @Override
           public void write(JsonWriter out, FeedManagerConfigItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedManagerConfigItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedManagerConfigItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedManagerConfigItem
  * @throws IOException if the JSON string is invalid with respect to FeedManagerConfigItem
  */
  public static FeedManagerConfigItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedManagerConfigItem.class);
  }

 /**
  * Convert an instance of FeedManagerConfigItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

