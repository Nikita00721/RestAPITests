/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GetCompetitorsReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetCompetitorsReportRequest {
  public static final String SERIALIZED_NAME_CATEGORY_IDS = "CategoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<Integer> categoryIds;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_IDS = "ChampionshipIds";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_IDS)
  private List<Integer> championshipIds;

  public static final String SERIALIZED_NAME_U18 = "U18";
  @SerializedName(SERIALIZED_NAME_U18)
  private Boolean U18;

  public static final String SERIALIZED_NAME_NO_JERSEY = "NoJersey";
  @SerializedName(SERIALIZED_NAME_NO_JERSEY)
  private Boolean noJersey;

  public static final String SERIALIZED_NAME_NO_BIRTHDATE = "NoBirthdate";
  @SerializedName(SERIALIZED_NAME_NO_BIRTHDATE)
  private Boolean noBirthdate;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_BIRTHDATE_FROM = "BirthdateFrom";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_FROM)
  private OffsetDateTime birthdateFrom;

  public static final String SERIALIZED_NAME_BIRTHDATE_TO = "BirthdateTo";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_TO)
  private OffsetDateTime birthdateTo;

  public static final String SERIALIZED_NAME_STATUSES = "Statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<Integer> statuses;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_SPORT_IDS = "SportIds";
  @SerializedName(SERIALIZED_NAME_SPORT_IDS)
  private List<Integer> sportIds;

  public GetCompetitorsReportRequest() {
  }

  public GetCompetitorsReportRequest categoryIds(List<Integer> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public GetCompetitorsReportRequest addCategoryIdsItem(Integer categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

   /**
   * Get categoryIds
   * @return categoryIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<Integer> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public GetCompetitorsReportRequest championshipIds(List<Integer> championshipIds) {
    this.championshipIds = championshipIds;
    return this;
  }

  public GetCompetitorsReportRequest addChampionshipIdsItem(Integer championshipIdsItem) {
    if (this.championshipIds == null) {
      this.championshipIds = new ArrayList<>();
    }
    this.championshipIds.add(championshipIdsItem);
    return this;
  }

   /**
   * Get championshipIds
   * @return championshipIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getChampionshipIds() {
    return championshipIds;
  }

  public void setChampionshipIds(List<Integer> championshipIds) {
    this.championshipIds = championshipIds;
  }


  public GetCompetitorsReportRequest U18(Boolean U18) {
    this.U18 = U18;
    return this;
  }

   /**
   * Get U18
   * @return U18
  **/
  @javax.annotation.Nullable
  public Boolean getU18() {
    return U18;
  }

  public void setU18(Boolean U18) {
    this.U18 = U18;
  }


  public GetCompetitorsReportRequest noJersey(Boolean noJersey) {
    this.noJersey = noJersey;
    return this;
  }

   /**
   * Get noJersey
   * @return noJersey
  **/
  @javax.annotation.Nullable
  public Boolean getNoJersey() {
    return noJersey;
  }

  public void setNoJersey(Boolean noJersey) {
    this.noJersey = noJersey;
  }


  public GetCompetitorsReportRequest noBirthdate(Boolean noBirthdate) {
    this.noBirthdate = noBirthdate;
    return this;
  }

   /**
   * Get noBirthdate
   * @return noBirthdate
  **/
  @javax.annotation.Nullable
  public Boolean getNoBirthdate() {
    return noBirthdate;
  }

  public void setNoBirthdate(Boolean noBirthdate) {
    this.noBirthdate = noBirthdate;
  }


  public GetCompetitorsReportRequest id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetCompetitorsReportRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetCompetitorsReportRequest sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public GetCompetitorsReportRequest birthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
    return this;
  }

   /**
   * Get birthdateFrom
   * @return birthdateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateFrom() {
    return birthdateFrom;
  }

  public void setBirthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
  }


  public GetCompetitorsReportRequest birthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
    return this;
  }

   /**
   * Get birthdateTo
   * @return birthdateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateTo() {
    return birthdateTo;
  }

  public void setBirthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
  }


  public GetCompetitorsReportRequest statuses(List<Integer> statuses) {
    this.statuses = statuses;
    return this;
  }

  public GetCompetitorsReportRequest addStatusesItem(Integer statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  public List<Integer> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<Integer> statuses) {
    this.statuses = statuses;
  }


  public GetCompetitorsReportRequest countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GetCompetitorsReportRequest sportIds(List<Integer> sportIds) {
    this.sportIds = sportIds;
    return this;
  }

  public GetCompetitorsReportRequest addSportIdsItem(Integer sportIdsItem) {
    if (this.sportIds == null) {
      this.sportIds = new ArrayList<>();
    }
    this.sportIds.add(sportIdsItem);
    return this;
  }

   /**
   * Get sportIds
   * @return sportIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportIds() {
    return sportIds;
  }

  public void setSportIds(List<Integer> sportIds) {
    this.sportIds = sportIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCompetitorsReportRequest getCompetitorsReportRequest = (GetCompetitorsReportRequest) o;
    return Objects.equals(this.categoryIds, getCompetitorsReportRequest.categoryIds) &&
        Objects.equals(this.championshipIds, getCompetitorsReportRequest.championshipIds) &&
        Objects.equals(this.U18, getCompetitorsReportRequest.U18) &&
        Objects.equals(this.noJersey, getCompetitorsReportRequest.noJersey) &&
        Objects.equals(this.noBirthdate, getCompetitorsReportRequest.noBirthdate) &&
        Objects.equals(this.id, getCompetitorsReportRequest.id) &&
        Objects.equals(this.name, getCompetitorsReportRequest.name) &&
        Objects.equals(this.sportName, getCompetitorsReportRequest.sportName) &&
        Objects.equals(this.birthdateFrom, getCompetitorsReportRequest.birthdateFrom) &&
        Objects.equals(this.birthdateTo, getCompetitorsReportRequest.birthdateTo) &&
        Objects.equals(this.statuses, getCompetitorsReportRequest.statuses) &&
        Objects.equals(this.countryCode, getCompetitorsReportRequest.countryCode) &&
        Objects.equals(this.sportIds, getCompetitorsReportRequest.sportIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryIds, championshipIds, U18, noJersey, noBirthdate, id, name, sportName, birthdateFrom, birthdateTo, statuses, countryCode, sportIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCompetitorsReportRequest {\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    championshipIds: ").append(toIndentedString(championshipIds)).append("\n");
    sb.append("    U18: ").append(toIndentedString(U18)).append("\n");
    sb.append("    noJersey: ").append(toIndentedString(noJersey)).append("\n");
    sb.append("    noBirthdate: ").append(toIndentedString(noBirthdate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    birthdateFrom: ").append(toIndentedString(birthdateFrom)).append("\n");
    sb.append("    birthdateTo: ").append(toIndentedString(birthdateTo)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    sportIds: ").append(toIndentedString(sportIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoryIds");
    openapiFields.add("ChampionshipIds");
    openapiFields.add("U18");
    openapiFields.add("NoJersey");
    openapiFields.add("NoBirthdate");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("SportName");
    openapiFields.add("BirthdateFrom");
    openapiFields.add("BirthdateTo");
    openapiFields.add("Statuses");
    openapiFields.add("CountryCode");
    openapiFields.add("SportIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetCompetitorsReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCompetitorsReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCompetitorsReportRequest is not found in the empty JSON string", GetCompetitorsReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCompetitorsReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCompetitorsReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoryIds") != null && !jsonObj.get("CategoryIds").isJsonNull() && !jsonObj.get("CategoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("CategoryIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ChampionshipIds") != null && !jsonObj.get("ChampionshipIds").isJsonNull() && !jsonObj.get("ChampionshipIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipIds` to be an array in the JSON string but got `%s`", jsonObj.get("ChampionshipIds").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Statuses") != null && !jsonObj.get("Statuses").isJsonNull() && !jsonObj.get("Statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statuses` to be an array in the JSON string but got `%s`", jsonObj.get("Statuses").toString()));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportIds") != null && !jsonObj.get("SportIds").isJsonNull() && !jsonObj.get("SportIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCompetitorsReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCompetitorsReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCompetitorsReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCompetitorsReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCompetitorsReportRequest>() {
           @Override
           public void write(JsonWriter out, GetCompetitorsReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCompetitorsReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetCompetitorsReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetCompetitorsReportRequest
  * @throws IOException if the JSON string is invalid with respect to GetCompetitorsReportRequest
  */
  public static GetCompetitorsReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCompetitorsReportRequest.class);
  }

 /**
  * Convert an instance of GetCompetitorsReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

