/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * SearchTotoEventsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SearchTotoEventsRequest {
  public static final String SERIALIZED_NAME_SEARCH_STRING = "SearchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_LOTTERY_TYPE = "LotteryType";
  @SerializedName(SERIALIZED_NAME_LOTTERY_TYPE)
  private TotoType lotteryType;

  public SearchTotoEventsRequest() {
  }

  public SearchTotoEventsRequest searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public SearchTotoEventsRequest sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public SearchTotoEventsRequest lotteryType(TotoType lotteryType) {
    this.lotteryType = lotteryType;
    return this;
  }

   /**
   * Get lotteryType
   * @return lotteryType
  **/
  @javax.annotation.Nullable
  public TotoType getLotteryType() {
    return lotteryType;
  }

  public void setLotteryType(TotoType lotteryType) {
    this.lotteryType = lotteryType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchTotoEventsRequest searchTotoEventsRequest = (SearchTotoEventsRequest) o;
    return Objects.equals(this.searchString, searchTotoEventsRequest.searchString) &&
        Objects.equals(this.sportId, searchTotoEventsRequest.sportId) &&
        Objects.equals(this.lotteryType, searchTotoEventsRequest.lotteryType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchString, sportId, lotteryType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchTotoEventsRequest {\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    lotteryType: ").append(toIndentedString(lotteryType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SearchString");
    openapiFields.add("SportId");
    openapiFields.add("LotteryType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchTotoEventsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchTotoEventsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchTotoEventsRequest is not found in the empty JSON string", SearchTotoEventsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchTotoEventsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchTotoEventsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SearchString") != null && !jsonObj.get("SearchString").isJsonNull()) && !jsonObj.get("SearchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchString").toString()));
      }
      // validate the optional field `LotteryType`
      if (jsonObj.get("LotteryType") != null && !jsonObj.get("LotteryType").isJsonNull()) {
        TotoType.validateJsonElement(jsonObj.get("LotteryType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchTotoEventsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchTotoEventsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchTotoEventsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchTotoEventsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchTotoEventsRequest>() {
           @Override
           public void write(JsonWriter out, SearchTotoEventsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchTotoEventsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchTotoEventsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchTotoEventsRequest
  * @throws IOException if the JSON string is invalid with respect to SearchTotoEventsRequest
  */
  public static SearchTotoEventsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchTotoEventsRequest.class);
  }

 /**
  * Convert an instance of SearchTotoEventsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

