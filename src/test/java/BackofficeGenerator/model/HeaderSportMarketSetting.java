/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * HeaderSportMarketSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class HeaderSportMarketSetting {
  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private Integer marketTypeId;

  public static final String SERIALIZED_NAME_MARKET_TYPE_NAME = "MarketTypeName";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_NAME)
  private String marketTypeName;

  public static final String SERIALIZED_NAME_IS_HEADER = "IsHeader";
  @SerializedName(SERIALIZED_NAME_IS_HEADER)
  private Boolean isHeader;

  public static final String SERIALIZED_NAME_HEADER_TYPE = "HeaderType";
  @SerializedName(SERIALIZED_NAME_HEADER_TYPE)
  private HeaderTypes headerType;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_TYPE_ID = "SpecialOddsTypeId";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_TYPE_ID)
  private Integer specialOddsTypeId;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_VALUE = "SpecialOddsValue";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_VALUE)
  private Map<String, String> specialOddsValue;

  public static final String SERIALIZED_NAME_SHOW_HEADER_COLUMN_NAMES = "ShowHeaderColumnNames";
  @SerializedName(SERIALIZED_NAME_SHOW_HEADER_COLUMN_NAMES)
  private Boolean showHeaderColumnNames;

  public static final String SERIALIZED_NAME_IS_ENABLED_LIVE = "IsEnabledLive";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED_LIVE)
  private Boolean isEnabledLive;

  public static final String SERIALIZED_NAME_IS_ENABLED_PRELIVE = "IsEnabledPrelive";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED_PRELIVE)
  private Boolean isEnabledPrelive;

  public static final String SERIALIZED_NAME_SPORT_MARKET_ID = "SportMarketId";
  @SerializedName(SERIALIZED_NAME_SPORT_MARKET_ID)
  private Integer sportMarketId;

  public HeaderSportMarketSetting() {
  }

  public HeaderSportMarketSetting marketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
  }


  public HeaderSportMarketSetting marketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
    return this;
  }

   /**
   * Get marketTypeName
   * @return marketTypeName
  **/
  @javax.annotation.Nullable
  public String getMarketTypeName() {
    return marketTypeName;
  }

  public void setMarketTypeName(String marketTypeName) {
    this.marketTypeName = marketTypeName;
  }


  public HeaderSportMarketSetting isHeader(Boolean isHeader) {
    this.isHeader = isHeader;
    return this;
  }

   /**
   * Get isHeader
   * @return isHeader
  **/
  @javax.annotation.Nullable
  public Boolean getIsHeader() {
    return isHeader;
  }

  public void setIsHeader(Boolean isHeader) {
    this.isHeader = isHeader;
  }


  public HeaderSportMarketSetting headerType(HeaderTypes headerType) {
    this.headerType = headerType;
    return this;
  }

   /**
   * Get headerType
   * @return headerType
  **/
  @javax.annotation.Nullable
  public HeaderTypes getHeaderType() {
    return headerType;
  }

  public void setHeaderType(HeaderTypes headerType) {
    this.headerType = headerType;
  }


  public HeaderSportMarketSetting specialOddsTypeId(Integer specialOddsTypeId) {
    this.specialOddsTypeId = specialOddsTypeId;
    return this;
  }

   /**
   * Get specialOddsTypeId
   * @return specialOddsTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSpecialOddsTypeId() {
    return specialOddsTypeId;
  }

  public void setSpecialOddsTypeId(Integer specialOddsTypeId) {
    this.specialOddsTypeId = specialOddsTypeId;
  }


  public HeaderSportMarketSetting specialOddsValue(Map<String, String> specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
    return this;
  }

  public HeaderSportMarketSetting putSpecialOddsValueItem(String key, String specialOddsValueItem) {
    if (this.specialOddsValue == null) {
      this.specialOddsValue = new HashMap<>();
    }
    this.specialOddsValue.put(key, specialOddsValueItem);
    return this;
  }

   /**
   * Get specialOddsValue
   * @return specialOddsValue
  **/
  @javax.annotation.Nullable
  public Map<String, String> getSpecialOddsValue() {
    return specialOddsValue;
  }

  public void setSpecialOddsValue(Map<String, String> specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
  }


  public HeaderSportMarketSetting showHeaderColumnNames(Boolean showHeaderColumnNames) {
    this.showHeaderColumnNames = showHeaderColumnNames;
    return this;
  }

   /**
   * Get showHeaderColumnNames
   * @return showHeaderColumnNames
  **/
  @javax.annotation.Nullable
  public Boolean getShowHeaderColumnNames() {
    return showHeaderColumnNames;
  }

  public void setShowHeaderColumnNames(Boolean showHeaderColumnNames) {
    this.showHeaderColumnNames = showHeaderColumnNames;
  }


  public HeaderSportMarketSetting isEnabledLive(Boolean isEnabledLive) {
    this.isEnabledLive = isEnabledLive;
    return this;
  }

   /**
   * Get isEnabledLive
   * @return isEnabledLive
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabledLive() {
    return isEnabledLive;
  }

  public void setIsEnabledLive(Boolean isEnabledLive) {
    this.isEnabledLive = isEnabledLive;
  }


  public HeaderSportMarketSetting isEnabledPrelive(Boolean isEnabledPrelive) {
    this.isEnabledPrelive = isEnabledPrelive;
    return this;
  }

   /**
   * Get isEnabledPrelive
   * @return isEnabledPrelive
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnabledPrelive() {
    return isEnabledPrelive;
  }

  public void setIsEnabledPrelive(Boolean isEnabledPrelive) {
    this.isEnabledPrelive = isEnabledPrelive;
  }


  public HeaderSportMarketSetting sportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
    return this;
  }

   /**
   * Get sportMarketId
   * @return sportMarketId
  **/
  @javax.annotation.Nullable
  public Integer getSportMarketId() {
    return sportMarketId;
  }

  public void setSportMarketId(Integer sportMarketId) {
    this.sportMarketId = sportMarketId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeaderSportMarketSetting headerSportMarketSetting = (HeaderSportMarketSetting) o;
    return Objects.equals(this.marketTypeId, headerSportMarketSetting.marketTypeId) &&
        Objects.equals(this.marketTypeName, headerSportMarketSetting.marketTypeName) &&
        Objects.equals(this.isHeader, headerSportMarketSetting.isHeader) &&
        Objects.equals(this.headerType, headerSportMarketSetting.headerType) &&
        Objects.equals(this.specialOddsTypeId, headerSportMarketSetting.specialOddsTypeId) &&
        Objects.equals(this.specialOddsValue, headerSportMarketSetting.specialOddsValue) &&
        Objects.equals(this.showHeaderColumnNames, headerSportMarketSetting.showHeaderColumnNames) &&
        Objects.equals(this.isEnabledLive, headerSportMarketSetting.isEnabledLive) &&
        Objects.equals(this.isEnabledPrelive, headerSportMarketSetting.isEnabledPrelive) &&
        Objects.equals(this.sportMarketId, headerSportMarketSetting.sportMarketId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketTypeId, marketTypeName, isHeader, headerType, specialOddsTypeId, specialOddsValue, showHeaderColumnNames, isEnabledLive, isEnabledPrelive, sportMarketId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HeaderSportMarketSetting {\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("    marketTypeName: ").append(toIndentedString(marketTypeName)).append("\n");
    sb.append("    isHeader: ").append(toIndentedString(isHeader)).append("\n");
    sb.append("    headerType: ").append(toIndentedString(headerType)).append("\n");
    sb.append("    specialOddsTypeId: ").append(toIndentedString(specialOddsTypeId)).append("\n");
    sb.append("    specialOddsValue: ").append(toIndentedString(specialOddsValue)).append("\n");
    sb.append("    showHeaderColumnNames: ").append(toIndentedString(showHeaderColumnNames)).append("\n");
    sb.append("    isEnabledLive: ").append(toIndentedString(isEnabledLive)).append("\n");
    sb.append("    isEnabledPrelive: ").append(toIndentedString(isEnabledPrelive)).append("\n");
    sb.append("    sportMarketId: ").append(toIndentedString(sportMarketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MarketTypeId");
    openapiFields.add("MarketTypeName");
    openapiFields.add("IsHeader");
    openapiFields.add("HeaderType");
    openapiFields.add("SpecialOddsTypeId");
    openapiFields.add("SpecialOddsValue");
    openapiFields.add("ShowHeaderColumnNames");
    openapiFields.add("IsEnabledLive");
    openapiFields.add("IsEnabledPrelive");
    openapiFields.add("SportMarketId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HeaderSportMarketSetting
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HeaderSportMarketSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HeaderSportMarketSetting is not found in the empty JSON string", HeaderSportMarketSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HeaderSportMarketSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HeaderSportMarketSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("MarketTypeName") != null && !jsonObj.get("MarketTypeName").isJsonNull()) && !jsonObj.get("MarketTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketTypeName").toString()));
      }
      // validate the optional field `HeaderType`
      if (jsonObj.get("HeaderType") != null && !jsonObj.get("HeaderType").isJsonNull()) {
        HeaderTypes.validateJsonElement(jsonObj.get("HeaderType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HeaderSportMarketSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HeaderSportMarketSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HeaderSportMarketSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HeaderSportMarketSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<HeaderSportMarketSetting>() {
           @Override
           public void write(JsonWriter out, HeaderSportMarketSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HeaderSportMarketSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HeaderSportMarketSetting given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HeaderSportMarketSetting
  * @throws IOException if the JSON string is invalid with respect to HeaderSportMarketSetting
  */
  public static HeaderSportMarketSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HeaderSportMarketSetting.class);
  }

 /**
  * Convert an instance of HeaderSportMarketSetting to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

