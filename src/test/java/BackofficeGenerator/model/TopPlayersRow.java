/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * TopPlayersRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TopPlayersRow {
  public static final String SERIALIZED_NAME_PLAYER_NAME = "PlayerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public static final String SERIALIZED_NAME_PLAYER_COLOR = "PlayerColor";
  @SerializedName(SERIALIZED_NAME_PLAYER_COLOR)
  private String playerColor;

  public static final String SERIALIZED_NAME_PLAYER_COUNTRY = "PlayerCountry";
  @SerializedName(SERIALIZED_NAME_PLAYER_COUNTRY)
  private String playerCountry;

  public static final String SERIALIZED_NAME_AFFILIATE_ID = "AffiliateId";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_ID)
  private Integer affiliateId;

  public static final String SERIALIZED_NAME_AFFILIATE_NAME = "AffiliateName";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_NAME)
  private String affiliateName;

  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_BRAND_NAME = "BrandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_LICENSE_ID = "LicenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private Integer licenseId;

  public static final String SERIALIZED_NAME_LICENSE_NAME = "LicenseName";
  @SerializedName(SERIALIZED_NAME_LICENSE_NAME)
  private String licenseName;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "CurrencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Integer currencyId;

  public static final String SERIALIZED_NAME_CURRENCY_SIGN = "CurrencySign";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SIGN)
  private String currencySign;

  public static final String SERIALIZED_NAME_CURRENCY_SHORT_NAME = "CurrencyShortName";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SHORT_NAME)
  private String currencyShortName;

  public static final String SERIALIZED_NAME_NO_OF_BETS = "NoOfBets";
  @SerializedName(SERIALIZED_NAME_NO_OF_BETS)
  private Integer noOfBets;

  public static final String SERIALIZED_NAME_AVG_STAKE = "AvgStake";
  @SerializedName(SERIALIZED_NAME_AVG_STAKE)
  private Double avgStake;

  public static final String SERIALIZED_NAME_STAKES = "Stakes";
  @SerializedName(SERIALIZED_NAME_STAKES)
  private Double stakes;

  public static final String SERIALIZED_NAME_WINNINGS = "Winnings";
  @SerializedName(SERIALIZED_NAME_WINNINGS)
  private Double winnings;

  public static final String SERIALIZED_NAME_MARGIN = "Margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private Double margin;

  public static final String SERIALIZED_NAME_LOSS = "Loss";
  @SerializedName(SERIALIZED_NAME_LOSS)
  private Double loss;

  public static final String SERIALIZED_NAME_PROFIT = "Profit";
  @SerializedName(SERIALIZED_NAME_PROFIT)
  private Double profit;

  public static final String SERIALIZED_NAME_PLAYER_EXT_ID = "PlayerExtId";
  @SerializedName(SERIALIZED_NAME_PLAYER_EXT_ID)
  private String playerExtId;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public TopPlayersRow() {
  }

  public TopPlayersRow playerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

   /**
   * Get playerName
   * @return playerName
  **/
  @javax.annotation.Nullable
  public String getPlayerName() {
    return playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }


  public TopPlayersRow playerColor(String playerColor) {
    this.playerColor = playerColor;
    return this;
  }

   /**
   * Get playerColor
   * @return playerColor
  **/
  @javax.annotation.Nullable
  public String getPlayerColor() {
    return playerColor;
  }

  public void setPlayerColor(String playerColor) {
    this.playerColor = playerColor;
  }


  public TopPlayersRow playerCountry(String playerCountry) {
    this.playerCountry = playerCountry;
    return this;
  }

   /**
   * Get playerCountry
   * @return playerCountry
  **/
  @javax.annotation.Nullable
  public String getPlayerCountry() {
    return playerCountry;
  }

  public void setPlayerCountry(String playerCountry) {
    this.playerCountry = playerCountry;
  }


  public TopPlayersRow affiliateId(Integer affiliateId) {
    this.affiliateId = affiliateId;
    return this;
  }

   /**
   * Get affiliateId
   * @return affiliateId
  **/
  @javax.annotation.Nullable
  public Integer getAffiliateId() {
    return affiliateId;
  }

  public void setAffiliateId(Integer affiliateId) {
    this.affiliateId = affiliateId;
  }


  public TopPlayersRow affiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
    return this;
  }

   /**
   * Get affiliateName
   * @return affiliateName
  **/
  @javax.annotation.Nullable
  public String getAffiliateName() {
    return affiliateName;
  }

  public void setAffiliateName(String affiliateName) {
    this.affiliateName = affiliateName;
  }


  public TopPlayersRow brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public TopPlayersRow brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * Get brandName
   * @return brandName
  **/
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public TopPlayersRow licenseId(Integer licenseId) {
    this.licenseId = licenseId;
    return this;
  }

   /**
   * Get licenseId
   * @return licenseId
  **/
  @javax.annotation.Nullable
  public Integer getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(Integer licenseId) {
    this.licenseId = licenseId;
  }


  public TopPlayersRow licenseName(String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

   /**
   * Get licenseName
   * @return licenseName
  **/
  @javax.annotation.Nullable
  public String getLicenseName() {
    return licenseName;
  }

  public void setLicenseName(String licenseName) {
    this.licenseName = licenseName;
  }


  public TopPlayersRow currencyId(Integer currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Get currencyId
   * @return currencyId
  **/
  @javax.annotation.Nullable
  public Integer getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }


  public TopPlayersRow currencySign(String currencySign) {
    this.currencySign = currencySign;
    return this;
  }

   /**
   * Get currencySign
   * @return currencySign
  **/
  @javax.annotation.Nullable
  public String getCurrencySign() {
    return currencySign;
  }

  public void setCurrencySign(String currencySign) {
    this.currencySign = currencySign;
  }


  public TopPlayersRow currencyShortName(String currencyShortName) {
    this.currencyShortName = currencyShortName;
    return this;
  }

   /**
   * Get currencyShortName
   * @return currencyShortName
  **/
  @javax.annotation.Nullable
  public String getCurrencyShortName() {
    return currencyShortName;
  }

  public void setCurrencyShortName(String currencyShortName) {
    this.currencyShortName = currencyShortName;
  }


  public TopPlayersRow noOfBets(Integer noOfBets) {
    this.noOfBets = noOfBets;
    return this;
  }

   /**
   * Get noOfBets
   * @return noOfBets
  **/
  @javax.annotation.Nullable
  public Integer getNoOfBets() {
    return noOfBets;
  }

  public void setNoOfBets(Integer noOfBets) {
    this.noOfBets = noOfBets;
  }


  public TopPlayersRow avgStake(Double avgStake) {
    this.avgStake = avgStake;
    return this;
  }

   /**
   * Get avgStake
   * @return avgStake
  **/
  @javax.annotation.Nullable
  public Double getAvgStake() {
    return avgStake;
  }

  public void setAvgStake(Double avgStake) {
    this.avgStake = avgStake;
  }


  public TopPlayersRow stakes(Double stakes) {
    this.stakes = stakes;
    return this;
  }

   /**
   * Get stakes
   * @return stakes
  **/
  @javax.annotation.Nullable
  public Double getStakes() {
    return stakes;
  }

  public void setStakes(Double stakes) {
    this.stakes = stakes;
  }


  public TopPlayersRow winnings(Double winnings) {
    this.winnings = winnings;
    return this;
  }

   /**
   * Get winnings
   * @return winnings
  **/
  @javax.annotation.Nullable
  public Double getWinnings() {
    return winnings;
  }

  public void setWinnings(Double winnings) {
    this.winnings = winnings;
  }


  public TopPlayersRow margin(Double margin) {
    this.margin = margin;
    return this;
  }

   /**
   * Get margin
   * @return margin
  **/
  @javax.annotation.Nullable
  public Double getMargin() {
    return margin;
  }

  public void setMargin(Double margin) {
    this.margin = margin;
  }


  public TopPlayersRow loss(Double loss) {
    this.loss = loss;
    return this;
  }

   /**
   * Get loss
   * @return loss
  **/
  @javax.annotation.Nullable
  public Double getLoss() {
    return loss;
  }

  public void setLoss(Double loss) {
    this.loss = loss;
  }


  public TopPlayersRow profit(Double profit) {
    this.profit = profit;
    return this;
  }

   /**
   * Get profit
   * @return profit
  **/
  @javax.annotation.Nullable
  public Double getProfit() {
    return profit;
  }

  public void setProfit(Double profit) {
    this.profit = profit;
  }


  public TopPlayersRow playerExtId(String playerExtId) {
    this.playerExtId = playerExtId;
    return this;
  }

   /**
   * Get playerExtId
   * @return playerExtId
  **/
  @javax.annotation.Nullable
  public String getPlayerExtId() {
    return playerExtId;
  }

  public void setPlayerExtId(String playerExtId) {
    this.playerExtId = playerExtId;
  }


  public TopPlayersRow playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopPlayersRow topPlayersRow = (TopPlayersRow) o;
    return Objects.equals(this.playerName, topPlayersRow.playerName) &&
        Objects.equals(this.playerColor, topPlayersRow.playerColor) &&
        Objects.equals(this.playerCountry, topPlayersRow.playerCountry) &&
        Objects.equals(this.affiliateId, topPlayersRow.affiliateId) &&
        Objects.equals(this.affiliateName, topPlayersRow.affiliateName) &&
        Objects.equals(this.brandId, topPlayersRow.brandId) &&
        Objects.equals(this.brandName, topPlayersRow.brandName) &&
        Objects.equals(this.licenseId, topPlayersRow.licenseId) &&
        Objects.equals(this.licenseName, topPlayersRow.licenseName) &&
        Objects.equals(this.currencyId, topPlayersRow.currencyId) &&
        Objects.equals(this.currencySign, topPlayersRow.currencySign) &&
        Objects.equals(this.currencyShortName, topPlayersRow.currencyShortName) &&
        Objects.equals(this.noOfBets, topPlayersRow.noOfBets) &&
        Objects.equals(this.avgStake, topPlayersRow.avgStake) &&
        Objects.equals(this.stakes, topPlayersRow.stakes) &&
        Objects.equals(this.winnings, topPlayersRow.winnings) &&
        Objects.equals(this.margin, topPlayersRow.margin) &&
        Objects.equals(this.loss, topPlayersRow.loss) &&
        Objects.equals(this.profit, topPlayersRow.profit) &&
        Objects.equals(this.playerExtId, topPlayersRow.playerExtId) &&
        Objects.equals(this.playerId, topPlayersRow.playerId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerName, playerColor, playerCountry, affiliateId, affiliateName, brandId, brandName, licenseId, licenseName, currencyId, currencySign, currencyShortName, noOfBets, avgStake, stakes, winnings, margin, loss, profit, playerExtId, playerId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopPlayersRow {\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("    playerColor: ").append(toIndentedString(playerColor)).append("\n");
    sb.append("    playerCountry: ").append(toIndentedString(playerCountry)).append("\n");
    sb.append("    affiliateId: ").append(toIndentedString(affiliateId)).append("\n");
    sb.append("    affiliateName: ").append(toIndentedString(affiliateName)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    currencySign: ").append(toIndentedString(currencySign)).append("\n");
    sb.append("    currencyShortName: ").append(toIndentedString(currencyShortName)).append("\n");
    sb.append("    noOfBets: ").append(toIndentedString(noOfBets)).append("\n");
    sb.append("    avgStake: ").append(toIndentedString(avgStake)).append("\n");
    sb.append("    stakes: ").append(toIndentedString(stakes)).append("\n");
    sb.append("    winnings: ").append(toIndentedString(winnings)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    loss: ").append(toIndentedString(loss)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("    playerExtId: ").append(toIndentedString(playerExtId)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PlayerName");
    openapiFields.add("PlayerColor");
    openapiFields.add("PlayerCountry");
    openapiFields.add("AffiliateId");
    openapiFields.add("AffiliateName");
    openapiFields.add("BrandId");
    openapiFields.add("BrandName");
    openapiFields.add("LicenseId");
    openapiFields.add("LicenseName");
    openapiFields.add("CurrencyId");
    openapiFields.add("CurrencySign");
    openapiFields.add("CurrencyShortName");
    openapiFields.add("NoOfBets");
    openapiFields.add("AvgStake");
    openapiFields.add("Stakes");
    openapiFields.add("Winnings");
    openapiFields.add("Margin");
    openapiFields.add("Loss");
    openapiFields.add("Profit");
    openapiFields.add("PlayerExtId");
    openapiFields.add("PlayerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TopPlayersRow
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopPlayersRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopPlayersRow is not found in the empty JSON string", TopPlayersRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopPlayersRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopPlayersRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PlayerName") != null && !jsonObj.get("PlayerName").isJsonNull()) && !jsonObj.get("PlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerName").toString()));
      }
      if ((jsonObj.get("PlayerColor") != null && !jsonObj.get("PlayerColor").isJsonNull()) && !jsonObj.get("PlayerColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerColor").toString()));
      }
      if ((jsonObj.get("PlayerCountry") != null && !jsonObj.get("PlayerCountry").isJsonNull()) && !jsonObj.get("PlayerCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerCountry").toString()));
      }
      if ((jsonObj.get("AffiliateName") != null && !jsonObj.get("AffiliateName").isJsonNull()) && !jsonObj.get("AffiliateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AffiliateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AffiliateName").toString()));
      }
      if ((jsonObj.get("BrandName") != null && !jsonObj.get("BrandName").isJsonNull()) && !jsonObj.get("BrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandName").toString()));
      }
      if ((jsonObj.get("LicenseName") != null && !jsonObj.get("LicenseName").isJsonNull()) && !jsonObj.get("LicenseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LicenseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LicenseName").toString()));
      }
      if ((jsonObj.get("CurrencySign") != null && !jsonObj.get("CurrencySign").isJsonNull()) && !jsonObj.get("CurrencySign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencySign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencySign").toString()));
      }
      if ((jsonObj.get("CurrencyShortName") != null && !jsonObj.get("CurrencyShortName").isJsonNull()) && !jsonObj.get("CurrencyShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyShortName").toString()));
      }
      if ((jsonObj.get("PlayerExtId") != null && !jsonObj.get("PlayerExtId").isJsonNull()) && !jsonObj.get("PlayerExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayerExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayerExtId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopPlayersRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopPlayersRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopPlayersRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopPlayersRow.class));

       return (TypeAdapter<T>) new TypeAdapter<TopPlayersRow>() {
           @Override
           public void write(JsonWriter out, TopPlayersRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopPlayersRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopPlayersRow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopPlayersRow
  * @throws IOException if the JSON string is invalid with respect to TopPlayersRow
  */
  public static TopPlayersRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopPlayersRow.class);
  }

 /**
  * Convert an instance of TopPlayersRow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

