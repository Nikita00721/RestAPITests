/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * BetsCountItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class BetsCountItem {
  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_OPEN_BETS_COUNT = "OpenBetsCount";
  @SerializedName(SERIALIZED_NAME_OPEN_BETS_COUNT)
  private Integer openBetsCount;

  public static final String SERIALIZED_NAME_BET_BUILDER_COUNT = "BetBuilderCount";
  @SerializedName(SERIALIZED_NAME_BET_BUILDER_COUNT)
  private Integer betBuilderCount;

  public static final String SERIALIZED_NAME_OPEN_BET_BUILDER_COUNT = "OpenBetBuilderCount";
  @SerializedName(SERIALIZED_NAME_OPEN_BET_BUILDER_COUNT)
  private Integer openBetBuilderCount;

  public static final String SERIALIZED_NAME_SELECTION_ID = "SelectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private Long selectionId;

  public BetsCountItem() {
  }

  public BetsCountItem count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public BetsCountItem openBetsCount(Integer openBetsCount) {
    this.openBetsCount = openBetsCount;
    return this;
  }

   /**
   * Get openBetsCount
   * @return openBetsCount
  **/
  @javax.annotation.Nullable
  public Integer getOpenBetsCount() {
    return openBetsCount;
  }

  public void setOpenBetsCount(Integer openBetsCount) {
    this.openBetsCount = openBetsCount;
  }


  public BetsCountItem betBuilderCount(Integer betBuilderCount) {
    this.betBuilderCount = betBuilderCount;
    return this;
  }

   /**
   * Get betBuilderCount
   * @return betBuilderCount
  **/
  @javax.annotation.Nullable
  public Integer getBetBuilderCount() {
    return betBuilderCount;
  }

  public void setBetBuilderCount(Integer betBuilderCount) {
    this.betBuilderCount = betBuilderCount;
  }


  public BetsCountItem openBetBuilderCount(Integer openBetBuilderCount) {
    this.openBetBuilderCount = openBetBuilderCount;
    return this;
  }

   /**
   * Get openBetBuilderCount
   * @return openBetBuilderCount
  **/
  @javax.annotation.Nullable
  public Integer getOpenBetBuilderCount() {
    return openBetBuilderCount;
  }

  public void setOpenBetBuilderCount(Integer openBetBuilderCount) {
    this.openBetBuilderCount = openBetBuilderCount;
  }


  public BetsCountItem selectionId(Long selectionId) {
    this.selectionId = selectionId;
    return this;
  }

   /**
   * Get selectionId
   * @return selectionId
  **/
  @javax.annotation.Nullable
  public Long getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(Long selectionId) {
    this.selectionId = selectionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BetsCountItem betsCountItem = (BetsCountItem) o;
    return Objects.equals(this.count, betsCountItem.count) &&
        Objects.equals(this.openBetsCount, betsCountItem.openBetsCount) &&
        Objects.equals(this.betBuilderCount, betsCountItem.betBuilderCount) &&
        Objects.equals(this.openBetBuilderCount, betsCountItem.openBetBuilderCount) &&
        Objects.equals(this.selectionId, betsCountItem.selectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, openBetsCount, betBuilderCount, openBetBuilderCount, selectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BetsCountItem {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    openBetsCount: ").append(toIndentedString(openBetsCount)).append("\n");
    sb.append("    betBuilderCount: ").append(toIndentedString(betBuilderCount)).append("\n");
    sb.append("    openBetBuilderCount: ").append(toIndentedString(openBetBuilderCount)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("OpenBetsCount");
    openapiFields.add("BetBuilderCount");
    openapiFields.add("OpenBetBuilderCount");
    openapiFields.add("SelectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BetsCountItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BetsCountItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BetsCountItem is not found in the empty JSON string", BetsCountItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BetsCountItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BetsCountItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BetsCountItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BetsCountItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BetsCountItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BetsCountItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BetsCountItem>() {
           @Override
           public void write(JsonWriter out, BetsCountItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BetsCountItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BetsCountItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BetsCountItem
  * @throws IOException if the JSON string is invalid with respect to BetsCountItem
  */
  public static BetsCountItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BetsCountItem.class);
  }

 /**
  * Convert an instance of BetsCountItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

