/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * TicketMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TicketMatch {
  public static final String SERIALIZED_NAME_INT_BET_ID = "IntBetId";
  @SerializedName(SERIALIZED_NAME_INT_BET_ID)
  private Long intBetId;

  public static final String SERIALIZED_NAME_BET_TYPE = "BetType";
  @SerializedName(SERIALIZED_NAME_BET_TYPE)
  private String betType;

  public static final String SERIALIZED_NAME_TOTAL_WIN = "TotalWin";
  @SerializedName(SERIALIZED_NAME_TOTAL_WIN)
  private Long totalWin;

  public static final String SERIALIZED_NAME_MARKETS = "Markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<TicketMarket> markets;

  public static final String SERIALIZED_NAME_STAKES = "Stakes";
  @SerializedName(SERIALIZED_NAME_STAKES)
  private List<Stake> stakes;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public TicketMatch() {
  }

  public TicketMatch intBetId(Long intBetId) {
    this.intBetId = intBetId;
    return this;
  }

   /**
   * Get intBetId
   * @return intBetId
  **/
  @javax.annotation.Nullable
  public Long getIntBetId() {
    return intBetId;
  }

  public void setIntBetId(Long intBetId) {
    this.intBetId = intBetId;
  }


  public TicketMatch betType(String betType) {
    this.betType = betType;
    return this;
  }

   /**
   * Get betType
   * @return betType
  **/
  @javax.annotation.Nullable
  public String getBetType() {
    return betType;
  }

  public void setBetType(String betType) {
    this.betType = betType;
  }


  public TicketMatch totalWin(Long totalWin) {
    this.totalWin = totalWin;
    return this;
  }

   /**
   * Get totalWin
   * @return totalWin
  **/
  @javax.annotation.Nullable
  public Long getTotalWin() {
    return totalWin;
  }

  public void setTotalWin(Long totalWin) {
    this.totalWin = totalWin;
  }


  public TicketMatch markets(List<TicketMarket> markets) {
    this.markets = markets;
    return this;
  }

  public TicketMatch addMarketsItem(TicketMarket marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nullable
  public List<TicketMarket> getMarkets() {
    return markets;
  }

  public void setMarkets(List<TicketMarket> markets) {
    this.markets = markets;
  }


  public TicketMatch stakes(List<Stake> stakes) {
    this.stakes = stakes;
    return this;
  }

  public TicketMatch addStakesItem(Stake stakesItem) {
    if (this.stakes == null) {
      this.stakes = new ArrayList<>();
    }
    this.stakes.add(stakesItem);
    return this;
  }

   /**
   * Get stakes
   * @return stakes
  **/
  @javax.annotation.Nullable
  public List<Stake> getStakes() {
    return stakes;
  }

  public void setStakes(List<Stake> stakes) {
    this.stakes = stakes;
  }


  public TicketMatch id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketMatch ticketMatch = (TicketMatch) o;
    return Objects.equals(this.intBetId, ticketMatch.intBetId) &&
        Objects.equals(this.betType, ticketMatch.betType) &&
        Objects.equals(this.totalWin, ticketMatch.totalWin) &&
        Objects.equals(this.markets, ticketMatch.markets) &&
        Objects.equals(this.stakes, ticketMatch.stakes) &&
        Objects.equals(this.id, ticketMatch.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(intBetId, betType, totalWin, markets, stakes, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketMatch {\n");
    sb.append("    intBetId: ").append(toIndentedString(intBetId)).append("\n");
    sb.append("    betType: ").append(toIndentedString(betType)).append("\n");
    sb.append("    totalWin: ").append(toIndentedString(totalWin)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    stakes: ").append(toIndentedString(stakes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntBetId");
    openapiFields.add("BetType");
    openapiFields.add("TotalWin");
    openapiFields.add("Markets");
    openapiFields.add("Stakes");
    openapiFields.add("Id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TicketMatch
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TicketMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TicketMatch is not found in the empty JSON string", TicketMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TicketMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TicketMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BetType") != null && !jsonObj.get("BetType").isJsonNull()) && !jsonObj.get("BetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BetType").toString()));
      }
      if (jsonObj.get("Markets") != null && !jsonObj.get("Markets").isJsonNull()) {
        JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("Markets");
        if (jsonArraymarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Markets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Markets` to be an array in the JSON string but got `%s`", jsonObj.get("Markets").toString()));
          }

          // validate the optional field `Markets` (array)
          for (int i = 0; i < jsonArraymarkets.size(); i++) {
            TicketMarket.validateJsonElement(jsonArraymarkets.get(i));
          };
        }
      }
      if (jsonObj.get("Stakes") != null && !jsonObj.get("Stakes").isJsonNull()) {
        JsonArray jsonArraystakes = jsonObj.getAsJsonArray("Stakes");
        if (jsonArraystakes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Stakes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Stakes` to be an array in the JSON string but got `%s`", jsonObj.get("Stakes").toString()));
          }

          // validate the optional field `Stakes` (array)
          for (int i = 0; i < jsonArraystakes.size(); i++) {
            Stake.validateJsonElement(jsonArraystakes.get(i));
          };
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TicketMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TicketMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TicketMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TicketMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<TicketMatch>() {
           @Override
           public void write(JsonWriter out, TicketMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TicketMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TicketMatch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TicketMatch
  * @throws IOException if the JSON string is invalid with respect to TicketMatch
  */
  public static TicketMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TicketMatch.class);
  }

 /**
  * Convert an instance of TicketMatch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

