/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TradingTemplateSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TradingTemplateSummary {
  public static final String SERIALIZED_NAME_CHAMPS_COUNT = "ChampsCount";
  @SerializedName(SERIALIZED_NAME_CHAMPS_COUNT)
  private Integer champsCount;

  public static final String SERIALIZED_NAME_MARKETS_COUNT = "MarketsCount";
  @SerializedName(SERIALIZED_NAME_MARKETS_COUNT)
  private Integer marketsCount;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Template settings;

  public TradingTemplateSummary() {
  }

  public TradingTemplateSummary champsCount(Integer champsCount) {
    this.champsCount = champsCount;
    return this;
  }

   /**
   * Get champsCount
   * @return champsCount
  **/
  @javax.annotation.Nullable
  public Integer getChampsCount() {
    return champsCount;
  }

  public void setChampsCount(Integer champsCount) {
    this.champsCount = champsCount;
  }


  public TradingTemplateSummary marketsCount(Integer marketsCount) {
    this.marketsCount = marketsCount;
    return this;
  }

   /**
   * Get marketsCount
   * @return marketsCount
  **/
  @javax.annotation.Nullable
  public Integer getMarketsCount() {
    return marketsCount;
  }

  public void setMarketsCount(Integer marketsCount) {
    this.marketsCount = marketsCount;
  }


  public TradingTemplateSummary settings(Template settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public Template getSettings() {
    return settings;
  }

  public void setSettings(Template settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TradingTemplateSummary tradingTemplateSummary = (TradingTemplateSummary) o;
    return Objects.equals(this.champsCount, tradingTemplateSummary.champsCount) &&
        Objects.equals(this.marketsCount, tradingTemplateSummary.marketsCount) &&
        Objects.equals(this.settings, tradingTemplateSummary.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(champsCount, marketsCount, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TradingTemplateSummary {\n");
    sb.append("    champsCount: ").append(toIndentedString(champsCount)).append("\n");
    sb.append("    marketsCount: ").append(toIndentedString(marketsCount)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChampsCount");
    openapiFields.add("MarketsCount");
    openapiFields.add("Settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TradingTemplateSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TradingTemplateSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TradingTemplateSummary is not found in the empty JSON string", TradingTemplateSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TradingTemplateSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TradingTemplateSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        Template.validateJsonElement(jsonObj.get("Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TradingTemplateSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TradingTemplateSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TradingTemplateSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TradingTemplateSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TradingTemplateSummary>() {
           @Override
           public void write(JsonWriter out, TradingTemplateSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TradingTemplateSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TradingTemplateSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TradingTemplateSummary
  * @throws IOException if the JSON string is invalid with respect to TradingTemplateSummary
  */
  public static TradingTemplateSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TradingTemplateSummary.class);
  }

 /**
  * Convert an instance of TradingTemplateSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

