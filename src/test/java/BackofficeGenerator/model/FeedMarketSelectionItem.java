/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * FeedMarketSelectionItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class FeedMarketSelectionItem {
  public static final String SERIALIZED_NAME_SEL_NAME = "SelName";
  @SerializedName(SERIALIZED_NAME_SEL_NAME)
  private String selName;

  public static final String SERIALIZED_NAME_SPECIAL_ODDS_VALUE = "SpecialOddsValue";
  @SerializedName(SERIALIZED_NAME_SPECIAL_ODDS_VALUE)
  private String specialOddsValue;

  public static final String SERIALIZED_NAME_SELECTION_ID = "SelectionId";
  @SerializedName(SERIALIZED_NAME_SELECTION_ID)
  private Long selectionId;

  public static final String SERIALIZED_NAME_SELECTION_TYPE_ID = "SelectionTypeId";
  @SerializedName(SERIALIZED_NAME_SELECTION_TYPE_ID)
  private Integer selectionTypeId;

  public FeedMarketSelectionItem() {
  }

  public FeedMarketSelectionItem selName(String selName) {
    this.selName = selName;
    return this;
  }

   /**
   * Get selName
   * @return selName
  **/
  @javax.annotation.Nullable
  public String getSelName() {
    return selName;
  }

  public void setSelName(String selName) {
    this.selName = selName;
  }


  public FeedMarketSelectionItem specialOddsValue(String specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
    return this;
  }

   /**
   * Get specialOddsValue
   * @return specialOddsValue
  **/
  @javax.annotation.Nullable
  public String getSpecialOddsValue() {
    return specialOddsValue;
  }

  public void setSpecialOddsValue(String specialOddsValue) {
    this.specialOddsValue = specialOddsValue;
  }


  public FeedMarketSelectionItem selectionId(Long selectionId) {
    this.selectionId = selectionId;
    return this;
  }

   /**
   * Get selectionId
   * @return selectionId
  **/
  @javax.annotation.Nullable
  public Long getSelectionId() {
    return selectionId;
  }

  public void setSelectionId(Long selectionId) {
    this.selectionId = selectionId;
  }


  public FeedMarketSelectionItem selectionTypeId(Integer selectionTypeId) {
    this.selectionTypeId = selectionTypeId;
    return this;
  }

   /**
   * Get selectionTypeId
   * @return selectionTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSelectionTypeId() {
    return selectionTypeId;
  }

  public void setSelectionTypeId(Integer selectionTypeId) {
    this.selectionTypeId = selectionTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedMarketSelectionItem feedMarketSelectionItem = (FeedMarketSelectionItem) o;
    return Objects.equals(this.selName, feedMarketSelectionItem.selName) &&
        Objects.equals(this.specialOddsValue, feedMarketSelectionItem.specialOddsValue) &&
        Objects.equals(this.selectionId, feedMarketSelectionItem.selectionId) &&
        Objects.equals(this.selectionTypeId, feedMarketSelectionItem.selectionTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(selName, specialOddsValue, selectionId, selectionTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedMarketSelectionItem {\n");
    sb.append("    selName: ").append(toIndentedString(selName)).append("\n");
    sb.append("    specialOddsValue: ").append(toIndentedString(specialOddsValue)).append("\n");
    sb.append("    selectionId: ").append(toIndentedString(selectionId)).append("\n");
    sb.append("    selectionTypeId: ").append(toIndentedString(selectionTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SelName");
    openapiFields.add("SpecialOddsValue");
    openapiFields.add("SelectionId");
    openapiFields.add("SelectionTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FeedMarketSelectionItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedMarketSelectionItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedMarketSelectionItem is not found in the empty JSON string", FeedMarketSelectionItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedMarketSelectionItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedMarketSelectionItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SelName") != null && !jsonObj.get("SelName").isJsonNull()) && !jsonObj.get("SelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SelName").toString()));
      }
      if ((jsonObj.get("SpecialOddsValue") != null && !jsonObj.get("SpecialOddsValue").isJsonNull()) && !jsonObj.get("SpecialOddsValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpecialOddsValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpecialOddsValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedMarketSelectionItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedMarketSelectionItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedMarketSelectionItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedMarketSelectionItem.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedMarketSelectionItem>() {
           @Override
           public void write(JsonWriter out, FeedMarketSelectionItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedMarketSelectionItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedMarketSelectionItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedMarketSelectionItem
  * @throws IOException if the JSON string is invalid with respect to FeedMarketSelectionItem
  */
  public static FeedMarketSelectionItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedMarketSelectionItem.class);
  }

 /**
  * Convert an instance of FeedMarketSelectionItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

