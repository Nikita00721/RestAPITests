/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GenerateLiabilityReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GenerateLiabilityReportRequest {
  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "CategoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private List<Integer> categoriesIds;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_IDS = "ChampionshipIds";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_IDS)
  private List<Integer> championshipIds;

  public static final String SERIALIZED_NAME_SEARCH_ID = "SearchId";
  @SerializedName(SERIALIZED_NAME_SEARCH_ID)
  private String searchId;

  public static final String SERIALIZED_NAME_LICENSE_ID = "LicenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private Integer licenseId;

  public static final String SERIALIZED_NAME_BRAND_ID = "BrandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_MARKET = "Market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private LiabilityMarketStrategy market;

  public static final String SERIALIZED_NAME_SORT_BY_STRAIN = "SortByStrain";
  @SerializedName(SERIALIZED_NAME_SORT_BY_STRAIN)
  private SortStrain sortByStrain;

  public static final String SERIALIZED_NAME_SORT_BY_CATEGORY = "SortByCategory";
  @SerializedName(SERIALIZED_NAME_SORT_BY_CATEGORY)
  private SortCategory sortByCategory;

  public static final String SERIALIZED_NAME_IS_LIVE = "IsLive";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Period period;

  public static final String SERIALIZED_NAME_SHOW_MATCHES = "ShowMatches";
  @SerializedName(SERIALIZED_NAME_SHOW_MATCHES)
  private Boolean showMatches;

  public static final String SERIALIZED_NAME_SHOW_OUTRIGHTS = "ShowOutrights";
  @SerializedName(SERIALIZED_NAME_SHOW_OUTRIGHTS)
  private Boolean showOutrights;

  public static final String SERIALIZED_NAME_SHOW_LATE = "ShowLate";
  @SerializedName(SERIALIZED_NAME_SHOW_LATE)
  private Boolean showLate;

  public static final String SERIALIZED_NAME_ONLY_MANUAL = "OnlyManual";
  @SerializedName(SERIALIZED_NAME_ONLY_MANUAL)
  private Boolean onlyManual;

  public static final String SERIALIZED_NAME_SPORT_IDS = "SportIds";
  @SerializedName(SERIALIZED_NAME_SPORT_IDS)
  private List<Integer> sportIds;

  public GenerateLiabilityReportRequest() {
  }

  public GenerateLiabilityReportRequest categoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public GenerateLiabilityReportRequest addCategoriesIdsItem(Integer categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

   /**
   * Get categoriesIds
   * @return categoriesIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public GenerateLiabilityReportRequest championshipIds(List<Integer> championshipIds) {
    this.championshipIds = championshipIds;
    return this;
  }

  public GenerateLiabilityReportRequest addChampionshipIdsItem(Integer championshipIdsItem) {
    if (this.championshipIds == null) {
      this.championshipIds = new ArrayList<>();
    }
    this.championshipIds.add(championshipIdsItem);
    return this;
  }

   /**
   * Get championshipIds
   * @return championshipIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getChampionshipIds() {
    return championshipIds;
  }

  public void setChampionshipIds(List<Integer> championshipIds) {
    this.championshipIds = championshipIds;
  }


  public GenerateLiabilityReportRequest searchId(String searchId) {
    this.searchId = searchId;
    return this;
  }

   /**
   * Get searchId
   * @return searchId
  **/
  @javax.annotation.Nullable
  public String getSearchId() {
    return searchId;
  }

  public void setSearchId(String searchId) {
    this.searchId = searchId;
  }


  public GenerateLiabilityReportRequest licenseId(Integer licenseId) {
    this.licenseId = licenseId;
    return this;
  }

   /**
   * Get licenseId
   * @return licenseId
  **/
  @javax.annotation.Nullable
  public Integer getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(Integer licenseId) {
    this.licenseId = licenseId;
  }


  public GenerateLiabilityReportRequest brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

   /**
   * Get brandId
   * @return brandId
  **/
  @javax.annotation.Nullable
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public GenerateLiabilityReportRequest market(LiabilityMarketStrategy market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  public LiabilityMarketStrategy getMarket() {
    return market;
  }

  public void setMarket(LiabilityMarketStrategy market) {
    this.market = market;
  }


  public GenerateLiabilityReportRequest sortByStrain(SortStrain sortByStrain) {
    this.sortByStrain = sortByStrain;
    return this;
  }

   /**
   * Get sortByStrain
   * @return sortByStrain
  **/
  @javax.annotation.Nullable
  public SortStrain getSortByStrain() {
    return sortByStrain;
  }

  public void setSortByStrain(SortStrain sortByStrain) {
    this.sortByStrain = sortByStrain;
  }


  public GenerateLiabilityReportRequest sortByCategory(SortCategory sortByCategory) {
    this.sortByCategory = sortByCategory;
    return this;
  }

   /**
   * Get sortByCategory
   * @return sortByCategory
  **/
  @javax.annotation.Nullable
  public SortCategory getSortByCategory() {
    return sortByCategory;
  }

  public void setSortByCategory(SortCategory sortByCategory) {
    this.sortByCategory = sortByCategory;
  }


  public GenerateLiabilityReportRequest isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

   /**
   * Get isLive
   * @return isLive
  **/
  @javax.annotation.Nullable
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public GenerateLiabilityReportRequest period(Period period) {
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @javax.annotation.Nullable
  public Period getPeriod() {
    return period;
  }

  public void setPeriod(Period period) {
    this.period = period;
  }


  public GenerateLiabilityReportRequest showMatches(Boolean showMatches) {
    this.showMatches = showMatches;
    return this;
  }

   /**
   * Get showMatches
   * @return showMatches
  **/
  @javax.annotation.Nullable
  public Boolean getShowMatches() {
    return showMatches;
  }

  public void setShowMatches(Boolean showMatches) {
    this.showMatches = showMatches;
  }


  public GenerateLiabilityReportRequest showOutrights(Boolean showOutrights) {
    this.showOutrights = showOutrights;
    return this;
  }

   /**
   * Get showOutrights
   * @return showOutrights
  **/
  @javax.annotation.Nullable
  public Boolean getShowOutrights() {
    return showOutrights;
  }

  public void setShowOutrights(Boolean showOutrights) {
    this.showOutrights = showOutrights;
  }


  public GenerateLiabilityReportRequest showLate(Boolean showLate) {
    this.showLate = showLate;
    return this;
  }

   /**
   * Get showLate
   * @return showLate
  **/
  @javax.annotation.Nullable
  public Boolean getShowLate() {
    return showLate;
  }

  public void setShowLate(Boolean showLate) {
    this.showLate = showLate;
  }


  public GenerateLiabilityReportRequest onlyManual(Boolean onlyManual) {
    this.onlyManual = onlyManual;
    return this;
  }

   /**
   * Get onlyManual
   * @return onlyManual
  **/
  @javax.annotation.Nullable
  public Boolean getOnlyManual() {
    return onlyManual;
  }

  public void setOnlyManual(Boolean onlyManual) {
    this.onlyManual = onlyManual;
  }


  public GenerateLiabilityReportRequest sportIds(List<Integer> sportIds) {
    this.sportIds = sportIds;
    return this;
  }

  public GenerateLiabilityReportRequest addSportIdsItem(Integer sportIdsItem) {
    if (this.sportIds == null) {
      this.sportIds = new ArrayList<>();
    }
    this.sportIds.add(sportIdsItem);
    return this;
  }

   /**
   * Get sportIds
   * @return sportIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportIds() {
    return sportIds;
  }

  public void setSportIds(List<Integer> sportIds) {
    this.sportIds = sportIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateLiabilityReportRequest generateLiabilityReportRequest = (GenerateLiabilityReportRequest) o;
    return Objects.equals(this.categoriesIds, generateLiabilityReportRequest.categoriesIds) &&
        Objects.equals(this.championshipIds, generateLiabilityReportRequest.championshipIds) &&
        Objects.equals(this.searchId, generateLiabilityReportRequest.searchId) &&
        Objects.equals(this.licenseId, generateLiabilityReportRequest.licenseId) &&
        Objects.equals(this.brandId, generateLiabilityReportRequest.brandId) &&
        Objects.equals(this.market, generateLiabilityReportRequest.market) &&
        Objects.equals(this.sortByStrain, generateLiabilityReportRequest.sortByStrain) &&
        Objects.equals(this.sortByCategory, generateLiabilityReportRequest.sortByCategory) &&
        Objects.equals(this.isLive, generateLiabilityReportRequest.isLive) &&
        Objects.equals(this.period, generateLiabilityReportRequest.period) &&
        Objects.equals(this.showMatches, generateLiabilityReportRequest.showMatches) &&
        Objects.equals(this.showOutrights, generateLiabilityReportRequest.showOutrights) &&
        Objects.equals(this.showLate, generateLiabilityReportRequest.showLate) &&
        Objects.equals(this.onlyManual, generateLiabilityReportRequest.onlyManual) &&
        Objects.equals(this.sportIds, generateLiabilityReportRequest.sportIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoriesIds, championshipIds, searchId, licenseId, brandId, market, sortByStrain, sortByCategory, isLive, period, showMatches, showOutrights, showLate, onlyManual, sportIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateLiabilityReportRequest {\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    championshipIds: ").append(toIndentedString(championshipIds)).append("\n");
    sb.append("    searchId: ").append(toIndentedString(searchId)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    sortByStrain: ").append(toIndentedString(sortByStrain)).append("\n");
    sb.append("    sortByCategory: ").append(toIndentedString(sortByCategory)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    showMatches: ").append(toIndentedString(showMatches)).append("\n");
    sb.append("    showOutrights: ").append(toIndentedString(showOutrights)).append("\n");
    sb.append("    showLate: ").append(toIndentedString(showLate)).append("\n");
    sb.append("    onlyManual: ").append(toIndentedString(onlyManual)).append("\n");
    sb.append("    sportIds: ").append(toIndentedString(sportIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoriesIds");
    openapiFields.add("ChampionshipIds");
    openapiFields.add("SearchId");
    openapiFields.add("LicenseId");
    openapiFields.add("BrandId");
    openapiFields.add("Market");
    openapiFields.add("SortByStrain");
    openapiFields.add("SortByCategory");
    openapiFields.add("IsLive");
    openapiFields.add("Period");
    openapiFields.add("ShowMatches");
    openapiFields.add("ShowOutrights");
    openapiFields.add("ShowLate");
    openapiFields.add("OnlyManual");
    openapiFields.add("SportIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GenerateLiabilityReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateLiabilityReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateLiabilityReportRequest is not found in the empty JSON string", GenerateLiabilityReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateLiabilityReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateLiabilityReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoriesIds") != null && !jsonObj.get("CategoriesIds").isJsonNull() && !jsonObj.get("CategoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("CategoriesIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ChampionshipIds") != null && !jsonObj.get("ChampionshipIds").isJsonNull() && !jsonObj.get("ChampionshipIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipIds` to be an array in the JSON string but got `%s`", jsonObj.get("ChampionshipIds").toString()));
      }
      if ((jsonObj.get("SearchId") != null && !jsonObj.get("SearchId").isJsonNull()) && !jsonObj.get("SearchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchId").toString()));
      }
      // validate the optional field `Market`
      if (jsonObj.get("Market") != null && !jsonObj.get("Market").isJsonNull()) {
        LiabilityMarketStrategy.validateJsonElement(jsonObj.get("Market"));
      }
      // validate the optional field `SortByStrain`
      if (jsonObj.get("SortByStrain") != null && !jsonObj.get("SortByStrain").isJsonNull()) {
        SortStrain.validateJsonElement(jsonObj.get("SortByStrain"));
      }
      // validate the optional field `SortByCategory`
      if (jsonObj.get("SortByCategory") != null && !jsonObj.get("SortByCategory").isJsonNull()) {
        SortCategory.validateJsonElement(jsonObj.get("SortByCategory"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        Period.validateJsonElement(jsonObj.get("Period"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportIds") != null && !jsonObj.get("SportIds").isJsonNull() && !jsonObj.get("SportIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateLiabilityReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateLiabilityReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateLiabilityReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateLiabilityReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateLiabilityReportRequest>() {
           @Override
           public void write(JsonWriter out, GenerateLiabilityReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateLiabilityReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateLiabilityReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateLiabilityReportRequest
  * @throws IOException if the JSON string is invalid with respect to GenerateLiabilityReportRequest
  */
  public static GenerateLiabilityReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateLiabilityReportRequest.class);
  }

 /**
  * Convert an instance of GenerateLiabilityReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

