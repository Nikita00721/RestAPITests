/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GetCompetitorStatusesCountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetCompetitorStatusesCountRequest {
  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "CategoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private List<Integer> categoriesIds;

  public static final String SERIALIZED_NAME_CHAMPIONSHIPS_IDS = "ChampionshipsIds";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIPS_IDS)
  private List<Integer> championshipsIds;

  public static final String SERIALIZED_NAME_U18 = "U18";
  @SerializedName(SERIALIZED_NAME_U18)
  private Boolean U18;

  public static final String SERIALIZED_NAME_NO_JERSEY = "NoJersey";
  @SerializedName(SERIALIZED_NAME_NO_JERSEY)
  private Boolean noJersey;

  public static final String SERIALIZED_NAME_NO_BIRTHDATE = "NoBirthdate";
  @SerializedName(SERIALIZED_NAME_NO_BIRTHDATE)
  private Boolean noBirthdate;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_BIRTHDATE_FROM = "BirthdateFrom";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_FROM)
  private OffsetDateTime birthdateFrom;

  public static final String SERIALIZED_NAME_BIRTHDATE_TO = "BirthdateTo";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_TO)
  private OffsetDateTime birthdateTo;

  public static final String SERIALIZED_NAME_BIRTHDAY_STATUSES = "BirthdayStatuses";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY_STATUSES)
  private List<Integer> birthdayStatuses;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_SPORTS_IDS = "SportsIds";
  @SerializedName(SERIALIZED_NAME_SPORTS_IDS)
  private List<Integer> sportsIds;

  public GetCompetitorStatusesCountRequest() {
  }

  public GetCompetitorStatusesCountRequest categoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public GetCompetitorStatusesCountRequest addCategoriesIdsItem(Integer categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

   /**
   * Get categoriesIds
   * @return categoriesIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public GetCompetitorStatusesCountRequest championshipsIds(List<Integer> championshipsIds) {
    this.championshipsIds = championshipsIds;
    return this;
  }

  public GetCompetitorStatusesCountRequest addChampionshipsIdsItem(Integer championshipsIdsItem) {
    if (this.championshipsIds == null) {
      this.championshipsIds = new ArrayList<>();
    }
    this.championshipsIds.add(championshipsIdsItem);
    return this;
  }

   /**
   * Get championshipsIds
   * @return championshipsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getChampionshipsIds() {
    return championshipsIds;
  }

  public void setChampionshipsIds(List<Integer> championshipsIds) {
    this.championshipsIds = championshipsIds;
  }


  public GetCompetitorStatusesCountRequest U18(Boolean U18) {
    this.U18 = U18;
    return this;
  }

   /**
   * Get U18
   * @return U18
  **/
  @javax.annotation.Nullable
  public Boolean getU18() {
    return U18;
  }

  public void setU18(Boolean U18) {
    this.U18 = U18;
  }


  public GetCompetitorStatusesCountRequest noJersey(Boolean noJersey) {
    this.noJersey = noJersey;
    return this;
  }

   /**
   * Get noJersey
   * @return noJersey
  **/
  @javax.annotation.Nullable
  public Boolean getNoJersey() {
    return noJersey;
  }

  public void setNoJersey(Boolean noJersey) {
    this.noJersey = noJersey;
  }


  public GetCompetitorStatusesCountRequest noBirthdate(Boolean noBirthdate) {
    this.noBirthdate = noBirthdate;
    return this;
  }

   /**
   * Get noBirthdate
   * @return noBirthdate
  **/
  @javax.annotation.Nullable
  public Boolean getNoBirthdate() {
    return noBirthdate;
  }

  public void setNoBirthdate(Boolean noBirthdate) {
    this.noBirthdate = noBirthdate;
  }


  public GetCompetitorStatusesCountRequest id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetCompetitorStatusesCountRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetCompetitorStatusesCountRequest sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public GetCompetitorStatusesCountRequest birthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
    return this;
  }

   /**
   * Get birthdateFrom
   * @return birthdateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateFrom() {
    return birthdateFrom;
  }

  public void setBirthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
  }


  public GetCompetitorStatusesCountRequest birthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
    return this;
  }

   /**
   * Get birthdateTo
   * @return birthdateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateTo() {
    return birthdateTo;
  }

  public void setBirthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
  }


  public GetCompetitorStatusesCountRequest birthdayStatuses(List<Integer> birthdayStatuses) {
    this.birthdayStatuses = birthdayStatuses;
    return this;
  }

  public GetCompetitorStatusesCountRequest addBirthdayStatusesItem(Integer birthdayStatusesItem) {
    if (this.birthdayStatuses == null) {
      this.birthdayStatuses = new ArrayList<>();
    }
    this.birthdayStatuses.add(birthdayStatusesItem);
    return this;
  }

   /**
   * Get birthdayStatuses
   * @return birthdayStatuses
  **/
  @javax.annotation.Nullable
  public List<Integer> getBirthdayStatuses() {
    return birthdayStatuses;
  }

  public void setBirthdayStatuses(List<Integer> birthdayStatuses) {
    this.birthdayStatuses = birthdayStatuses;
  }


  public GetCompetitorStatusesCountRequest countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GetCompetitorStatusesCountRequest sportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
    return this;
  }

  public GetCompetitorStatusesCountRequest addSportsIdsItem(Integer sportsIdsItem) {
    if (this.sportsIds == null) {
      this.sportsIds = new ArrayList<>();
    }
    this.sportsIds.add(sportsIdsItem);
    return this;
  }

   /**
   * Get sportsIds
   * @return sportsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportsIds() {
    return sportsIds;
  }

  public void setSportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCompetitorStatusesCountRequest getCompetitorStatusesCountRequest = (GetCompetitorStatusesCountRequest) o;
    return Objects.equals(this.categoriesIds, getCompetitorStatusesCountRequest.categoriesIds) &&
        Objects.equals(this.championshipsIds, getCompetitorStatusesCountRequest.championshipsIds) &&
        Objects.equals(this.U18, getCompetitorStatusesCountRequest.U18) &&
        Objects.equals(this.noJersey, getCompetitorStatusesCountRequest.noJersey) &&
        Objects.equals(this.noBirthdate, getCompetitorStatusesCountRequest.noBirthdate) &&
        Objects.equals(this.id, getCompetitorStatusesCountRequest.id) &&
        Objects.equals(this.name, getCompetitorStatusesCountRequest.name) &&
        Objects.equals(this.sportName, getCompetitorStatusesCountRequest.sportName) &&
        Objects.equals(this.birthdateFrom, getCompetitorStatusesCountRequest.birthdateFrom) &&
        Objects.equals(this.birthdateTo, getCompetitorStatusesCountRequest.birthdateTo) &&
        Objects.equals(this.birthdayStatuses, getCompetitorStatusesCountRequest.birthdayStatuses) &&
        Objects.equals(this.countryCode, getCompetitorStatusesCountRequest.countryCode) &&
        Objects.equals(this.sportsIds, getCompetitorStatusesCountRequest.sportsIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoriesIds, championshipsIds, U18, noJersey, noBirthdate, id, name, sportName, birthdateFrom, birthdateTo, birthdayStatuses, countryCode, sportsIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCompetitorStatusesCountRequest {\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    championshipsIds: ").append(toIndentedString(championshipsIds)).append("\n");
    sb.append("    U18: ").append(toIndentedString(U18)).append("\n");
    sb.append("    noJersey: ").append(toIndentedString(noJersey)).append("\n");
    sb.append("    noBirthdate: ").append(toIndentedString(noBirthdate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    birthdateFrom: ").append(toIndentedString(birthdateFrom)).append("\n");
    sb.append("    birthdateTo: ").append(toIndentedString(birthdateTo)).append("\n");
    sb.append("    birthdayStatuses: ").append(toIndentedString(birthdayStatuses)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    sportsIds: ").append(toIndentedString(sportsIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoriesIds");
    openapiFields.add("ChampionshipsIds");
    openapiFields.add("U18");
    openapiFields.add("NoJersey");
    openapiFields.add("NoBirthdate");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("SportName");
    openapiFields.add("BirthdateFrom");
    openapiFields.add("BirthdateTo");
    openapiFields.add("BirthdayStatuses");
    openapiFields.add("CountryCode");
    openapiFields.add("SportsIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetCompetitorStatusesCountRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCompetitorStatusesCountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCompetitorStatusesCountRequest is not found in the empty JSON string", GetCompetitorStatusesCountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCompetitorStatusesCountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCompetitorStatusesCountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoriesIds") != null && !jsonObj.get("CategoriesIds").isJsonNull() && !jsonObj.get("CategoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("CategoriesIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ChampionshipsIds") != null && !jsonObj.get("ChampionshipsIds").isJsonNull() && !jsonObj.get("ChampionshipsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipsIds` to be an array in the JSON string but got `%s`", jsonObj.get("ChampionshipsIds").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BirthdayStatuses") != null && !jsonObj.get("BirthdayStatuses").isJsonNull() && !jsonObj.get("BirthdayStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthdayStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("BirthdayStatuses").toString()));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportsIds") != null && !jsonObj.get("SportsIds").isJsonNull() && !jsonObj.get("SportsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportsIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportsIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCompetitorStatusesCountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCompetitorStatusesCountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCompetitorStatusesCountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCompetitorStatusesCountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCompetitorStatusesCountRequest>() {
           @Override
           public void write(JsonWriter out, GetCompetitorStatusesCountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCompetitorStatusesCountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetCompetitorStatusesCountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetCompetitorStatusesCountRequest
  * @throws IOException if the JSON string is invalid with respect to GetCompetitorStatusesCountRequest
  */
  public static GetCompetitorStatusesCountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCompetitorStatusesCountRequest.class);
  }

 /**
  * Convert an instance of GetCompetitorStatusesCountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

