/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * UpdateCountrySportSettingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class UpdateCountrySportSettingRequest {
  public static final String SERIALIZED_NAME_SPORT_ID_TO_UPDATE = "SportIdToUpdate";
  @SerializedName(SERIALIZED_NAME_SPORT_ID_TO_UPDATE)
  private Integer sportIdToUpdate;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_TO_UPDATE = "CountryCodeToUpdate";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_TO_UPDATE)
  private String countryCodeToUpdate;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_MIN_SELECTIONS_NUMBER = "MinSelectionsNumber";
  @SerializedName(SERIALIZED_NAME_MIN_SELECTIONS_NUMBER)
  private Integer minSelectionsNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CONFIG_ID = "CountryConfigId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CONFIG_ID)
  private Integer countryConfigId;

  public UpdateCountrySportSettingRequest() {
  }

  public UpdateCountrySportSettingRequest sportIdToUpdate(Integer sportIdToUpdate) {
    this.sportIdToUpdate = sportIdToUpdate;
    return this;
  }

   /**
   * Get sportIdToUpdate
   * @return sportIdToUpdate
  **/
  @javax.annotation.Nullable
  public Integer getSportIdToUpdate() {
    return sportIdToUpdate;
  }

  public void setSportIdToUpdate(Integer sportIdToUpdate) {
    this.sportIdToUpdate = sportIdToUpdate;
  }


  public UpdateCountrySportSettingRequest countryCodeToUpdate(String countryCodeToUpdate) {
    this.countryCodeToUpdate = countryCodeToUpdate;
    return this;
  }

   /**
   * Get countryCodeToUpdate
   * @return countryCodeToUpdate
  **/
  @javax.annotation.Nullable
  public String getCountryCodeToUpdate() {
    return countryCodeToUpdate;
  }

  public void setCountryCodeToUpdate(String countryCodeToUpdate) {
    this.countryCodeToUpdate = countryCodeToUpdate;
  }


  public UpdateCountrySportSettingRequest sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nullable
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public UpdateCountrySportSettingRequest countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public UpdateCountrySportSettingRequest minSelectionsNumber(Integer minSelectionsNumber) {
    this.minSelectionsNumber = minSelectionsNumber;
    return this;
  }

   /**
   * Get minSelectionsNumber
   * @return minSelectionsNumber
  **/
  @javax.annotation.Nullable
  public Integer getMinSelectionsNumber() {
    return minSelectionsNumber;
  }

  public void setMinSelectionsNumber(Integer minSelectionsNumber) {
    this.minSelectionsNumber = minSelectionsNumber;
  }


  public UpdateCountrySportSettingRequest countryConfigId(Integer countryConfigId) {
    this.countryConfigId = countryConfigId;
    return this;
  }

   /**
   * Get countryConfigId
   * @return countryConfigId
  **/
  @javax.annotation.Nullable
  public Integer getCountryConfigId() {
    return countryConfigId;
  }

  public void setCountryConfigId(Integer countryConfigId) {
    this.countryConfigId = countryConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCountrySportSettingRequest updateCountrySportSettingRequest = (UpdateCountrySportSettingRequest) o;
    return Objects.equals(this.sportIdToUpdate, updateCountrySportSettingRequest.sportIdToUpdate) &&
        Objects.equals(this.countryCodeToUpdate, updateCountrySportSettingRequest.countryCodeToUpdate) &&
        Objects.equals(this.sportId, updateCountrySportSettingRequest.sportId) &&
        Objects.equals(this.countryCode, updateCountrySportSettingRequest.countryCode) &&
        Objects.equals(this.minSelectionsNumber, updateCountrySportSettingRequest.minSelectionsNumber) &&
        Objects.equals(this.countryConfigId, updateCountrySportSettingRequest.countryConfigId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportIdToUpdate, countryCodeToUpdate, sportId, countryCode, minSelectionsNumber, countryConfigId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCountrySportSettingRequest {\n");
    sb.append("    sportIdToUpdate: ").append(toIndentedString(sportIdToUpdate)).append("\n");
    sb.append("    countryCodeToUpdate: ").append(toIndentedString(countryCodeToUpdate)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    minSelectionsNumber: ").append(toIndentedString(minSelectionsNumber)).append("\n");
    sb.append("    countryConfigId: ").append(toIndentedString(countryConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportIdToUpdate");
    openapiFields.add("CountryCodeToUpdate");
    openapiFields.add("SportId");
    openapiFields.add("CountryCode");
    openapiFields.add("MinSelectionsNumber");
    openapiFields.add("CountryConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateCountrySportSettingRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCountrySportSettingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCountrySportSettingRequest is not found in the empty JSON string", UpdateCountrySportSettingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCountrySportSettingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCountrySportSettingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CountryCodeToUpdate") != null && !jsonObj.get("CountryCodeToUpdate").isJsonNull()) && !jsonObj.get("CountryCodeToUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCodeToUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCodeToUpdate").toString()));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCountrySportSettingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCountrySportSettingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCountrySportSettingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCountrySportSettingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCountrySportSettingRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCountrySportSettingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCountrySportSettingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateCountrySportSettingRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCountrySportSettingRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateCountrySportSettingRequest
  */
  public static UpdateCountrySportSettingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCountrySportSettingRequest.class);
  }

 /**
  * Convert an instance of UpdateCountrySportSettingRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

