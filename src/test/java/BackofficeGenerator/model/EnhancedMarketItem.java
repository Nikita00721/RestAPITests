/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * EnhancedMarketItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class EnhancedMarketItem {
  public static final String SERIALIZED_NAME_FEED_PROVIDER_ID = "FeedProviderId";
  @SerializedName(SERIALIZED_NAME_FEED_PROVIDER_ID)
  private Integer feedProviderId;

  public static final String SERIALIZED_NAME_FEED_MARGIN = "FeedMargin";
  @SerializedName(SERIALIZED_NAME_FEED_MARGIN)
  private Double feedMargin;

  public static final String SERIALIZED_NAME_ENHANCED_MARGIN = "EnhancedMargin";
  @SerializedName(SERIALIZED_NAME_ENHANCED_MARGIN)
  private Double enhancedMargin;

  public static final String SERIALIZED_NAME_ODDS_CONFLICT = "OddsConflict";
  @SerializedName(SERIALIZED_NAME_ODDS_CONFLICT)
  private Boolean oddsConflict;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<EnhancedOddItem> items;

  public static final String SERIALIZED_NAME_FEED_PROVIDER_NAME = "FeedProviderName";
  @SerializedName(SERIALIZED_NAME_FEED_PROVIDER_NAME)
  private String feedProviderName;

  public EnhancedMarketItem() {
  }

  public EnhancedMarketItem feedProviderId(Integer feedProviderId) {
    this.feedProviderId = feedProviderId;
    return this;
  }

   /**
   * Get feedProviderId
   * @return feedProviderId
  **/
  @javax.annotation.Nullable
  public Integer getFeedProviderId() {
    return feedProviderId;
  }

  public void setFeedProviderId(Integer feedProviderId) {
    this.feedProviderId = feedProviderId;
  }


  public EnhancedMarketItem feedMargin(Double feedMargin) {
    this.feedMargin = feedMargin;
    return this;
  }

   /**
   * Get feedMargin
   * @return feedMargin
  **/
  @javax.annotation.Nullable
  public Double getFeedMargin() {
    return feedMargin;
  }

  public void setFeedMargin(Double feedMargin) {
    this.feedMargin = feedMargin;
  }


  public EnhancedMarketItem enhancedMargin(Double enhancedMargin) {
    this.enhancedMargin = enhancedMargin;
    return this;
  }

   /**
   * Get enhancedMargin
   * @return enhancedMargin
  **/
  @javax.annotation.Nullable
  public Double getEnhancedMargin() {
    return enhancedMargin;
  }

  public void setEnhancedMargin(Double enhancedMargin) {
    this.enhancedMargin = enhancedMargin;
  }


  public EnhancedMarketItem oddsConflict(Boolean oddsConflict) {
    this.oddsConflict = oddsConflict;
    return this;
  }

   /**
   * Get oddsConflict
   * @return oddsConflict
  **/
  @javax.annotation.Nullable
  public Boolean getOddsConflict() {
    return oddsConflict;
  }

  public void setOddsConflict(Boolean oddsConflict) {
    this.oddsConflict = oddsConflict;
  }


  public EnhancedMarketItem items(List<EnhancedOddItem> items) {
    this.items = items;
    return this;
  }

  public EnhancedMarketItem addItemsItem(EnhancedOddItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public List<EnhancedOddItem> getItems() {
    return items;
  }

  public void setItems(List<EnhancedOddItem> items) {
    this.items = items;
  }


  public EnhancedMarketItem feedProviderName(String feedProviderName) {
    this.feedProviderName = feedProviderName;
    return this;
  }

   /**
   * Get feedProviderName
   * @return feedProviderName
  **/
  @javax.annotation.Nullable
  public String getFeedProviderName() {
    return feedProviderName;
  }

  public void setFeedProviderName(String feedProviderName) {
    this.feedProviderName = feedProviderName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnhancedMarketItem enhancedMarketItem = (EnhancedMarketItem) o;
    return Objects.equals(this.feedProviderId, enhancedMarketItem.feedProviderId) &&
        Objects.equals(this.feedMargin, enhancedMarketItem.feedMargin) &&
        Objects.equals(this.enhancedMargin, enhancedMarketItem.enhancedMargin) &&
        Objects.equals(this.oddsConflict, enhancedMarketItem.oddsConflict) &&
        Objects.equals(this.items, enhancedMarketItem.items) &&
        Objects.equals(this.feedProviderName, enhancedMarketItem.feedProviderName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedProviderId, feedMargin, enhancedMargin, oddsConflict, items, feedProviderName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnhancedMarketItem {\n");
    sb.append("    feedProviderId: ").append(toIndentedString(feedProviderId)).append("\n");
    sb.append("    feedMargin: ").append(toIndentedString(feedMargin)).append("\n");
    sb.append("    enhancedMargin: ").append(toIndentedString(enhancedMargin)).append("\n");
    sb.append("    oddsConflict: ").append(toIndentedString(oddsConflict)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    feedProviderName: ").append(toIndentedString(feedProviderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeedProviderId");
    openapiFields.add("FeedMargin");
    openapiFields.add("EnhancedMargin");
    openapiFields.add("OddsConflict");
    openapiFields.add("Items");
    openapiFields.add("FeedProviderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnhancedMarketItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnhancedMarketItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnhancedMarketItem is not found in the empty JSON string", EnhancedMarketItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnhancedMarketItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnhancedMarketItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("Items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
          }

          // validate the optional field `Items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            EnhancedOddItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("FeedProviderName") != null && !jsonObj.get("FeedProviderName").isJsonNull()) && !jsonObj.get("FeedProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeedProviderName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnhancedMarketItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnhancedMarketItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnhancedMarketItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnhancedMarketItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EnhancedMarketItem>() {
           @Override
           public void write(JsonWriter out, EnhancedMarketItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnhancedMarketItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnhancedMarketItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnhancedMarketItem
  * @throws IOException if the JSON string is invalid with respect to EnhancedMarketItem
  */
  public static EnhancedMarketItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnhancedMarketItem.class);
  }

 /**
  * Convert an instance of EnhancedMarketItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

