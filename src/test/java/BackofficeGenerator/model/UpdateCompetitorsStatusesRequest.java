/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * UpdateCompetitorsStatusesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class UpdateCompetitorsStatusesRequest {
  public static final String SERIALIZED_NAME_CHAMPIONSHIP_ID = "ChampionshipId";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_ID)
  private Integer championshipId;

  public static final String SERIALIZED_NAME_BIRTHDAY_STATUSES = "BirthdayStatuses";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY_STATUSES)
  private List<Integer> birthdayStatuses;

  public static final String SERIALIZED_NAME_U18 = "U18";
  @SerializedName(SERIALIZED_NAME_U18)
  private Boolean U18;

  public static final String SERIALIZED_NAME_NO_JERSEY = "NoJersey";
  @SerializedName(SERIALIZED_NAME_NO_JERSEY)
  private Boolean noJersey;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_BIRTHDATE_FROM = "BirthdateFrom";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_FROM)
  private OffsetDateTime birthdateFrom;

  public static final String SERIALIZED_NAME_BIRTHDATE_TO = "BirthdateTo";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE_TO)
  private OffsetDateTime birthdateTo;

  public static final String SERIALIZED_NAME_NEW_STATUS = "NewStatus";
  @SerializedName(SERIALIZED_NAME_NEW_STATUS)
  private CompetitorStatus newStatus;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COMPETITOR_IDS = "CompetitorIds";
  @SerializedName(SERIALIZED_NAME_COMPETITOR_IDS)
  private List<Integer> competitorIds;

  public UpdateCompetitorsStatusesRequest() {
  }

  public UpdateCompetitorsStatusesRequest championshipId(Integer championshipId) {
    this.championshipId = championshipId;
    return this;
  }

   /**
   * Get championshipId
   * @return championshipId
  **/
  @javax.annotation.Nullable
  public Integer getChampionshipId() {
    return championshipId;
  }

  public void setChampionshipId(Integer championshipId) {
    this.championshipId = championshipId;
  }


  public UpdateCompetitorsStatusesRequest birthdayStatuses(List<Integer> birthdayStatuses) {
    this.birthdayStatuses = birthdayStatuses;
    return this;
  }

  public UpdateCompetitorsStatusesRequest addBirthdayStatusesItem(Integer birthdayStatusesItem) {
    if (this.birthdayStatuses == null) {
      this.birthdayStatuses = new ArrayList<>();
    }
    this.birthdayStatuses.add(birthdayStatusesItem);
    return this;
  }

   /**
   * Get birthdayStatuses
   * @return birthdayStatuses
  **/
  @javax.annotation.Nullable
  public List<Integer> getBirthdayStatuses() {
    return birthdayStatuses;
  }

  public void setBirthdayStatuses(List<Integer> birthdayStatuses) {
    this.birthdayStatuses = birthdayStatuses;
  }


  public UpdateCompetitorsStatusesRequest U18(Boolean U18) {
    this.U18 = U18;
    return this;
  }

   /**
   * Get U18
   * @return U18
  **/
  @javax.annotation.Nullable
  public Boolean getU18() {
    return U18;
  }

  public void setU18(Boolean U18) {
    this.U18 = U18;
  }


  public UpdateCompetitorsStatusesRequest noJersey(Boolean noJersey) {
    this.noJersey = noJersey;
    return this;
  }

   /**
   * Get noJersey
   * @return noJersey
  **/
  @javax.annotation.Nullable
  public Boolean getNoJersey() {
    return noJersey;
  }

  public void setNoJersey(Boolean noJersey) {
    this.noJersey = noJersey;
  }


  public UpdateCompetitorsStatusesRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateCompetitorsStatusesRequest sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public UpdateCompetitorsStatusesRequest birthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
    return this;
  }

   /**
   * Get birthdateFrom
   * @return birthdateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateFrom() {
    return birthdateFrom;
  }

  public void setBirthdateFrom(OffsetDateTime birthdateFrom) {
    this.birthdateFrom = birthdateFrom;
  }


  public UpdateCompetitorsStatusesRequest birthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
    return this;
  }

   /**
   * Get birthdateTo
   * @return birthdateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getBirthdateTo() {
    return birthdateTo;
  }

  public void setBirthdateTo(OffsetDateTime birthdateTo) {
    this.birthdateTo = birthdateTo;
  }


  public UpdateCompetitorsStatusesRequest newStatus(CompetitorStatus newStatus) {
    this.newStatus = newStatus;
    return this;
  }

   /**
   * Get newStatus
   * @return newStatus
  **/
  @javax.annotation.Nullable
  public CompetitorStatus getNewStatus() {
    return newStatus;
  }

  public void setNewStatus(CompetitorStatus newStatus) {
    this.newStatus = newStatus;
  }


  public UpdateCompetitorsStatusesRequest countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public UpdateCompetitorsStatusesRequest competitorIds(List<Integer> competitorIds) {
    this.competitorIds = competitorIds;
    return this;
  }

  public UpdateCompetitorsStatusesRequest addCompetitorIdsItem(Integer competitorIdsItem) {
    if (this.competitorIds == null) {
      this.competitorIds = new ArrayList<>();
    }
    this.competitorIds.add(competitorIdsItem);
    return this;
  }

   /**
   * Get competitorIds
   * @return competitorIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCompetitorIds() {
    return competitorIds;
  }

  public void setCompetitorIds(List<Integer> competitorIds) {
    this.competitorIds = competitorIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCompetitorsStatusesRequest updateCompetitorsStatusesRequest = (UpdateCompetitorsStatusesRequest) o;
    return Objects.equals(this.championshipId, updateCompetitorsStatusesRequest.championshipId) &&
        Objects.equals(this.birthdayStatuses, updateCompetitorsStatusesRequest.birthdayStatuses) &&
        Objects.equals(this.U18, updateCompetitorsStatusesRequest.U18) &&
        Objects.equals(this.noJersey, updateCompetitorsStatusesRequest.noJersey) &&
        Objects.equals(this.name, updateCompetitorsStatusesRequest.name) &&
        Objects.equals(this.sportName, updateCompetitorsStatusesRequest.sportName) &&
        Objects.equals(this.birthdateFrom, updateCompetitorsStatusesRequest.birthdateFrom) &&
        Objects.equals(this.birthdateTo, updateCompetitorsStatusesRequest.birthdateTo) &&
        Objects.equals(this.newStatus, updateCompetitorsStatusesRequest.newStatus) &&
        Objects.equals(this.countryCode, updateCompetitorsStatusesRequest.countryCode) &&
        Objects.equals(this.competitorIds, updateCompetitorsStatusesRequest.competitorIds);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(championshipId, birthdayStatuses, U18, noJersey, name, sportName, birthdateFrom, birthdateTo, newStatus, countryCode, competitorIds);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCompetitorsStatusesRequest {\n");
    sb.append("    championshipId: ").append(toIndentedString(championshipId)).append("\n");
    sb.append("    birthdayStatuses: ").append(toIndentedString(birthdayStatuses)).append("\n");
    sb.append("    U18: ").append(toIndentedString(U18)).append("\n");
    sb.append("    noJersey: ").append(toIndentedString(noJersey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    birthdateFrom: ").append(toIndentedString(birthdateFrom)).append("\n");
    sb.append("    birthdateTo: ").append(toIndentedString(birthdateTo)).append("\n");
    sb.append("    newStatus: ").append(toIndentedString(newStatus)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    competitorIds: ").append(toIndentedString(competitorIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChampionshipId");
    openapiFields.add("BirthdayStatuses");
    openapiFields.add("U18");
    openapiFields.add("NoJersey");
    openapiFields.add("Name");
    openapiFields.add("SportName");
    openapiFields.add("BirthdateFrom");
    openapiFields.add("BirthdateTo");
    openapiFields.add("NewStatus");
    openapiFields.add("CountryCode");
    openapiFields.add("CompetitorIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateCompetitorsStatusesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCompetitorsStatusesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCompetitorsStatusesRequest is not found in the empty JSON string", UpdateCompetitorsStatusesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCompetitorsStatusesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCompetitorsStatusesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BirthdayStatuses") != null && !jsonObj.get("BirthdayStatuses").isJsonNull() && !jsonObj.get("BirthdayStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthdayStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("BirthdayStatuses").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      // validate the optional field `NewStatus`
      if (jsonObj.get("NewStatus") != null && !jsonObj.get("NewStatus").isJsonNull()) {
        CompetitorStatus.validateJsonElement(jsonObj.get("NewStatus"));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CompetitorIds") != null && !jsonObj.get("CompetitorIds").isJsonNull() && !jsonObj.get("CompetitorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompetitorIds` to be an array in the JSON string but got `%s`", jsonObj.get("CompetitorIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCompetitorsStatusesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCompetitorsStatusesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCompetitorsStatusesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCompetitorsStatusesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCompetitorsStatusesRequest>() {
           @Override
           public void write(JsonWriter out, UpdateCompetitorsStatusesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCompetitorsStatusesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateCompetitorsStatusesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCompetitorsStatusesRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateCompetitorsStatusesRequest
  */
  public static UpdateCompetitorsStatusesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCompetitorsStatusesRequest.class);
  }

 /**
  * Convert an instance of UpdateCompetitorsStatusesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

