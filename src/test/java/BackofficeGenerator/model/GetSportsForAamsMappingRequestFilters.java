/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetSportsForAamsMappingRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetSportsForAamsMappingRequestFilters {
  public static final String SERIALIZED_NAME_INTERNAL_SPORT_ID = "InternalSportId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SPORT_ID)
  private Integer internalSportId;

  public static final String SERIALIZED_NAME_EXTERNAL_SPORT_ID = "ExternalSportId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SPORT_ID)
  private Integer externalSportId;

  public static final String SERIALIZED_NAME_AAMS_SPORT_NAME = "AamsSportName";
  @SerializedName(SERIALIZED_NAME_AAMS_SPORT_NAME)
  private String aamsSportName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MappingStatus status;

  public static final String SERIALIZED_NAME_INTERNAL_SPORT_NAME = "InternalSportName";
  @SerializedName(SERIALIZED_NAME_INTERNAL_SPORT_NAME)
  private String internalSportName;

  public GetSportsForAamsMappingRequestFilters() {
  }

  public GetSportsForAamsMappingRequestFilters internalSportId(Integer internalSportId) {
    this.internalSportId = internalSportId;
    return this;
  }

   /**
   * Get internalSportId
   * @return internalSportId
  **/
  @javax.annotation.Nullable
  public Integer getInternalSportId() {
    return internalSportId;
  }

  public void setInternalSportId(Integer internalSportId) {
    this.internalSportId = internalSportId;
  }


  public GetSportsForAamsMappingRequestFilters externalSportId(Integer externalSportId) {
    this.externalSportId = externalSportId;
    return this;
  }

   /**
   * Get externalSportId
   * @return externalSportId
  **/
  @javax.annotation.Nullable
  public Integer getExternalSportId() {
    return externalSportId;
  }

  public void setExternalSportId(Integer externalSportId) {
    this.externalSportId = externalSportId;
  }


  public GetSportsForAamsMappingRequestFilters aamsSportName(String aamsSportName) {
    this.aamsSportName = aamsSportName;
    return this;
  }

   /**
   * Get aamsSportName
   * @return aamsSportName
  **/
  @javax.annotation.Nullable
  public String getAamsSportName() {
    return aamsSportName;
  }

  public void setAamsSportName(String aamsSportName) {
    this.aamsSportName = aamsSportName;
  }


  public GetSportsForAamsMappingRequestFilters status(MappingStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public MappingStatus getStatus() {
    return status;
  }

  public void setStatus(MappingStatus status) {
    this.status = status;
  }


  public GetSportsForAamsMappingRequestFilters internalSportName(String internalSportName) {
    this.internalSportName = internalSportName;
    return this;
  }

   /**
   * Get internalSportName
   * @return internalSportName
  **/
  @javax.annotation.Nullable
  public String getInternalSportName() {
    return internalSportName;
  }

  public void setInternalSportName(String internalSportName) {
    this.internalSportName = internalSportName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSportsForAamsMappingRequestFilters getSportsForAamsMappingRequestFilters = (GetSportsForAamsMappingRequestFilters) o;
    return Objects.equals(this.internalSportId, getSportsForAamsMappingRequestFilters.internalSportId) &&
        Objects.equals(this.externalSportId, getSportsForAamsMappingRequestFilters.externalSportId) &&
        Objects.equals(this.aamsSportName, getSportsForAamsMappingRequestFilters.aamsSportName) &&
        Objects.equals(this.status, getSportsForAamsMappingRequestFilters.status) &&
        Objects.equals(this.internalSportName, getSportsForAamsMappingRequestFilters.internalSportName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalSportId, externalSportId, aamsSportName, status, internalSportName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSportsForAamsMappingRequestFilters {\n");
    sb.append("    internalSportId: ").append(toIndentedString(internalSportId)).append("\n");
    sb.append("    externalSportId: ").append(toIndentedString(externalSportId)).append("\n");
    sb.append("    aamsSportName: ").append(toIndentedString(aamsSportName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    internalSportName: ").append(toIndentedString(internalSportName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InternalSportId");
    openapiFields.add("ExternalSportId");
    openapiFields.add("AamsSportName");
    openapiFields.add("Status");
    openapiFields.add("InternalSportName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetSportsForAamsMappingRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSportsForAamsMappingRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSportsForAamsMappingRequestFilters is not found in the empty JSON string", GetSportsForAamsMappingRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSportsForAamsMappingRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSportsForAamsMappingRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AamsSportName") != null && !jsonObj.get("AamsSportName").isJsonNull()) && !jsonObj.get("AamsSportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsSportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsSportName").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MappingStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("InternalSportName") != null && !jsonObj.get("InternalSportName").isJsonNull()) && !jsonObj.get("InternalSportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalSportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalSportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSportsForAamsMappingRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSportsForAamsMappingRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSportsForAamsMappingRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSportsForAamsMappingRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSportsForAamsMappingRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetSportsForAamsMappingRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSportsForAamsMappingRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetSportsForAamsMappingRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetSportsForAamsMappingRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetSportsForAamsMappingRequestFilters
  */
  public static GetSportsForAamsMappingRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSportsForAamsMappingRequestFilters.class);
  }

 /**
  * Convert an instance of GetSportsForAamsMappingRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

