/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * PendingMarketInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class PendingMarketInfo {
  public static final String SERIALIZED_NAME_INT_EVENT_ID = "IntEventId";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_ID)
  private Long intEventId;

  public static final String SERIALIZED_NAME_EVENT_NAME = "EventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EXT_MARKET_ID = "ExtMarketId";
  @SerializedName(SERIALIZED_NAME_EXT_MARKET_ID)
  private Integer extMarketId;

  public static final String SERIALIZED_NAME_MARKET_NAME = "MarketName";
  @SerializedName(SERIALIZED_NAME_MARKET_NAME)
  private String marketName;

  public static final String SERIALIZED_NAME_INT_MARKET_NAMES = "IntMarketNames";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_NAMES)
  private String intMarketNames;

  public static final String SERIALIZED_NAME_INT_MARKET_TYPE_IDS = "IntMarketTypeIds";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_TYPE_IDS)
  private String intMarketTypeIds;

  public static final String SERIALIZED_NAME_VARS = "Vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private String vars;

  public static final String SERIALIZED_NAME_EXT_EVENT_ID = "ExtEventId";
  @SerializedName(SERIALIZED_NAME_EXT_EVENT_ID)
  private String extEventId;

  public PendingMarketInfo() {
  }

  public PendingMarketInfo intEventId(Long intEventId) {
    this.intEventId = intEventId;
    return this;
  }

   /**
   * Get intEventId
   * @return intEventId
  **/
  @javax.annotation.Nullable
  public Long getIntEventId() {
    return intEventId;
  }

  public void setIntEventId(Long intEventId) {
    this.intEventId = intEventId;
  }


  public PendingMarketInfo eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Get eventName
   * @return eventName
  **/
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public PendingMarketInfo eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public PendingMarketInfo extMarketId(Integer extMarketId) {
    this.extMarketId = extMarketId;
    return this;
  }

   /**
   * Get extMarketId
   * @return extMarketId
  **/
  @javax.annotation.Nullable
  public Integer getExtMarketId() {
    return extMarketId;
  }

  public void setExtMarketId(Integer extMarketId) {
    this.extMarketId = extMarketId;
  }


  public PendingMarketInfo marketName(String marketName) {
    this.marketName = marketName;
    return this;
  }

   /**
   * Get marketName
   * @return marketName
  **/
  @javax.annotation.Nullable
  public String getMarketName() {
    return marketName;
  }

  public void setMarketName(String marketName) {
    this.marketName = marketName;
  }


  public PendingMarketInfo intMarketNames(String intMarketNames) {
    this.intMarketNames = intMarketNames;
    return this;
  }

   /**
   * Get intMarketNames
   * @return intMarketNames
  **/
  @javax.annotation.Nullable
  public String getIntMarketNames() {
    return intMarketNames;
  }

  public void setIntMarketNames(String intMarketNames) {
    this.intMarketNames = intMarketNames;
  }


  public PendingMarketInfo intMarketTypeIds(String intMarketTypeIds) {
    this.intMarketTypeIds = intMarketTypeIds;
    return this;
  }

   /**
   * Get intMarketTypeIds
   * @return intMarketTypeIds
  **/
  @javax.annotation.Nullable
  public String getIntMarketTypeIds() {
    return intMarketTypeIds;
  }

  public void setIntMarketTypeIds(String intMarketTypeIds) {
    this.intMarketTypeIds = intMarketTypeIds;
  }


  public PendingMarketInfo vars(String vars) {
    this.vars = vars;
    return this;
  }

   /**
   * Get vars
   * @return vars
  **/
  @javax.annotation.Nullable
  public String getVars() {
    return vars;
  }

  public void setVars(String vars) {
    this.vars = vars;
  }


  public PendingMarketInfo extEventId(String extEventId) {
    this.extEventId = extEventId;
    return this;
  }

   /**
   * Get extEventId
   * @return extEventId
  **/
  @javax.annotation.Nullable
  public String getExtEventId() {
    return extEventId;
  }

  public void setExtEventId(String extEventId) {
    this.extEventId = extEventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingMarketInfo pendingMarketInfo = (PendingMarketInfo) o;
    return Objects.equals(this.intEventId, pendingMarketInfo.intEventId) &&
        Objects.equals(this.eventName, pendingMarketInfo.eventName) &&
        Objects.equals(this.eventDate, pendingMarketInfo.eventDate) &&
        Objects.equals(this.extMarketId, pendingMarketInfo.extMarketId) &&
        Objects.equals(this.marketName, pendingMarketInfo.marketName) &&
        Objects.equals(this.intMarketNames, pendingMarketInfo.intMarketNames) &&
        Objects.equals(this.intMarketTypeIds, pendingMarketInfo.intMarketTypeIds) &&
        Objects.equals(this.vars, pendingMarketInfo.vars) &&
        Objects.equals(this.extEventId, pendingMarketInfo.extEventId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(intEventId, eventName, eventDate, extMarketId, marketName, intMarketNames, intMarketTypeIds, vars, extEventId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingMarketInfo {\n");
    sb.append("    intEventId: ").append(toIndentedString(intEventId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    extMarketId: ").append(toIndentedString(extMarketId)).append("\n");
    sb.append("    marketName: ").append(toIndentedString(marketName)).append("\n");
    sb.append("    intMarketNames: ").append(toIndentedString(intMarketNames)).append("\n");
    sb.append("    intMarketTypeIds: ").append(toIndentedString(intMarketTypeIds)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("    extEventId: ").append(toIndentedString(extEventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntEventId");
    openapiFields.add("EventName");
    openapiFields.add("EventDate");
    openapiFields.add("ExtMarketId");
    openapiFields.add("MarketName");
    openapiFields.add("IntMarketNames");
    openapiFields.add("IntMarketTypeIds");
    openapiFields.add("Vars");
    openapiFields.add("ExtEventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PendingMarketInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingMarketInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingMarketInfo is not found in the empty JSON string", PendingMarketInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingMarketInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingMarketInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EventName") != null && !jsonObj.get("EventName").isJsonNull()) && !jsonObj.get("EventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventName").toString()));
      }
      if ((jsonObj.get("MarketName") != null && !jsonObj.get("MarketName").isJsonNull()) && !jsonObj.get("MarketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketName").toString()));
      }
      if ((jsonObj.get("IntMarketNames") != null && !jsonObj.get("IntMarketNames").isJsonNull()) && !jsonObj.get("IntMarketNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntMarketNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntMarketNames").toString()));
      }
      if ((jsonObj.get("IntMarketTypeIds") != null && !jsonObj.get("IntMarketTypeIds").isJsonNull()) && !jsonObj.get("IntMarketTypeIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntMarketTypeIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntMarketTypeIds").toString()));
      }
      if ((jsonObj.get("Vars") != null && !jsonObj.get("Vars").isJsonNull()) && !jsonObj.get("Vars").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Vars` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Vars").toString()));
      }
      if ((jsonObj.get("ExtEventId") != null && !jsonObj.get("ExtEventId").isJsonNull()) && !jsonObj.get("ExtEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtEventId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingMarketInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingMarketInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingMarketInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingMarketInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingMarketInfo>() {
           @Override
           public void write(JsonWriter out, PendingMarketInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingMarketInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PendingMarketInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PendingMarketInfo
  * @throws IOException if the JSON string is invalid with respect to PendingMarketInfo
  */
  public static PendingMarketInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingMarketInfo.class);
  }

 /**
  * Convert an instance of PendingMarketInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

