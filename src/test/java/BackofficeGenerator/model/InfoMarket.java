/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * InfoMarket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class InfoMarket {
  public static final String SERIALIZED_NAME_EVENT_NAME = "EventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_INT_EVENT_ID = "IntEventId";
  @SerializedName(SERIALIZED_NAME_INT_EVENT_ID)
  private Long intEventId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MARKET_ID = "MarketId";
  @SerializedName(SERIALIZED_NAME_MARKET_ID)
  private Long marketId;

  public static final String SERIALIZED_NAME_INT_MARKET_TYPE_ID = "IntMarketTypeId";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_TYPE_ID)
  private Integer intMarketTypeId;

  public static final String SERIALIZED_NAME_INT_MARKET_TYPE_NAME = "IntMarketTypeName";
  @SerializedName(SERIALIZED_NAME_INT_MARKET_TYPE_NAME)
  private String intMarketTypeName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_INFO_OUTCOMES = "InfoOutcomes";
  @SerializedName(SERIALIZED_NAME_INFO_OUTCOMES)
  private List<InfoOutcome> infoOutcomes;

  public static final String SERIALIZED_NAME_MATCH_ID = "MatchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private String matchId;

  public InfoMarket() {
  }

  public InfoMarket eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Get eventName
   * @return eventName
  **/
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public InfoMarket intEventId(Long intEventId) {
    this.intEventId = intEventId;
    return this;
  }

   /**
   * Get intEventId
   * @return intEventId
  **/
  @javax.annotation.Nullable
  public Long getIntEventId() {
    return intEventId;
  }

  public void setIntEventId(Long intEventId) {
    this.intEventId = intEventId;
  }


  public InfoMarket description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InfoMarket marketId(Long marketId) {
    this.marketId = marketId;
    return this;
  }

   /**
   * Get marketId
   * @return marketId
  **/
  @javax.annotation.Nullable
  public Long getMarketId() {
    return marketId;
  }

  public void setMarketId(Long marketId) {
    this.marketId = marketId;
  }


  public InfoMarket intMarketTypeId(Integer intMarketTypeId) {
    this.intMarketTypeId = intMarketTypeId;
    return this;
  }

   /**
   * Get intMarketTypeId
   * @return intMarketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getIntMarketTypeId() {
    return intMarketTypeId;
  }

  public void setIntMarketTypeId(Integer intMarketTypeId) {
    this.intMarketTypeId = intMarketTypeId;
  }


  public InfoMarket intMarketTypeName(String intMarketTypeName) {
    this.intMarketTypeName = intMarketTypeName;
    return this;
  }

   /**
   * Get intMarketTypeName
   * @return intMarketTypeName
  **/
  @javax.annotation.Nullable
  public String getIntMarketTypeName() {
    return intMarketTypeName;
  }

  public void setIntMarketTypeName(String intMarketTypeName) {
    this.intMarketTypeName = intMarketTypeName;
  }


  public InfoMarket status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public InfoMarket statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Get statusDescription
   * @return statusDescription
  **/
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public InfoMarket infoOutcomes(List<InfoOutcome> infoOutcomes) {
    this.infoOutcomes = infoOutcomes;
    return this;
  }

  public InfoMarket addInfoOutcomesItem(InfoOutcome infoOutcomesItem) {
    if (this.infoOutcomes == null) {
      this.infoOutcomes = new ArrayList<>();
    }
    this.infoOutcomes.add(infoOutcomesItem);
    return this;
  }

   /**
   * Get infoOutcomes
   * @return infoOutcomes
  **/
  @javax.annotation.Nullable
  public List<InfoOutcome> getInfoOutcomes() {
    return infoOutcomes;
  }

  public void setInfoOutcomes(List<InfoOutcome> infoOutcomes) {
    this.infoOutcomes = infoOutcomes;
  }


  public InfoMarket matchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

   /**
   * Get matchId
   * @return matchId
  **/
  @javax.annotation.Nullable
  public String getMatchId() {
    return matchId;
  }

  public void setMatchId(String matchId) {
    this.matchId = matchId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoMarket infoMarket = (InfoMarket) o;
    return Objects.equals(this.eventName, infoMarket.eventName) &&
        Objects.equals(this.intEventId, infoMarket.intEventId) &&
        Objects.equals(this.description, infoMarket.description) &&
        Objects.equals(this.marketId, infoMarket.marketId) &&
        Objects.equals(this.intMarketTypeId, infoMarket.intMarketTypeId) &&
        Objects.equals(this.intMarketTypeName, infoMarket.intMarketTypeName) &&
        Objects.equals(this.status, infoMarket.status) &&
        Objects.equals(this.statusDescription, infoMarket.statusDescription) &&
        Objects.equals(this.infoOutcomes, infoMarket.infoOutcomes) &&
        Objects.equals(this.matchId, infoMarket.matchId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, intEventId, description, marketId, intMarketTypeId, intMarketTypeName, status, statusDescription, infoOutcomes, matchId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoMarket {\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    intEventId: ").append(toIndentedString(intEventId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    marketId: ").append(toIndentedString(marketId)).append("\n");
    sb.append("    intMarketTypeId: ").append(toIndentedString(intMarketTypeId)).append("\n");
    sb.append("    intMarketTypeName: ").append(toIndentedString(intMarketTypeName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    infoOutcomes: ").append(toIndentedString(infoOutcomes)).append("\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventName");
    openapiFields.add("IntEventId");
    openapiFields.add("Description");
    openapiFields.add("MarketId");
    openapiFields.add("IntMarketTypeId");
    openapiFields.add("IntMarketTypeName");
    openapiFields.add("Status");
    openapiFields.add("StatusDescription");
    openapiFields.add("InfoOutcomes");
    openapiFields.add("MatchId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InfoMarket
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoMarket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoMarket is not found in the empty JSON string", InfoMarket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoMarket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoMarket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EventName") != null && !jsonObj.get("EventName").isJsonNull()) && !jsonObj.get("EventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("IntMarketTypeName") != null && !jsonObj.get("IntMarketTypeName").isJsonNull()) && !jsonObj.get("IntMarketTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntMarketTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntMarketTypeName").toString()));
      }
      if ((jsonObj.get("StatusDescription") != null && !jsonObj.get("StatusDescription").isJsonNull()) && !jsonObj.get("StatusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusDescription").toString()));
      }
      if (jsonObj.get("InfoOutcomes") != null && !jsonObj.get("InfoOutcomes").isJsonNull()) {
        JsonArray jsonArrayinfoOutcomes = jsonObj.getAsJsonArray("InfoOutcomes");
        if (jsonArrayinfoOutcomes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("InfoOutcomes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `InfoOutcomes` to be an array in the JSON string but got `%s`", jsonObj.get("InfoOutcomes").toString()));
          }

          // validate the optional field `InfoOutcomes` (array)
          for (int i = 0; i < jsonArrayinfoOutcomes.size(); i++) {
            InfoOutcome.validateJsonElement(jsonArrayinfoOutcomes.get(i));
          };
        }
      }
      if ((jsonObj.get("MatchId") != null && !jsonObj.get("MatchId").isJsonNull()) && !jsonObj.get("MatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatchId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoMarket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoMarket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoMarket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoMarket.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoMarket>() {
           @Override
           public void write(JsonWriter out, InfoMarket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoMarket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InfoMarket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InfoMarket
  * @throws IOException if the JSON string is invalid with respect to InfoMarket
  */
  public static InfoMarket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoMarket.class);
  }

 /**
  * Convert an instance of InfoMarket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

