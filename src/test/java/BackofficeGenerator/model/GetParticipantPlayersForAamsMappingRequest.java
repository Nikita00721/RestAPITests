/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetParticipantPlayersForAamsMappingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetParticipantPlayersForAamsMappingRequest {
  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_INT_COMPETITOR_ID = "IntCompetitorId";
  @SerializedName(SERIALIZED_NAME_INT_COMPETITOR_ID)
  private Integer intCompetitorId;

  public static final String SERIALIZED_NAME_INT_PLAYER_ID = "IntPlayerId";
  @SerializedName(SERIALIZED_NAME_INT_PLAYER_ID)
  private Integer intPlayerId;

  public static final String SERIALIZED_NAME_INT_PLAYER_NAME = "IntPlayerName";
  @SerializedName(SERIALIZED_NAME_INT_PLAYER_NAME)
  private String intPlayerName;

  public static final String SERIALIZED_NAME_AAMS_PLAYER_ID = "AamsPlayerId";
  @SerializedName(SERIALIZED_NAME_AAMS_PLAYER_ID)
  private Integer aamsPlayerId;

  public static final String SERIALIZED_NAME_AAMS_EXT_PLAYER_ID = "AamsExtPlayerId";
  @SerializedName(SERIALIZED_NAME_AAMS_EXT_PLAYER_ID)
  private Integer aamsExtPlayerId;

  public static final String SERIALIZED_NAME_AAMS_PLAYER_NAME = "AamsPlayerName";
  @SerializedName(SERIALIZED_NAME_AAMS_PLAYER_NAME)
  private String aamsPlayerName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MappingStatus status;

  public static final String SERIALIZED_NAME_SPORT_CATEGORY_ID = "SportCategoryId";
  @SerializedName(SERIALIZED_NAME_SPORT_CATEGORY_ID)
  private Integer sportCategoryId;

  public GetParticipantPlayersForAamsMappingRequest() {
  }

  public GetParticipantPlayersForAamsMappingRequest teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public GetParticipantPlayersForAamsMappingRequest intCompetitorId(Integer intCompetitorId) {
    this.intCompetitorId = intCompetitorId;
    return this;
  }

   /**
   * Get intCompetitorId
   * @return intCompetitorId
  **/
  @javax.annotation.Nullable
  public Integer getIntCompetitorId() {
    return intCompetitorId;
  }

  public void setIntCompetitorId(Integer intCompetitorId) {
    this.intCompetitorId = intCompetitorId;
  }


  public GetParticipantPlayersForAamsMappingRequest intPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
    return this;
  }

   /**
   * Get intPlayerId
   * @return intPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getIntPlayerId() {
    return intPlayerId;
  }

  public void setIntPlayerId(Integer intPlayerId) {
    this.intPlayerId = intPlayerId;
  }


  public GetParticipantPlayersForAamsMappingRequest intPlayerName(String intPlayerName) {
    this.intPlayerName = intPlayerName;
    return this;
  }

   /**
   * Get intPlayerName
   * @return intPlayerName
  **/
  @javax.annotation.Nullable
  public String getIntPlayerName() {
    return intPlayerName;
  }

  public void setIntPlayerName(String intPlayerName) {
    this.intPlayerName = intPlayerName;
  }


  public GetParticipantPlayersForAamsMappingRequest aamsPlayerId(Integer aamsPlayerId) {
    this.aamsPlayerId = aamsPlayerId;
    return this;
  }

   /**
   * Get aamsPlayerId
   * @return aamsPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getAamsPlayerId() {
    return aamsPlayerId;
  }

  public void setAamsPlayerId(Integer aamsPlayerId) {
    this.aamsPlayerId = aamsPlayerId;
  }


  public GetParticipantPlayersForAamsMappingRequest aamsExtPlayerId(Integer aamsExtPlayerId) {
    this.aamsExtPlayerId = aamsExtPlayerId;
    return this;
  }

   /**
   * Get aamsExtPlayerId
   * @return aamsExtPlayerId
  **/
  @javax.annotation.Nullable
  public Integer getAamsExtPlayerId() {
    return aamsExtPlayerId;
  }

  public void setAamsExtPlayerId(Integer aamsExtPlayerId) {
    this.aamsExtPlayerId = aamsExtPlayerId;
  }


  public GetParticipantPlayersForAamsMappingRequest aamsPlayerName(String aamsPlayerName) {
    this.aamsPlayerName = aamsPlayerName;
    return this;
  }

   /**
   * Get aamsPlayerName
   * @return aamsPlayerName
  **/
  @javax.annotation.Nullable
  public String getAamsPlayerName() {
    return aamsPlayerName;
  }

  public void setAamsPlayerName(String aamsPlayerName) {
    this.aamsPlayerName = aamsPlayerName;
  }


  public GetParticipantPlayersForAamsMappingRequest status(MappingStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public MappingStatus getStatus() {
    return status;
  }

  public void setStatus(MappingStatus status) {
    this.status = status;
  }


  public GetParticipantPlayersForAamsMappingRequest sportCategoryId(Integer sportCategoryId) {
    this.sportCategoryId = sportCategoryId;
    return this;
  }

   /**
   * Get sportCategoryId
   * @return sportCategoryId
  **/
  @javax.annotation.Nullable
  public Integer getSportCategoryId() {
    return sportCategoryId;
  }

  public void setSportCategoryId(Integer sportCategoryId) {
    this.sportCategoryId = sportCategoryId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetParticipantPlayersForAamsMappingRequest getParticipantPlayersForAamsMappingRequest = (GetParticipantPlayersForAamsMappingRequest) o;
    return Objects.equals(this.teamId, getParticipantPlayersForAamsMappingRequest.teamId) &&
        Objects.equals(this.intCompetitorId, getParticipantPlayersForAamsMappingRequest.intCompetitorId) &&
        Objects.equals(this.intPlayerId, getParticipantPlayersForAamsMappingRequest.intPlayerId) &&
        Objects.equals(this.intPlayerName, getParticipantPlayersForAamsMappingRequest.intPlayerName) &&
        Objects.equals(this.aamsPlayerId, getParticipantPlayersForAamsMappingRequest.aamsPlayerId) &&
        Objects.equals(this.aamsExtPlayerId, getParticipantPlayersForAamsMappingRequest.aamsExtPlayerId) &&
        Objects.equals(this.aamsPlayerName, getParticipantPlayersForAamsMappingRequest.aamsPlayerName) &&
        Objects.equals(this.status, getParticipantPlayersForAamsMappingRequest.status) &&
        Objects.equals(this.sportCategoryId, getParticipantPlayersForAamsMappingRequest.sportCategoryId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamId, intCompetitorId, intPlayerId, intPlayerName, aamsPlayerId, aamsExtPlayerId, aamsPlayerName, status, sportCategoryId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetParticipantPlayersForAamsMappingRequest {\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    intCompetitorId: ").append(toIndentedString(intCompetitorId)).append("\n");
    sb.append("    intPlayerId: ").append(toIndentedString(intPlayerId)).append("\n");
    sb.append("    intPlayerName: ").append(toIndentedString(intPlayerName)).append("\n");
    sb.append("    aamsPlayerId: ").append(toIndentedString(aamsPlayerId)).append("\n");
    sb.append("    aamsExtPlayerId: ").append(toIndentedString(aamsExtPlayerId)).append("\n");
    sb.append("    aamsPlayerName: ").append(toIndentedString(aamsPlayerName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sportCategoryId: ").append(toIndentedString(sportCategoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TeamId");
    openapiFields.add("IntCompetitorId");
    openapiFields.add("IntPlayerId");
    openapiFields.add("IntPlayerName");
    openapiFields.add("AamsPlayerId");
    openapiFields.add("AamsExtPlayerId");
    openapiFields.add("AamsPlayerName");
    openapiFields.add("Status");
    openapiFields.add("SportCategoryId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetParticipantPlayersForAamsMappingRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetParticipantPlayersForAamsMappingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetParticipantPlayersForAamsMappingRequest is not found in the empty JSON string", GetParticipantPlayersForAamsMappingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetParticipantPlayersForAamsMappingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetParticipantPlayersForAamsMappingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IntPlayerName") != null && !jsonObj.get("IntPlayerName").isJsonNull()) && !jsonObj.get("IntPlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IntPlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IntPlayerName").toString()));
      }
      if ((jsonObj.get("AamsPlayerName") != null && !jsonObj.get("AamsPlayerName").isJsonNull()) && !jsonObj.get("AamsPlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsPlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AamsPlayerName").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MappingStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetParticipantPlayersForAamsMappingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetParticipantPlayersForAamsMappingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetParticipantPlayersForAamsMappingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetParticipantPlayersForAamsMappingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetParticipantPlayersForAamsMappingRequest>() {
           @Override
           public void write(JsonWriter out, GetParticipantPlayersForAamsMappingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetParticipantPlayersForAamsMappingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetParticipantPlayersForAamsMappingRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetParticipantPlayersForAamsMappingRequest
  * @throws IOException if the JSON string is invalid with respect to GetParticipantPlayersForAamsMappingRequest
  */
  public static GetParticipantPlayersForAamsMappingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetParticipantPlayersForAamsMappingRequest.class);
  }

 /**
  * Convert an instance of GetParticipantPlayersForAamsMappingRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

