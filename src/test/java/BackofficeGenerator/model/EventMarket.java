/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * EventMarket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class EventMarket {
  public static final String SERIALIZED_NAME_RULE_ID = "RuleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private Integer ruleId;

  public static final String SERIALIZED_NAME_FEED_EVENT_ID = "FeedEventId";
  @SerializedName(SERIALIZED_NAME_FEED_EVENT_ID)
  private Long feedEventId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_MANUAL = "IsManual";
  @SerializedName(SERIALIZED_NAME_IS_MANUAL)
  private Boolean isManual;

  public static final String SERIALIZED_NAME_MANUALLY_CHANGED = "ManuallyChanged";
  @SerializedName(SERIALIZED_NAME_MANUALLY_CHANGED)
  private Boolean manuallyChanged;

  public static final String SERIALIZED_NAME_PROFILE_MANUALLY_CHANGED = "ProfileManuallyChanged";
  @SerializedName(SERIALIZED_NAME_PROFILE_MANUALLY_CHANGED)
  private Boolean profileManuallyChanged;

  public static final String SERIALIZED_NAME_CHANGED_BY_AUTO_SETTLEMENT = "ChangedByAutoSettlement";
  @SerializedName(SERIALIZED_NAME_CHANGED_BY_AUTO_SETTLEMENT)
  private Boolean changedByAutoSettlement;

  public static final String SERIALIZED_NAME_IS_EARLY_PAYOUT = "IsEarlyPayout";
  @SerializedName(SERIALIZED_NAME_IS_EARLY_PAYOUT)
  private Boolean isEarlyPayout;

  public static final String SERIALIZED_NAME_IS_BORE_DRAW = "IsBoreDraw";
  @SerializedName(SERIALIZED_NAME_IS_BORE_DRAW)
  private Boolean isBoreDraw;

  public static final String SERIALIZED_NAME_SELECTIONS = "Selections";
  @SerializedName(SERIALIZED_NAME_SELECTIONS)
  private List<EventMarketSelection> selections;

  public static final String SERIALIZED_NAME_BET_CANCEL = "BetCancel";
  @SerializedName(SERIALIZED_NAME_BET_CANCEL)
  private EventMarketPendingCancel betCancel;

  public static final String SERIALIZED_NAME_IS_OPENED = "IsOpened";
  @SerializedName(SERIALIZED_NAME_IS_OPENED)
  private Boolean isOpened;

  public static final String SERIALIZED_NAME_IS_PENDING = "IsPending";
  @SerializedName(SERIALIZED_NAME_IS_PENDING)
  private Boolean isPending;

  public static final String SERIALIZED_NAME_IS_SETTLED = "IsSettled";
  @SerializedName(SERIALIZED_NAME_IS_SETTLED)
  private Boolean isSettled;

  public static final String SERIALIZED_NAME_IS_SUSPENDED = "IsSuspended";
  @SerializedName(SERIALIZED_NAME_IS_SUSPENDED)
  private Boolean isSuspended;

  public static final String SERIALIZED_NAME_IS_VOIDED = "IsVoided";
  @SerializedName(SERIALIZED_NAME_IS_VOIDED)
  private Boolean isVoided;

  public static final String SERIALIZED_NAME_FEED_MARKET_ID = "FeedMarketId";
  @SerializedName(SERIALIZED_NAME_FEED_MARKET_ID)
  private Long feedMarketId;

  public EventMarket() {
  }

  public EventMarket(
     List<EventMarketSelection> selections,
     Boolean isOpened, 
     Boolean isPending, 
     Boolean isSettled, 
     Boolean isSuspended, 
     Boolean isVoided
  ) {
    this();
    this.selections = selections;
    this.isOpened = isOpened;
    this.isPending = isPending;
    this.isSettled = isSettled;
    this.isSuspended = isSuspended;
    this.isVoided = isVoided;
  }

  public EventMarket ruleId(Integer ruleId) {
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Get ruleId
   * @return ruleId
  **/
  @javax.annotation.Nullable
  public Integer getRuleId() {
    return ruleId;
  }

  public void setRuleId(Integer ruleId) {
    this.ruleId = ruleId;
  }


  public EventMarket feedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
    return this;
  }

   /**
   * Get feedEventId
   * @return feedEventId
  **/
  @javax.annotation.Nullable
  public Long getFeedEventId() {
    return feedEventId;
  }

  public void setFeedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
  }


  public EventMarket name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventMarket isManual(Boolean isManual) {
    this.isManual = isManual;
    return this;
  }

   /**
   * Get isManual
   * @return isManual
  **/
  @javax.annotation.Nullable
  public Boolean getIsManual() {
    return isManual;
  }

  public void setIsManual(Boolean isManual) {
    this.isManual = isManual;
  }


  public EventMarket manuallyChanged(Boolean manuallyChanged) {
    this.manuallyChanged = manuallyChanged;
    return this;
  }

   /**
   * Get manuallyChanged
   * @return manuallyChanged
  **/
  @javax.annotation.Nullable
  public Boolean getManuallyChanged() {
    return manuallyChanged;
  }

  public void setManuallyChanged(Boolean manuallyChanged) {
    this.manuallyChanged = manuallyChanged;
  }


  public EventMarket profileManuallyChanged(Boolean profileManuallyChanged) {
    this.profileManuallyChanged = profileManuallyChanged;
    return this;
  }

   /**
   * Get profileManuallyChanged
   * @return profileManuallyChanged
  **/
  @javax.annotation.Nullable
  public Boolean getProfileManuallyChanged() {
    return profileManuallyChanged;
  }

  public void setProfileManuallyChanged(Boolean profileManuallyChanged) {
    this.profileManuallyChanged = profileManuallyChanged;
  }


  public EventMarket changedByAutoSettlement(Boolean changedByAutoSettlement) {
    this.changedByAutoSettlement = changedByAutoSettlement;
    return this;
  }

   /**
   * Get changedByAutoSettlement
   * @return changedByAutoSettlement
  **/
  @javax.annotation.Nullable
  public Boolean getChangedByAutoSettlement() {
    return changedByAutoSettlement;
  }

  public void setChangedByAutoSettlement(Boolean changedByAutoSettlement) {
    this.changedByAutoSettlement = changedByAutoSettlement;
  }


  public EventMarket isEarlyPayout(Boolean isEarlyPayout) {
    this.isEarlyPayout = isEarlyPayout;
    return this;
  }

   /**
   * Get isEarlyPayout
   * @return isEarlyPayout
  **/
  @javax.annotation.Nullable
  public Boolean getIsEarlyPayout() {
    return isEarlyPayout;
  }

  public void setIsEarlyPayout(Boolean isEarlyPayout) {
    this.isEarlyPayout = isEarlyPayout;
  }


  public EventMarket isBoreDraw(Boolean isBoreDraw) {
    this.isBoreDraw = isBoreDraw;
    return this;
  }

   /**
   * Get isBoreDraw
   * @return isBoreDraw
  **/
  @javax.annotation.Nullable
  public Boolean getIsBoreDraw() {
    return isBoreDraw;
  }

  public void setIsBoreDraw(Boolean isBoreDraw) {
    this.isBoreDraw = isBoreDraw;
  }


   /**
   * Get selections
   * @return selections
  **/
  @javax.annotation.Nullable
  public List<EventMarketSelection> getSelections() {
    return selections;
  }



  public EventMarket betCancel(EventMarketPendingCancel betCancel) {
    this.betCancel = betCancel;
    return this;
  }

   /**
   * Get betCancel
   * @return betCancel
  **/
  @javax.annotation.Nullable
  public EventMarketPendingCancel getBetCancel() {
    return betCancel;
  }

  public void setBetCancel(EventMarketPendingCancel betCancel) {
    this.betCancel = betCancel;
  }


   /**
   * Get isOpened
   * @return isOpened
  **/
  @javax.annotation.Nullable
  public Boolean getIsOpened() {
    return isOpened;
  }



   /**
   * Get isPending
   * @return isPending
  **/
  @javax.annotation.Nullable
  public Boolean getIsPending() {
    return isPending;
  }



   /**
   * Get isSettled
   * @return isSettled
  **/
  @javax.annotation.Nullable
  public Boolean getIsSettled() {
    return isSettled;
  }



   /**
   * Get isSuspended
   * @return isSuspended
  **/
  @javax.annotation.Nullable
  public Boolean getIsSuspended() {
    return isSuspended;
  }



   /**
   * Get isVoided
   * @return isVoided
  **/
  @javax.annotation.Nullable
  public Boolean getIsVoided() {
    return isVoided;
  }



  public EventMarket feedMarketId(Long feedMarketId) {
    this.feedMarketId = feedMarketId;
    return this;
  }

   /**
   * Get feedMarketId
   * @return feedMarketId
  **/
  @javax.annotation.Nullable
  public Long getFeedMarketId() {
    return feedMarketId;
  }

  public void setFeedMarketId(Long feedMarketId) {
    this.feedMarketId = feedMarketId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventMarket eventMarket = (EventMarket) o;
    return Objects.equals(this.ruleId, eventMarket.ruleId) &&
        Objects.equals(this.feedEventId, eventMarket.feedEventId) &&
        Objects.equals(this.name, eventMarket.name) &&
        Objects.equals(this.isManual, eventMarket.isManual) &&
        Objects.equals(this.manuallyChanged, eventMarket.manuallyChanged) &&
        Objects.equals(this.profileManuallyChanged, eventMarket.profileManuallyChanged) &&
        Objects.equals(this.changedByAutoSettlement, eventMarket.changedByAutoSettlement) &&
        Objects.equals(this.isEarlyPayout, eventMarket.isEarlyPayout) &&
        Objects.equals(this.isBoreDraw, eventMarket.isBoreDraw) &&
        Objects.equals(this.selections, eventMarket.selections) &&
        Objects.equals(this.betCancel, eventMarket.betCancel) &&
        Objects.equals(this.isOpened, eventMarket.isOpened) &&
        Objects.equals(this.isPending, eventMarket.isPending) &&
        Objects.equals(this.isSettled, eventMarket.isSettled) &&
        Objects.equals(this.isSuspended, eventMarket.isSuspended) &&
        Objects.equals(this.isVoided, eventMarket.isVoided) &&
        Objects.equals(this.feedMarketId, eventMarket.feedMarketId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, feedEventId, name, isManual, manuallyChanged, profileManuallyChanged, changedByAutoSettlement, isEarlyPayout, isBoreDraw, selections, betCancel, isOpened, isPending, isSettled, isSuspended, isVoided, feedMarketId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventMarket {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    feedEventId: ").append(toIndentedString(feedEventId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isManual: ").append(toIndentedString(isManual)).append("\n");
    sb.append("    manuallyChanged: ").append(toIndentedString(manuallyChanged)).append("\n");
    sb.append("    profileManuallyChanged: ").append(toIndentedString(profileManuallyChanged)).append("\n");
    sb.append("    changedByAutoSettlement: ").append(toIndentedString(changedByAutoSettlement)).append("\n");
    sb.append("    isEarlyPayout: ").append(toIndentedString(isEarlyPayout)).append("\n");
    sb.append("    isBoreDraw: ").append(toIndentedString(isBoreDraw)).append("\n");
    sb.append("    selections: ").append(toIndentedString(selections)).append("\n");
    sb.append("    betCancel: ").append(toIndentedString(betCancel)).append("\n");
    sb.append("    isOpened: ").append(toIndentedString(isOpened)).append("\n");
    sb.append("    isPending: ").append(toIndentedString(isPending)).append("\n");
    sb.append("    isSettled: ").append(toIndentedString(isSettled)).append("\n");
    sb.append("    isSuspended: ").append(toIndentedString(isSuspended)).append("\n");
    sb.append("    isVoided: ").append(toIndentedString(isVoided)).append("\n");
    sb.append("    feedMarketId: ").append(toIndentedString(feedMarketId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RuleId");
    openapiFields.add("FeedEventId");
    openapiFields.add("Name");
    openapiFields.add("IsManual");
    openapiFields.add("ManuallyChanged");
    openapiFields.add("ProfileManuallyChanged");
    openapiFields.add("ChangedByAutoSettlement");
    openapiFields.add("IsEarlyPayout");
    openapiFields.add("IsBoreDraw");
    openapiFields.add("Selections");
    openapiFields.add("BetCancel");
    openapiFields.add("IsOpened");
    openapiFields.add("IsPending");
    openapiFields.add("IsSettled");
    openapiFields.add("IsSuspended");
    openapiFields.add("IsVoided");
    openapiFields.add("FeedMarketId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventMarket
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventMarket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventMarket is not found in the empty JSON string", EventMarket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventMarket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventMarket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Selections") != null && !jsonObj.get("Selections").isJsonNull()) {
        JsonArray jsonArrayselections = jsonObj.getAsJsonArray("Selections");
        if (jsonArrayselections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Selections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Selections` to be an array in the JSON string but got `%s`", jsonObj.get("Selections").toString()));
          }

          // validate the optional field `Selections` (array)
          for (int i = 0; i < jsonArrayselections.size(); i++) {
            EventMarketSelection.validateJsonElement(jsonArrayselections.get(i));
          };
        }
      }
      // validate the optional field `BetCancel`
      if (jsonObj.get("BetCancel") != null && !jsonObj.get("BetCancel").isJsonNull()) {
        EventMarketPendingCancel.validateJsonElement(jsonObj.get("BetCancel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventMarket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventMarket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventMarket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventMarket.class));

       return (TypeAdapter<T>) new TypeAdapter<EventMarket>() {
           @Override
           public void write(JsonWriter out, EventMarket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventMarket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventMarket given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventMarket
  * @throws IOException if the JSON string is invalid with respect to EventMarket
  */
  public static EventMarket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventMarket.class);
  }

 /**
  * Convert an instance of EventMarket to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

