/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * SaveLotteryConfigSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class SaveLotteryConfigSettingsRequest {
  public static final String SERIALIZED_NAME_LOTTERY_ID = "LotteryId";
  @SerializedName(SERIALIZED_NAME_LOTTERY_ID)
  private Integer lotteryId;

  public static final String SERIALIZED_NAME_ALLOWED_MAIN_BALLS = "AllowedMainBalls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_MAIN_BALLS)
  private Integer allowedMainBalls;

  public static final String SERIALIZED_NAME_BONUS_BALL_MARKET = "BonusBallMarket";
  @SerializedName(SERIALIZED_NAME_BONUS_BALL_MARKET)
  private SaveLotteryBonusBallMarketRequestItem bonusBallMarket;

  public static final String SERIALIZED_NAME_PICK_N_MARKET = "PickNMarket";
  @SerializedName(SERIALIZED_NAME_PICK_N_MARKET)
  private SaveLotteryPickNMarketRequestItem pickNMarket;

  public static final String SERIALIZED_NAME_CLASSIC_MARKETS = "ClassicMarkets";
  @SerializedName(SERIALIZED_NAME_CLASSIC_MARKETS)
  private List<SaveLotteryClassicMarketRequestItem> classicMarkets;

  public static final String SERIALIZED_NAME_CONFIG_ID = "ConfigId";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private Integer configId;

  public SaveLotteryConfigSettingsRequest() {
  }

  public SaveLotteryConfigSettingsRequest lotteryId(Integer lotteryId) {
    this.lotteryId = lotteryId;
    return this;
  }

   /**
   * Get lotteryId
   * @return lotteryId
  **/
  @javax.annotation.Nullable
  public Integer getLotteryId() {
    return lotteryId;
  }

  public void setLotteryId(Integer lotteryId) {
    this.lotteryId = lotteryId;
  }


  public SaveLotteryConfigSettingsRequest allowedMainBalls(Integer allowedMainBalls) {
    this.allowedMainBalls = allowedMainBalls;
    return this;
  }

   /**
   * Get allowedMainBalls
   * @return allowedMainBalls
  **/
  @javax.annotation.Nullable
  public Integer getAllowedMainBalls() {
    return allowedMainBalls;
  }

  public void setAllowedMainBalls(Integer allowedMainBalls) {
    this.allowedMainBalls = allowedMainBalls;
  }


  public SaveLotteryConfigSettingsRequest bonusBallMarket(SaveLotteryBonusBallMarketRequestItem bonusBallMarket) {
    this.bonusBallMarket = bonusBallMarket;
    return this;
  }

   /**
   * Get bonusBallMarket
   * @return bonusBallMarket
  **/
  @javax.annotation.Nullable
  public SaveLotteryBonusBallMarketRequestItem getBonusBallMarket() {
    return bonusBallMarket;
  }

  public void setBonusBallMarket(SaveLotteryBonusBallMarketRequestItem bonusBallMarket) {
    this.bonusBallMarket = bonusBallMarket;
  }


  public SaveLotteryConfigSettingsRequest pickNMarket(SaveLotteryPickNMarketRequestItem pickNMarket) {
    this.pickNMarket = pickNMarket;
    return this;
  }

   /**
   * Get pickNMarket
   * @return pickNMarket
  **/
  @javax.annotation.Nullable
  public SaveLotteryPickNMarketRequestItem getPickNMarket() {
    return pickNMarket;
  }

  public void setPickNMarket(SaveLotteryPickNMarketRequestItem pickNMarket) {
    this.pickNMarket = pickNMarket;
  }


  public SaveLotteryConfigSettingsRequest classicMarkets(List<SaveLotteryClassicMarketRequestItem> classicMarkets) {
    this.classicMarkets = classicMarkets;
    return this;
  }

  public SaveLotteryConfigSettingsRequest addClassicMarketsItem(SaveLotteryClassicMarketRequestItem classicMarketsItem) {
    if (this.classicMarkets == null) {
      this.classicMarkets = new ArrayList<>();
    }
    this.classicMarkets.add(classicMarketsItem);
    return this;
  }

   /**
   * Get classicMarkets
   * @return classicMarkets
  **/
  @javax.annotation.Nullable
  public List<SaveLotteryClassicMarketRequestItem> getClassicMarkets() {
    return classicMarkets;
  }

  public void setClassicMarkets(List<SaveLotteryClassicMarketRequestItem> classicMarkets) {
    this.classicMarkets = classicMarkets;
  }


  public SaveLotteryConfigSettingsRequest configId(Integer configId) {
    this.configId = configId;
    return this;
  }

   /**
   * Get configId
   * @return configId
  **/
  @javax.annotation.Nullable
  public Integer getConfigId() {
    return configId;
  }

  public void setConfigId(Integer configId) {
    this.configId = configId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveLotteryConfigSettingsRequest saveLotteryConfigSettingsRequest = (SaveLotteryConfigSettingsRequest) o;
    return Objects.equals(this.lotteryId, saveLotteryConfigSettingsRequest.lotteryId) &&
        Objects.equals(this.allowedMainBalls, saveLotteryConfigSettingsRequest.allowedMainBalls) &&
        Objects.equals(this.bonusBallMarket, saveLotteryConfigSettingsRequest.bonusBallMarket) &&
        Objects.equals(this.pickNMarket, saveLotteryConfigSettingsRequest.pickNMarket) &&
        Objects.equals(this.classicMarkets, saveLotteryConfigSettingsRequest.classicMarkets) &&
        Objects.equals(this.configId, saveLotteryConfigSettingsRequest.configId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotteryId, allowedMainBalls, bonusBallMarket, pickNMarket, classicMarkets, configId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveLotteryConfigSettingsRequest {\n");
    sb.append("    lotteryId: ").append(toIndentedString(lotteryId)).append("\n");
    sb.append("    allowedMainBalls: ").append(toIndentedString(allowedMainBalls)).append("\n");
    sb.append("    bonusBallMarket: ").append(toIndentedString(bonusBallMarket)).append("\n");
    sb.append("    pickNMarket: ").append(toIndentedString(pickNMarket)).append("\n");
    sb.append("    classicMarkets: ").append(toIndentedString(classicMarkets)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LotteryId");
    openapiFields.add("AllowedMainBalls");
    openapiFields.add("BonusBallMarket");
    openapiFields.add("PickNMarket");
    openapiFields.add("ClassicMarkets");
    openapiFields.add("ConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SaveLotteryConfigSettingsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveLotteryConfigSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveLotteryConfigSettingsRequest is not found in the empty JSON string", SaveLotteryConfigSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveLotteryConfigSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveLotteryConfigSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BonusBallMarket`
      if (jsonObj.get("BonusBallMarket") != null && !jsonObj.get("BonusBallMarket").isJsonNull()) {
        SaveLotteryBonusBallMarketRequestItem.validateJsonElement(jsonObj.get("BonusBallMarket"));
      }
      // validate the optional field `PickNMarket`
      if (jsonObj.get("PickNMarket") != null && !jsonObj.get("PickNMarket").isJsonNull()) {
        SaveLotteryPickNMarketRequestItem.validateJsonElement(jsonObj.get("PickNMarket"));
      }
      if (jsonObj.get("ClassicMarkets") != null && !jsonObj.get("ClassicMarkets").isJsonNull()) {
        JsonArray jsonArrayclassicMarkets = jsonObj.getAsJsonArray("ClassicMarkets");
        if (jsonArrayclassicMarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ClassicMarkets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ClassicMarkets` to be an array in the JSON string but got `%s`", jsonObj.get("ClassicMarkets").toString()));
          }

          // validate the optional field `ClassicMarkets` (array)
          for (int i = 0; i < jsonArrayclassicMarkets.size(); i++) {
            SaveLotteryClassicMarketRequestItem.validateJsonElement(jsonArrayclassicMarkets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveLotteryConfigSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveLotteryConfigSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveLotteryConfigSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveLotteryConfigSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveLotteryConfigSettingsRequest>() {
           @Override
           public void write(JsonWriter out, SaveLotteryConfigSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveLotteryConfigSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaveLotteryConfigSettingsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaveLotteryConfigSettingsRequest
  * @throws IOException if the JSON string is invalid with respect to SaveLotteryConfigSettingsRequest
  */
  public static SaveLotteryConfigSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveLotteryConfigSettingsRequest.class);
  }

 /**
  * Convert an instance of SaveLotteryConfigSettingsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

