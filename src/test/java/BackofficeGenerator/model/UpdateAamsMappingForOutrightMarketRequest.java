/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * UpdateAamsMappingForOutrightMarketRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class UpdateAamsMappingForOutrightMarketRequest {
  public static final String SERIALIZED_NAME_INT_SPORT_ID = "IntSportId";
  @SerializedName(SERIALIZED_NAME_INT_SPORT_ID)
  private Integer intSportId;

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "MappingType";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private Integer mappingType;

  public static final String SERIALIZED_NAME_IS_LEGABILE = "IsLegabile";
  @SerializedName(SERIALIZED_NAME_IS_LEGABILE)
  private Boolean isLegabile;

  public static final String SERIALIZED_NAME_AAMS_MARKET_IDS = "AamsMarketIds";
  @SerializedName(SERIALIZED_NAME_AAMS_MARKET_IDS)
  private List<Integer> aamsMarketIds;

  public static final String SERIALIZED_NAME_VARS = "Vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private List<OutrightMarketVarItem> vars;

  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private Integer marketTypeId;

  public UpdateAamsMappingForOutrightMarketRequest() {
  }

  public UpdateAamsMappingForOutrightMarketRequest intSportId(Integer intSportId) {
    this.intSportId = intSportId;
    return this;
  }

   /**
   * Get intSportId
   * @return intSportId
  **/
  @javax.annotation.Nullable
  public Integer getIntSportId() {
    return intSportId;
  }

  public void setIntSportId(Integer intSportId) {
    this.intSportId = intSportId;
  }


  public UpdateAamsMappingForOutrightMarketRequest mappingType(Integer mappingType) {
    this.mappingType = mappingType;
    return this;
  }

   /**
   * Get mappingType
   * @return mappingType
  **/
  @javax.annotation.Nullable
  public Integer getMappingType() {
    return mappingType;
  }

  public void setMappingType(Integer mappingType) {
    this.mappingType = mappingType;
  }


  public UpdateAamsMappingForOutrightMarketRequest isLegabile(Boolean isLegabile) {
    this.isLegabile = isLegabile;
    return this;
  }

   /**
   * Get isLegabile
   * @return isLegabile
  **/
  @javax.annotation.Nullable
  public Boolean getIsLegabile() {
    return isLegabile;
  }

  public void setIsLegabile(Boolean isLegabile) {
    this.isLegabile = isLegabile;
  }


  public UpdateAamsMappingForOutrightMarketRequest aamsMarketIds(List<Integer> aamsMarketIds) {
    this.aamsMarketIds = aamsMarketIds;
    return this;
  }

  public UpdateAamsMappingForOutrightMarketRequest addAamsMarketIdsItem(Integer aamsMarketIdsItem) {
    if (this.aamsMarketIds == null) {
      this.aamsMarketIds = new ArrayList<>();
    }
    this.aamsMarketIds.add(aamsMarketIdsItem);
    return this;
  }

   /**
   * Get aamsMarketIds
   * @return aamsMarketIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getAamsMarketIds() {
    return aamsMarketIds;
  }

  public void setAamsMarketIds(List<Integer> aamsMarketIds) {
    this.aamsMarketIds = aamsMarketIds;
  }


  public UpdateAamsMappingForOutrightMarketRequest vars(List<OutrightMarketVarItem> vars) {
    this.vars = vars;
    return this;
  }

  public UpdateAamsMappingForOutrightMarketRequest addVarsItem(OutrightMarketVarItem varsItem) {
    if (this.vars == null) {
      this.vars = new ArrayList<>();
    }
    this.vars.add(varsItem);
    return this;
  }

   /**
   * Get vars
   * @return vars
  **/
  @javax.annotation.Nullable
  public List<OutrightMarketVarItem> getVars() {
    return vars;
  }

  public void setVars(List<OutrightMarketVarItem> vars) {
    this.vars = vars;
  }


  public UpdateAamsMappingForOutrightMarketRequest marketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAamsMappingForOutrightMarketRequest updateAamsMappingForOutrightMarketRequest = (UpdateAamsMappingForOutrightMarketRequest) o;
    return Objects.equals(this.intSportId, updateAamsMappingForOutrightMarketRequest.intSportId) &&
        Objects.equals(this.mappingType, updateAamsMappingForOutrightMarketRequest.mappingType) &&
        Objects.equals(this.isLegabile, updateAamsMappingForOutrightMarketRequest.isLegabile) &&
        Objects.equals(this.aamsMarketIds, updateAamsMappingForOutrightMarketRequest.aamsMarketIds) &&
        Objects.equals(this.vars, updateAamsMappingForOutrightMarketRequest.vars) &&
        Objects.equals(this.marketTypeId, updateAamsMappingForOutrightMarketRequest.marketTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(intSportId, mappingType, isLegabile, aamsMarketIds, vars, marketTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAamsMappingForOutrightMarketRequest {\n");
    sb.append("    intSportId: ").append(toIndentedString(intSportId)).append("\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    isLegabile: ").append(toIndentedString(isLegabile)).append("\n");
    sb.append("    aamsMarketIds: ").append(toIndentedString(aamsMarketIds)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IntSportId");
    openapiFields.add("MappingType");
    openapiFields.add("IsLegabile");
    openapiFields.add("AamsMarketIds");
    openapiFields.add("Vars");
    openapiFields.add("MarketTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateAamsMappingForOutrightMarketRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAamsMappingForOutrightMarketRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAamsMappingForOutrightMarketRequest is not found in the empty JSON string", UpdateAamsMappingForOutrightMarketRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAamsMappingForOutrightMarketRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAamsMappingForOutrightMarketRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AamsMarketIds") != null && !jsonObj.get("AamsMarketIds").isJsonNull() && !jsonObj.get("AamsMarketIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AamsMarketIds` to be an array in the JSON string but got `%s`", jsonObj.get("AamsMarketIds").toString()));
      }
      if (jsonObj.get("Vars") != null && !jsonObj.get("Vars").isJsonNull()) {
        JsonArray jsonArrayvars = jsonObj.getAsJsonArray("Vars");
        if (jsonArrayvars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Vars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Vars` to be an array in the JSON string but got `%s`", jsonObj.get("Vars").toString()));
          }

          // validate the optional field `Vars` (array)
          for (int i = 0; i < jsonArrayvars.size(); i++) {
            OutrightMarketVarItem.validateJsonElement(jsonArrayvars.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAamsMappingForOutrightMarketRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAamsMappingForOutrightMarketRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAamsMappingForOutrightMarketRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAamsMappingForOutrightMarketRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAamsMappingForOutrightMarketRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAamsMappingForOutrightMarketRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAamsMappingForOutrightMarketRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateAamsMappingForOutrightMarketRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateAamsMappingForOutrightMarketRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateAamsMappingForOutrightMarketRequest
  */
  public static UpdateAamsMappingForOutrightMarketRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAamsMappingForOutrightMarketRequest.class);
  }

 /**
  * Convert an instance of UpdateAamsMappingForOutrightMarketRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

