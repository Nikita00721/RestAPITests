/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetCompetitorsForConfigRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetCompetitorsForConfigRequestFilters {
  public static final String SERIALIZED_NAME_SPORTS_IDS = "SportsIds";
  @SerializedName(SERIALIZED_NAME_SPORTS_IDS)
  private List<Integer> sportsIds;

  public static final String SERIALIZED_NAME_HAS_DEFAULT_JERSEY = "HasDefaultJersey";
  @SerializedName(SERIALIZED_NAME_HAS_DEFAULT_JERSEY)
  private Boolean hasDefaultJersey;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_JERSEY = "HasCustomJersey";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_JERSEY)
  private Boolean hasCustomJersey;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_LOGO = "HasCustomLogo";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_LOGO)
  private Boolean hasCustomLogo;

  public static final String SERIALIZED_NAME_HAS_CHAMPS_SETTINGS = "HasChampsSettings";
  @SerializedName(SERIALIZED_NAME_HAS_CHAMPS_SETTINGS)
  private Boolean hasChampsSettings;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_CONFIG_ID = "ConfigId";
  @SerializedName(SERIALIZED_NAME_CONFIG_ID)
  private Integer configId;

  public GetCompetitorsForConfigRequestFilters() {
  }

  public GetCompetitorsForConfigRequestFilters sportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
    return this;
  }

  public GetCompetitorsForConfigRequestFilters addSportsIdsItem(Integer sportsIdsItem) {
    if (this.sportsIds == null) {
      this.sportsIds = new ArrayList<>();
    }
    this.sportsIds.add(sportsIdsItem);
    return this;
  }

   /**
   * Get sportsIds
   * @return sportsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportsIds() {
    return sportsIds;
  }

  public void setSportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
  }


  public GetCompetitorsForConfigRequestFilters hasDefaultJersey(Boolean hasDefaultJersey) {
    this.hasDefaultJersey = hasDefaultJersey;
    return this;
  }

   /**
   * Get hasDefaultJersey
   * @return hasDefaultJersey
  **/
  @javax.annotation.Nullable
  public Boolean getHasDefaultJersey() {
    return hasDefaultJersey;
  }

  public void setHasDefaultJersey(Boolean hasDefaultJersey) {
    this.hasDefaultJersey = hasDefaultJersey;
  }


  public GetCompetitorsForConfigRequestFilters hasCustomJersey(Boolean hasCustomJersey) {
    this.hasCustomJersey = hasCustomJersey;
    return this;
  }

   /**
   * Get hasCustomJersey
   * @return hasCustomJersey
  **/
  @javax.annotation.Nullable
  public Boolean getHasCustomJersey() {
    return hasCustomJersey;
  }

  public void setHasCustomJersey(Boolean hasCustomJersey) {
    this.hasCustomJersey = hasCustomJersey;
  }


  public GetCompetitorsForConfigRequestFilters hasCustomLogo(Boolean hasCustomLogo) {
    this.hasCustomLogo = hasCustomLogo;
    return this;
  }

   /**
   * Get hasCustomLogo
   * @return hasCustomLogo
  **/
  @javax.annotation.Nullable
  public Boolean getHasCustomLogo() {
    return hasCustomLogo;
  }

  public void setHasCustomLogo(Boolean hasCustomLogo) {
    this.hasCustomLogo = hasCustomLogo;
  }


  public GetCompetitorsForConfigRequestFilters hasChampsSettings(Boolean hasChampsSettings) {
    this.hasChampsSettings = hasChampsSettings;
    return this;
  }

   /**
   * Get hasChampsSettings
   * @return hasChampsSettings
  **/
  @javax.annotation.Nullable
  public Boolean getHasChampsSettings() {
    return hasChampsSettings;
  }

  public void setHasChampsSettings(Boolean hasChampsSettings) {
    this.hasChampsSettings = hasChampsSettings;
  }


  public GetCompetitorsForConfigRequestFilters id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetCompetitorsForConfigRequestFilters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetCompetitorsForConfigRequestFilters sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public GetCompetitorsForConfigRequestFilters configId(Integer configId) {
    this.configId = configId;
    return this;
  }

   /**
   * Get configId
   * @return configId
  **/
  @javax.annotation.Nullable
  public Integer getConfigId() {
    return configId;
  }

  public void setConfigId(Integer configId) {
    this.configId = configId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCompetitorsForConfigRequestFilters getCompetitorsForConfigRequestFilters = (GetCompetitorsForConfigRequestFilters) o;
    return Objects.equals(this.sportsIds, getCompetitorsForConfigRequestFilters.sportsIds) &&
        Objects.equals(this.hasDefaultJersey, getCompetitorsForConfigRequestFilters.hasDefaultJersey) &&
        Objects.equals(this.hasCustomJersey, getCompetitorsForConfigRequestFilters.hasCustomJersey) &&
        Objects.equals(this.hasCustomLogo, getCompetitorsForConfigRequestFilters.hasCustomLogo) &&
        Objects.equals(this.hasChampsSettings, getCompetitorsForConfigRequestFilters.hasChampsSettings) &&
        Objects.equals(this.id, getCompetitorsForConfigRequestFilters.id) &&
        Objects.equals(this.name, getCompetitorsForConfigRequestFilters.name) &&
        Objects.equals(this.sportName, getCompetitorsForConfigRequestFilters.sportName) &&
        Objects.equals(this.configId, getCompetitorsForConfigRequestFilters.configId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportsIds, hasDefaultJersey, hasCustomJersey, hasCustomLogo, hasChampsSettings, id, name, sportName, configId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCompetitorsForConfigRequestFilters {\n");
    sb.append("    sportsIds: ").append(toIndentedString(sportsIds)).append("\n");
    sb.append("    hasDefaultJersey: ").append(toIndentedString(hasDefaultJersey)).append("\n");
    sb.append("    hasCustomJersey: ").append(toIndentedString(hasCustomJersey)).append("\n");
    sb.append("    hasCustomLogo: ").append(toIndentedString(hasCustomLogo)).append("\n");
    sb.append("    hasChampsSettings: ").append(toIndentedString(hasChampsSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    configId: ").append(toIndentedString(configId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportsIds");
    openapiFields.add("HasDefaultJersey");
    openapiFields.add("HasCustomJersey");
    openapiFields.add("HasCustomLogo");
    openapiFields.add("HasChampsSettings");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("SportName");
    openapiFields.add("ConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetCompetitorsForConfigRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCompetitorsForConfigRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCompetitorsForConfigRequestFilters is not found in the empty JSON string", GetCompetitorsForConfigRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCompetitorsForConfigRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCompetitorsForConfigRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportsIds") != null && !jsonObj.get("SportsIds").isJsonNull() && !jsonObj.get("SportsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportsIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportsIds").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCompetitorsForConfigRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCompetitorsForConfigRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCompetitorsForConfigRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCompetitorsForConfigRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCompetitorsForConfigRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetCompetitorsForConfigRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCompetitorsForConfigRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetCompetitorsForConfigRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetCompetitorsForConfigRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetCompetitorsForConfigRequestFilters
  */
  public static GetCompetitorsForConfigRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCompetitorsForConfigRequestFilters.class);
  }

 /**
  * Convert an instance of GetCompetitorsForConfigRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

