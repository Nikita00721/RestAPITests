/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * MarketGroupMarketTypeItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class MarketGroupMarketTypeItem {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_REUSED = "IsReused";
  @SerializedName(SERIALIZED_NAME_IS_REUSED)
  private Boolean isReused;

  public static final String SERIALIZED_NAME_IS_FAST_MARKET = "IsFastMarket";
  @SerializedName(SERIALIZED_NAME_IS_FAST_MARKET)
  private Boolean isFastMarket;

  public static final String SERIALIZED_NAME_IS_BET_BUILDER_MARKET = "IsBetBuilderMarket";
  @SerializedName(SERIALIZED_NAME_IS_BET_BUILDER_MARKET)
  private Boolean isBetBuilderMarket;

  public static final String SERIALIZED_NAME_MARKET_GROUPS = "MarketGroups";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUPS)
  private List<Integer> marketGroups;

  public static final String SERIALIZED_NAME_CHILDREN = "Children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<MarketTypeChild> children;

  public static final String SERIALIZED_NAME_SPECIFIERS = "Specifiers";
  @SerializedName(SERIALIZED_NAME_SPECIFIERS)
  private List<Integer> specifiers;

  public static final String SERIALIZED_NAME_DEFAULT_HEADER_SETTINGS = "DefaultHeaderSettings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HEADER_SETTINGS)
  private DefaultConfigMarketHeaderSettings defaultHeaderSettings;

  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private Integer marketTypeId;

  public MarketGroupMarketTypeItem() {
  }

  public MarketGroupMarketTypeItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MarketGroupMarketTypeItem isReused(Boolean isReused) {
    this.isReused = isReused;
    return this;
  }

   /**
   * Get isReused
   * @return isReused
  **/
  @javax.annotation.Nullable
  public Boolean getIsReused() {
    return isReused;
  }

  public void setIsReused(Boolean isReused) {
    this.isReused = isReused;
  }


  public MarketGroupMarketTypeItem isFastMarket(Boolean isFastMarket) {
    this.isFastMarket = isFastMarket;
    return this;
  }

   /**
   * Get isFastMarket
   * @return isFastMarket
  **/
  @javax.annotation.Nullable
  public Boolean getIsFastMarket() {
    return isFastMarket;
  }

  public void setIsFastMarket(Boolean isFastMarket) {
    this.isFastMarket = isFastMarket;
  }


  public MarketGroupMarketTypeItem isBetBuilderMarket(Boolean isBetBuilderMarket) {
    this.isBetBuilderMarket = isBetBuilderMarket;
    return this;
  }

   /**
   * Get isBetBuilderMarket
   * @return isBetBuilderMarket
  **/
  @javax.annotation.Nullable
  public Boolean getIsBetBuilderMarket() {
    return isBetBuilderMarket;
  }

  public void setIsBetBuilderMarket(Boolean isBetBuilderMarket) {
    this.isBetBuilderMarket = isBetBuilderMarket;
  }


  public MarketGroupMarketTypeItem marketGroups(List<Integer> marketGroups) {
    this.marketGroups = marketGroups;
    return this;
  }

  public MarketGroupMarketTypeItem addMarketGroupsItem(Integer marketGroupsItem) {
    if (this.marketGroups == null) {
      this.marketGroups = new ArrayList<>();
    }
    this.marketGroups.add(marketGroupsItem);
    return this;
  }

   /**
   * Get marketGroups
   * @return marketGroups
  **/
  @javax.annotation.Nullable
  public List<Integer> getMarketGroups() {
    return marketGroups;
  }

  public void setMarketGroups(List<Integer> marketGroups) {
    this.marketGroups = marketGroups;
  }


  public MarketGroupMarketTypeItem children(List<MarketTypeChild> children) {
    this.children = children;
    return this;
  }

  public MarketGroupMarketTypeItem addChildrenItem(MarketTypeChild childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  public List<MarketTypeChild> getChildren() {
    return children;
  }

  public void setChildren(List<MarketTypeChild> children) {
    this.children = children;
  }


  public MarketGroupMarketTypeItem specifiers(List<Integer> specifiers) {
    this.specifiers = specifiers;
    return this;
  }

  public MarketGroupMarketTypeItem addSpecifiersItem(Integer specifiersItem) {
    if (this.specifiers == null) {
      this.specifiers = new ArrayList<>();
    }
    this.specifiers.add(specifiersItem);
    return this;
  }

   /**
   * Get specifiers
   * @return specifiers
  **/
  @javax.annotation.Nullable
  public List<Integer> getSpecifiers() {
    return specifiers;
  }

  public void setSpecifiers(List<Integer> specifiers) {
    this.specifiers = specifiers;
  }


  public MarketGroupMarketTypeItem defaultHeaderSettings(DefaultConfigMarketHeaderSettings defaultHeaderSettings) {
    this.defaultHeaderSettings = defaultHeaderSettings;
    return this;
  }

   /**
   * Get defaultHeaderSettings
   * @return defaultHeaderSettings
  **/
  @javax.annotation.Nullable
  public DefaultConfigMarketHeaderSettings getDefaultHeaderSettings() {
    return defaultHeaderSettings;
  }

  public void setDefaultHeaderSettings(DefaultConfigMarketHeaderSettings defaultHeaderSettings) {
    this.defaultHeaderSettings = defaultHeaderSettings;
  }


  public MarketGroupMarketTypeItem marketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nullable
  public Integer getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(Integer marketTypeId) {
    this.marketTypeId = marketTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketGroupMarketTypeItem marketGroupMarketTypeItem = (MarketGroupMarketTypeItem) o;
    return Objects.equals(this.name, marketGroupMarketTypeItem.name) &&
        Objects.equals(this.isReused, marketGroupMarketTypeItem.isReused) &&
        Objects.equals(this.isFastMarket, marketGroupMarketTypeItem.isFastMarket) &&
        Objects.equals(this.isBetBuilderMarket, marketGroupMarketTypeItem.isBetBuilderMarket) &&
        Objects.equals(this.marketGroups, marketGroupMarketTypeItem.marketGroups) &&
        Objects.equals(this.children, marketGroupMarketTypeItem.children) &&
        Objects.equals(this.specifiers, marketGroupMarketTypeItem.specifiers) &&
        Objects.equals(this.defaultHeaderSettings, marketGroupMarketTypeItem.defaultHeaderSettings) &&
        Objects.equals(this.marketTypeId, marketGroupMarketTypeItem.marketTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isReused, isFastMarket, isBetBuilderMarket, marketGroups, children, specifiers, defaultHeaderSettings, marketTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketGroupMarketTypeItem {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isReused: ").append(toIndentedString(isReused)).append("\n");
    sb.append("    isFastMarket: ").append(toIndentedString(isFastMarket)).append("\n");
    sb.append("    isBetBuilderMarket: ").append(toIndentedString(isBetBuilderMarket)).append("\n");
    sb.append("    marketGroups: ").append(toIndentedString(marketGroups)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    specifiers: ").append(toIndentedString(specifiers)).append("\n");
    sb.append("    defaultHeaderSettings: ").append(toIndentedString(defaultHeaderSettings)).append("\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("IsReused");
    openapiFields.add("IsFastMarket");
    openapiFields.add("IsBetBuilderMarket");
    openapiFields.add("MarketGroups");
    openapiFields.add("Children");
    openapiFields.add("Specifiers");
    openapiFields.add("DefaultHeaderSettings");
    openapiFields.add("MarketTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketGroupMarketTypeItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketGroupMarketTypeItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketGroupMarketTypeItem is not found in the empty JSON string", MarketGroupMarketTypeItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketGroupMarketTypeItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketGroupMarketTypeItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MarketGroups") != null && !jsonObj.get("MarketGroups").isJsonNull() && !jsonObj.get("MarketGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MarketGroups").toString()));
      }
      if (jsonObj.get("Children") != null && !jsonObj.get("Children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("Children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Children` to be an array in the JSON string but got `%s`", jsonObj.get("Children").toString()));
          }

          // validate the optional field `Children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            MarketTypeChild.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Specifiers") != null && !jsonObj.get("Specifiers").isJsonNull() && !jsonObj.get("Specifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Specifiers` to be an array in the JSON string but got `%s`", jsonObj.get("Specifiers").toString()));
      }
      // validate the optional field `DefaultHeaderSettings`
      if (jsonObj.get("DefaultHeaderSettings") != null && !jsonObj.get("DefaultHeaderSettings").isJsonNull()) {
        DefaultConfigMarketHeaderSettings.validateJsonElement(jsonObj.get("DefaultHeaderSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketGroupMarketTypeItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketGroupMarketTypeItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketGroupMarketTypeItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketGroupMarketTypeItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketGroupMarketTypeItem>() {
           @Override
           public void write(JsonWriter out, MarketGroupMarketTypeItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketGroupMarketTypeItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketGroupMarketTypeItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketGroupMarketTypeItem
  * @throws IOException if the JSON string is invalid with respect to MarketGroupMarketTypeItem
  */
  public static MarketGroupMarketTypeItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketGroupMarketTypeItem.class);
  }

 /**
  * Convert an instance of MarketGroupMarketTypeItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

