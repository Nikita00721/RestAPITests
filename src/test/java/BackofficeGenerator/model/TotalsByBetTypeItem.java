/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * TotalsByBetTypeItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class TotalsByBetTypeItem {
  public static final String SERIALIZED_NAME_VOLUME = "Volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private Double volume;

  public static final String SERIALIZED_NAME_RETURNED = "Returned";
  @SerializedName(SERIALIZED_NAME_RETURNED)
  private Double returned;

  public static final String SERIALIZED_NAME_G_G_R = "GGR";
  @SerializedName(SERIALIZED_NAME_G_G_R)
  private Double GGR;

  public static final String SERIALIZED_NAME_MARGIN = "Margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private Double margin;

  public static final String SERIALIZED_NAME_VOLUME_PERCENT = "VolumePercent";
  @SerializedName(SERIALIZED_NAME_VOLUME_PERCENT)
  private Double volumePercent;

  public static final String SERIALIZED_NAME_BASE_VOLUME = "BaseVolume";
  @SerializedName(SERIALIZED_NAME_BASE_VOLUME)
  private Double baseVolume;

  public static final String SERIALIZED_NAME_BASE_RETURNED = "BaseReturned";
  @SerializedName(SERIALIZED_NAME_BASE_RETURNED)
  private Double baseReturned;

  public static final String SERIALIZED_NAME_BASE_G_G_R = "BaseGGR";
  @SerializedName(SERIALIZED_NAME_BASE_G_G_R)
  private Double baseGGR;

  public static final String SERIALIZED_NAME_BASE_MARGIN = "BaseMargin";
  @SerializedName(SERIALIZED_NAME_BASE_MARGIN)
  private Double baseMargin;

  public static final String SERIALIZED_NAME_BASE_VOLUME_PERCENT = "BaseVolumePercent";
  @SerializedName(SERIALIZED_NAME_BASE_VOLUME_PERCENT)
  private Double baseVolumePercent;

  public static final String SERIALIZED_NAME_BET_COUNT = "BetCount";
  @SerializedName(SERIALIZED_NAME_BET_COUNT)
  private Long betCount;

  public static final String SERIALIZED_NAME_BET_TYPE_NAME = "BetTypeName";
  @SerializedName(SERIALIZED_NAME_BET_TYPE_NAME)
  private String betTypeName;

  public TotalsByBetTypeItem() {
  }

  public TotalsByBetTypeItem volume(Double volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @javax.annotation.Nullable
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }


  public TotalsByBetTypeItem returned(Double returned) {
    this.returned = returned;
    return this;
  }

   /**
   * Get returned
   * @return returned
  **/
  @javax.annotation.Nullable
  public Double getReturned() {
    return returned;
  }

  public void setReturned(Double returned) {
    this.returned = returned;
  }


  public TotalsByBetTypeItem GGR(Double GGR) {
    this.GGR = GGR;
    return this;
  }

   /**
   * Get GGR
   * @return GGR
  **/
  @javax.annotation.Nullable
  public Double getGGR() {
    return GGR;
  }

  public void setGGR(Double GGR) {
    this.GGR = GGR;
  }


  public TotalsByBetTypeItem margin(Double margin) {
    this.margin = margin;
    return this;
  }

   /**
   * Get margin
   * @return margin
  **/
  @javax.annotation.Nullable
  public Double getMargin() {
    return margin;
  }

  public void setMargin(Double margin) {
    this.margin = margin;
  }


  public TotalsByBetTypeItem volumePercent(Double volumePercent) {
    this.volumePercent = volumePercent;
    return this;
  }

   /**
   * Get volumePercent
   * @return volumePercent
  **/
  @javax.annotation.Nullable
  public Double getVolumePercent() {
    return volumePercent;
  }

  public void setVolumePercent(Double volumePercent) {
    this.volumePercent = volumePercent;
  }


  public TotalsByBetTypeItem baseVolume(Double baseVolume) {
    this.baseVolume = baseVolume;
    return this;
  }

   /**
   * Get baseVolume
   * @return baseVolume
  **/
  @javax.annotation.Nullable
  public Double getBaseVolume() {
    return baseVolume;
  }

  public void setBaseVolume(Double baseVolume) {
    this.baseVolume = baseVolume;
  }


  public TotalsByBetTypeItem baseReturned(Double baseReturned) {
    this.baseReturned = baseReturned;
    return this;
  }

   /**
   * Get baseReturned
   * @return baseReturned
  **/
  @javax.annotation.Nullable
  public Double getBaseReturned() {
    return baseReturned;
  }

  public void setBaseReturned(Double baseReturned) {
    this.baseReturned = baseReturned;
  }


  public TotalsByBetTypeItem baseGGR(Double baseGGR) {
    this.baseGGR = baseGGR;
    return this;
  }

   /**
   * Get baseGGR
   * @return baseGGR
  **/
  @javax.annotation.Nullable
  public Double getBaseGGR() {
    return baseGGR;
  }

  public void setBaseGGR(Double baseGGR) {
    this.baseGGR = baseGGR;
  }


  public TotalsByBetTypeItem baseMargin(Double baseMargin) {
    this.baseMargin = baseMargin;
    return this;
  }

   /**
   * Get baseMargin
   * @return baseMargin
  **/
  @javax.annotation.Nullable
  public Double getBaseMargin() {
    return baseMargin;
  }

  public void setBaseMargin(Double baseMargin) {
    this.baseMargin = baseMargin;
  }


  public TotalsByBetTypeItem baseVolumePercent(Double baseVolumePercent) {
    this.baseVolumePercent = baseVolumePercent;
    return this;
  }

   /**
   * Get baseVolumePercent
   * @return baseVolumePercent
  **/
  @javax.annotation.Nullable
  public Double getBaseVolumePercent() {
    return baseVolumePercent;
  }

  public void setBaseVolumePercent(Double baseVolumePercent) {
    this.baseVolumePercent = baseVolumePercent;
  }


  public TotalsByBetTypeItem betCount(Long betCount) {
    this.betCount = betCount;
    return this;
  }

   /**
   * Get betCount
   * @return betCount
  **/
  @javax.annotation.Nullable
  public Long getBetCount() {
    return betCount;
  }

  public void setBetCount(Long betCount) {
    this.betCount = betCount;
  }


  public TotalsByBetTypeItem betTypeName(String betTypeName) {
    this.betTypeName = betTypeName;
    return this;
  }

   /**
   * Get betTypeName
   * @return betTypeName
  **/
  @javax.annotation.Nullable
  public String getBetTypeName() {
    return betTypeName;
  }

  public void setBetTypeName(String betTypeName) {
    this.betTypeName = betTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotalsByBetTypeItem totalsByBetTypeItem = (TotalsByBetTypeItem) o;
    return Objects.equals(this.volume, totalsByBetTypeItem.volume) &&
        Objects.equals(this.returned, totalsByBetTypeItem.returned) &&
        Objects.equals(this.GGR, totalsByBetTypeItem.GGR) &&
        Objects.equals(this.margin, totalsByBetTypeItem.margin) &&
        Objects.equals(this.volumePercent, totalsByBetTypeItem.volumePercent) &&
        Objects.equals(this.baseVolume, totalsByBetTypeItem.baseVolume) &&
        Objects.equals(this.baseReturned, totalsByBetTypeItem.baseReturned) &&
        Objects.equals(this.baseGGR, totalsByBetTypeItem.baseGGR) &&
        Objects.equals(this.baseMargin, totalsByBetTypeItem.baseMargin) &&
        Objects.equals(this.baseVolumePercent, totalsByBetTypeItem.baseVolumePercent) &&
        Objects.equals(this.betCount, totalsByBetTypeItem.betCount) &&
        Objects.equals(this.betTypeName, totalsByBetTypeItem.betTypeName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(volume, returned, GGR, margin, volumePercent, baseVolume, baseReturned, baseGGR, baseMargin, baseVolumePercent, betCount, betTypeName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotalsByBetTypeItem {\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    GGR: ").append(toIndentedString(GGR)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    volumePercent: ").append(toIndentedString(volumePercent)).append("\n");
    sb.append("    baseVolume: ").append(toIndentedString(baseVolume)).append("\n");
    sb.append("    baseReturned: ").append(toIndentedString(baseReturned)).append("\n");
    sb.append("    baseGGR: ").append(toIndentedString(baseGGR)).append("\n");
    sb.append("    baseMargin: ").append(toIndentedString(baseMargin)).append("\n");
    sb.append("    baseVolumePercent: ").append(toIndentedString(baseVolumePercent)).append("\n");
    sb.append("    betCount: ").append(toIndentedString(betCount)).append("\n");
    sb.append("    betTypeName: ").append(toIndentedString(betTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Volume");
    openapiFields.add("Returned");
    openapiFields.add("GGR");
    openapiFields.add("Margin");
    openapiFields.add("VolumePercent");
    openapiFields.add("BaseVolume");
    openapiFields.add("BaseReturned");
    openapiFields.add("BaseGGR");
    openapiFields.add("BaseMargin");
    openapiFields.add("BaseVolumePercent");
    openapiFields.add("BetCount");
    openapiFields.add("BetTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotalsByBetTypeItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotalsByBetTypeItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotalsByBetTypeItem is not found in the empty JSON string", TotalsByBetTypeItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotalsByBetTypeItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotalsByBetTypeItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BetTypeName") != null && !jsonObj.get("BetTypeName").isJsonNull()) && !jsonObj.get("BetTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BetTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BetTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotalsByBetTypeItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotalsByBetTypeItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotalsByBetTypeItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotalsByBetTypeItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TotalsByBetTypeItem>() {
           @Override
           public void write(JsonWriter out, TotalsByBetTypeItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotalsByBetTypeItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotalsByBetTypeItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotalsByBetTypeItem
  * @throws IOException if the JSON string is invalid with respect to TotalsByBetTypeItem
  */
  public static TotalsByBetTypeItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotalsByBetTypeItem.class);
  }

 /**
  * Convert an instance of TotalsByBetTypeItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

