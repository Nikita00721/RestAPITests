/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * MarketTranslationItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class MarketTranslationItem {
  public static final String SERIALIZED_NAME_LANGUAGE_NAME = "LanguageName";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_NAME)
  private String languageName;

  public static final String SERIALIZED_NAME_INTERNAL_TRANSLATION = "InternalTranslation";
  @SerializedName(SERIALIZED_NAME_INTERNAL_TRANSLATION)
  private String internalTranslation;

  public static final String SERIALIZED_NAME_INTERNAL_DESCRIPTION = "InternalDescription";
  @SerializedName(SERIALIZED_NAME_INTERNAL_DESCRIPTION)
  private String internalDescription;

  public static final String SERIALIZED_NAME_GLOBAL_TRANSLATION = "GlobalTranslation";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TRANSLATION)
  private String globalTranslation;

  public static final String SERIALIZED_NAME_GLOBAL_DESCRIPTION = "GlobalDescription";
  @SerializedName(SERIALIZED_NAME_GLOBAL_DESCRIPTION)
  private String globalDescription;

  public static final String SERIALIZED_NAME_CUSTOM_TRANSLATION = "CustomTranslation";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TRANSLATION)
  private String customTranslation;

  public static final String SERIALIZED_NAME_CUSTOM_DESCRIPTION = "CustomDescription";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DESCRIPTION)
  private String customDescription;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Integer gender;

  public static final String SERIALIZED_NAME_IS_UNFINISHED = "IsUnfinished";
  @SerializedName(SERIALIZED_NAME_IS_UNFINISHED)
  private Boolean isUnfinished;

  public static final String SERIALIZED_NAME_INHERITANCE_TYPE = "InheritanceType";
  @SerializedName(SERIALIZED_NAME_INHERITANCE_TYPE)
  private Integer inheritanceType;

  public static final String SERIALIZED_NAME_LANGUAGE_ID = "LanguageId";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_ID)
  private Integer languageId;

  public MarketTranslationItem() {
  }

  public MarketTranslationItem languageName(String languageName) {
    this.languageName = languageName;
    return this;
  }

   /**
   * Get languageName
   * @return languageName
  **/
  @javax.annotation.Nullable
  public String getLanguageName() {
    return languageName;
  }

  public void setLanguageName(String languageName) {
    this.languageName = languageName;
  }


  public MarketTranslationItem internalTranslation(String internalTranslation) {
    this.internalTranslation = internalTranslation;
    return this;
  }

   /**
   * Get internalTranslation
   * @return internalTranslation
  **/
  @javax.annotation.Nullable
  public String getInternalTranslation() {
    return internalTranslation;
  }

  public void setInternalTranslation(String internalTranslation) {
    this.internalTranslation = internalTranslation;
  }


  public MarketTranslationItem internalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
    return this;
  }

   /**
   * Get internalDescription
   * @return internalDescription
  **/
  @javax.annotation.Nullable
  public String getInternalDescription() {
    return internalDescription;
  }

  public void setInternalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
  }


  public MarketTranslationItem globalTranslation(String globalTranslation) {
    this.globalTranslation = globalTranslation;
    return this;
  }

   /**
   * Get globalTranslation
   * @return globalTranslation
  **/
  @javax.annotation.Nullable
  public String getGlobalTranslation() {
    return globalTranslation;
  }

  public void setGlobalTranslation(String globalTranslation) {
    this.globalTranslation = globalTranslation;
  }


  public MarketTranslationItem globalDescription(String globalDescription) {
    this.globalDescription = globalDescription;
    return this;
  }

   /**
   * Get globalDescription
   * @return globalDescription
  **/
  @javax.annotation.Nullable
  public String getGlobalDescription() {
    return globalDescription;
  }

  public void setGlobalDescription(String globalDescription) {
    this.globalDescription = globalDescription;
  }


  public MarketTranslationItem customTranslation(String customTranslation) {
    this.customTranslation = customTranslation;
    return this;
  }

   /**
   * Get customTranslation
   * @return customTranslation
  **/
  @javax.annotation.Nullable
  public String getCustomTranslation() {
    return customTranslation;
  }

  public void setCustomTranslation(String customTranslation) {
    this.customTranslation = customTranslation;
  }


  public MarketTranslationItem customDescription(String customDescription) {
    this.customDescription = customDescription;
    return this;
  }

   /**
   * Get customDescription
   * @return customDescription
  **/
  @javax.annotation.Nullable
  public String getCustomDescription() {
    return customDescription;
  }

  public void setCustomDescription(String customDescription) {
    this.customDescription = customDescription;
  }


  public MarketTranslationItem gender(Integer gender) {
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  public Integer getGender() {
    return gender;
  }

  public void setGender(Integer gender) {
    this.gender = gender;
  }


  public MarketTranslationItem isUnfinished(Boolean isUnfinished) {
    this.isUnfinished = isUnfinished;
    return this;
  }

   /**
   * Get isUnfinished
   * @return isUnfinished
  **/
  @javax.annotation.Nullable
  public Boolean getIsUnfinished() {
    return isUnfinished;
  }

  public void setIsUnfinished(Boolean isUnfinished) {
    this.isUnfinished = isUnfinished;
  }


  public MarketTranslationItem inheritanceType(Integer inheritanceType) {
    this.inheritanceType = inheritanceType;
    return this;
  }

   /**
   * Get inheritanceType
   * @return inheritanceType
  **/
  @javax.annotation.Nullable
  public Integer getInheritanceType() {
    return inheritanceType;
  }

  public void setInheritanceType(Integer inheritanceType) {
    this.inheritanceType = inheritanceType;
  }


  public MarketTranslationItem languageId(Integer languageId) {
    this.languageId = languageId;
    return this;
  }

   /**
   * Get languageId
   * @return languageId
  **/
  @javax.annotation.Nullable
  public Integer getLanguageId() {
    return languageId;
  }

  public void setLanguageId(Integer languageId) {
    this.languageId = languageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketTranslationItem marketTranslationItem = (MarketTranslationItem) o;
    return Objects.equals(this.languageName, marketTranslationItem.languageName) &&
        Objects.equals(this.internalTranslation, marketTranslationItem.internalTranslation) &&
        Objects.equals(this.internalDescription, marketTranslationItem.internalDescription) &&
        Objects.equals(this.globalTranslation, marketTranslationItem.globalTranslation) &&
        Objects.equals(this.globalDescription, marketTranslationItem.globalDescription) &&
        Objects.equals(this.customTranslation, marketTranslationItem.customTranslation) &&
        Objects.equals(this.customDescription, marketTranslationItem.customDescription) &&
        Objects.equals(this.gender, marketTranslationItem.gender) &&
        Objects.equals(this.isUnfinished, marketTranslationItem.isUnfinished) &&
        Objects.equals(this.inheritanceType, marketTranslationItem.inheritanceType) &&
        Objects.equals(this.languageId, marketTranslationItem.languageId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageName, internalTranslation, internalDescription, globalTranslation, globalDescription, customTranslation, customDescription, gender, isUnfinished, inheritanceType, languageId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketTranslationItem {\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    internalTranslation: ").append(toIndentedString(internalTranslation)).append("\n");
    sb.append("    internalDescription: ").append(toIndentedString(internalDescription)).append("\n");
    sb.append("    globalTranslation: ").append(toIndentedString(globalTranslation)).append("\n");
    sb.append("    globalDescription: ").append(toIndentedString(globalDescription)).append("\n");
    sb.append("    customTranslation: ").append(toIndentedString(customTranslation)).append("\n");
    sb.append("    customDescription: ").append(toIndentedString(customDescription)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    isUnfinished: ").append(toIndentedString(isUnfinished)).append("\n");
    sb.append("    inheritanceType: ").append(toIndentedString(inheritanceType)).append("\n");
    sb.append("    languageId: ").append(toIndentedString(languageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LanguageName");
    openapiFields.add("InternalTranslation");
    openapiFields.add("InternalDescription");
    openapiFields.add("GlobalTranslation");
    openapiFields.add("GlobalDescription");
    openapiFields.add("CustomTranslation");
    openapiFields.add("CustomDescription");
    openapiFields.add("Gender");
    openapiFields.add("IsUnfinished");
    openapiFields.add("InheritanceType");
    openapiFields.add("LanguageId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketTranslationItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketTranslationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketTranslationItem is not found in the empty JSON string", MarketTranslationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketTranslationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketTranslationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LanguageName") != null && !jsonObj.get("LanguageName").isJsonNull()) && !jsonObj.get("LanguageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LanguageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LanguageName").toString()));
      }
      if ((jsonObj.get("InternalTranslation") != null && !jsonObj.get("InternalTranslation").isJsonNull()) && !jsonObj.get("InternalTranslation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalTranslation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalTranslation").toString()));
      }
      if ((jsonObj.get("InternalDescription") != null && !jsonObj.get("InternalDescription").isJsonNull()) && !jsonObj.get("InternalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalDescription").toString()));
      }
      if ((jsonObj.get("GlobalTranslation") != null && !jsonObj.get("GlobalTranslation").isJsonNull()) && !jsonObj.get("GlobalTranslation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalTranslation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalTranslation").toString()));
      }
      if ((jsonObj.get("GlobalDescription") != null && !jsonObj.get("GlobalDescription").isJsonNull()) && !jsonObj.get("GlobalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalDescription").toString()));
      }
      if ((jsonObj.get("CustomTranslation") != null && !jsonObj.get("CustomTranslation").isJsonNull()) && !jsonObj.get("CustomTranslation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomTranslation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomTranslation").toString()));
      }
      if ((jsonObj.get("CustomDescription") != null && !jsonObj.get("CustomDescription").isJsonNull()) && !jsonObj.get("CustomDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketTranslationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketTranslationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketTranslationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketTranslationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketTranslationItem>() {
           @Override
           public void write(JsonWriter out, MarketTranslationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketTranslationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketTranslationItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketTranslationItem
  * @throws IOException if the JSON string is invalid with respect to MarketTranslationItem
  */
  public static MarketTranslationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketTranslationItem.class);
  }

 /**
  * Convert an instance of MarketTranslationItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

