/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GetMatchesRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetMatchesRequestFilters {
  public static final String SERIALIZED_NAME_DATE_FROM = "DateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private OffsetDateTime dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "DateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private OffsetDateTime dateTo;

  public static final String SERIALIZED_NAME_EVENT_PRODUCTS_TYPE = "EventProductsType";
  @SerializedName(SERIALIZED_NAME_EVENT_PRODUCTS_TYPE)
  private EventLiveTypes eventProductsType;

  public static final String SERIALIZED_NAME_CUSTOM_EVENT_STATUS = "CustomEventStatus";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EVENT_STATUS)
  private CustomEventStatuses customEventStatus;

  public static final String SERIALIZED_NAME_FEED_PROVIDER_IDS = "FeedProviderIds";
  @SerializedName(SERIALIZED_NAME_FEED_PROVIDER_IDS)
  private List<Integer> feedProviderIds;

  public static final String SERIALIZED_NAME_SPORTS_IDS = "SportsIds";
  @SerializedName(SERIALIZED_NAME_SPORTS_IDS)
  private List<Integer> sportsIds;

  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "CategoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private List<Integer> categoriesIds;

  public static final String SERIALIZED_NAME_CHAMPIONSHIPS_IDS = "ChampionshipsIds";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIPS_IDS)
  private List<Integer> championshipsIds;

  public static final String SERIALIZED_NAME_IS_PENDING_CANCELS = "IsPendingCancels";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_CANCELS)
  private Boolean isPendingCancels;

  public static final String SERIALIZED_NAME_IS_ONLY_SELECTED_PROVIDERS = "IsOnlySelectedProviders";
  @SerializedName(SERIALIZED_NAME_IS_ONLY_SELECTED_PROVIDERS)
  private Boolean isOnlySelectedProviders;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "SearchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public GetMatchesRequestFilters() {
  }

  public GetMatchesRequestFilters dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Get dateFrom
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }


  public GetMatchesRequestFilters dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Get dateTo
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }


  public GetMatchesRequestFilters eventProductsType(EventLiveTypes eventProductsType) {
    this.eventProductsType = eventProductsType;
    return this;
  }

   /**
   * Get eventProductsType
   * @return eventProductsType
  **/
  @javax.annotation.Nullable
  public EventLiveTypes getEventProductsType() {
    return eventProductsType;
  }

  public void setEventProductsType(EventLiveTypes eventProductsType) {
    this.eventProductsType = eventProductsType;
  }


  public GetMatchesRequestFilters customEventStatus(CustomEventStatuses customEventStatus) {
    this.customEventStatus = customEventStatus;
    return this;
  }

   /**
   * Get customEventStatus
   * @return customEventStatus
  **/
  @javax.annotation.Nullable
  public CustomEventStatuses getCustomEventStatus() {
    return customEventStatus;
  }

  public void setCustomEventStatus(CustomEventStatuses customEventStatus) {
    this.customEventStatus = customEventStatus;
  }


  public GetMatchesRequestFilters feedProviderIds(List<Integer> feedProviderIds) {
    this.feedProviderIds = feedProviderIds;
    return this;
  }

  public GetMatchesRequestFilters addFeedProviderIdsItem(Integer feedProviderIdsItem) {
    if (this.feedProviderIds == null) {
      this.feedProviderIds = new ArrayList<>();
    }
    this.feedProviderIds.add(feedProviderIdsItem);
    return this;
  }

   /**
   * Get feedProviderIds
   * @return feedProviderIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getFeedProviderIds() {
    return feedProviderIds;
  }

  public void setFeedProviderIds(List<Integer> feedProviderIds) {
    this.feedProviderIds = feedProviderIds;
  }


  public GetMatchesRequestFilters sportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
    return this;
  }

  public GetMatchesRequestFilters addSportsIdsItem(Integer sportsIdsItem) {
    if (this.sportsIds == null) {
      this.sportsIds = new ArrayList<>();
    }
    this.sportsIds.add(sportsIdsItem);
    return this;
  }

   /**
   * Get sportsIds
   * @return sportsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getSportsIds() {
    return sportsIds;
  }

  public void setSportsIds(List<Integer> sportsIds) {
    this.sportsIds = sportsIds;
  }


  public GetMatchesRequestFilters categoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public GetMatchesRequestFilters addCategoriesIdsItem(Integer categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

   /**
   * Get categoriesIds
   * @return categoriesIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Integer> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public GetMatchesRequestFilters championshipsIds(List<Integer> championshipsIds) {
    this.championshipsIds = championshipsIds;
    return this;
  }

  public GetMatchesRequestFilters addChampionshipsIdsItem(Integer championshipsIdsItem) {
    if (this.championshipsIds == null) {
      this.championshipsIds = new ArrayList<>();
    }
    this.championshipsIds.add(championshipsIdsItem);
    return this;
  }

   /**
   * Get championshipsIds
   * @return championshipsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getChampionshipsIds() {
    return championshipsIds;
  }

  public void setChampionshipsIds(List<Integer> championshipsIds) {
    this.championshipsIds = championshipsIds;
  }


  public GetMatchesRequestFilters isPendingCancels(Boolean isPendingCancels) {
    this.isPendingCancels = isPendingCancels;
    return this;
  }

   /**
   * Get isPendingCancels
   * @return isPendingCancels
  **/
  @javax.annotation.Nullable
  public Boolean getIsPendingCancels() {
    return isPendingCancels;
  }

  public void setIsPendingCancels(Boolean isPendingCancels) {
    this.isPendingCancels = isPendingCancels;
  }


  public GetMatchesRequestFilters isOnlySelectedProviders(Boolean isOnlySelectedProviders) {
    this.isOnlySelectedProviders = isOnlySelectedProviders;
    return this;
  }

   /**
   * Get isOnlySelectedProviders
   * @return isOnlySelectedProviders
  **/
  @javax.annotation.Nullable
  public Boolean getIsOnlySelectedProviders() {
    return isOnlySelectedProviders;
  }

  public void setIsOnlySelectedProviders(Boolean isOnlySelectedProviders) {
    this.isOnlySelectedProviders = isOnlySelectedProviders;
  }


  public GetMatchesRequestFilters searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMatchesRequestFilters getMatchesRequestFilters = (GetMatchesRequestFilters) o;
    return Objects.equals(this.dateFrom, getMatchesRequestFilters.dateFrom) &&
        Objects.equals(this.dateTo, getMatchesRequestFilters.dateTo) &&
        Objects.equals(this.eventProductsType, getMatchesRequestFilters.eventProductsType) &&
        Objects.equals(this.customEventStatus, getMatchesRequestFilters.customEventStatus) &&
        Objects.equals(this.feedProviderIds, getMatchesRequestFilters.feedProviderIds) &&
        Objects.equals(this.sportsIds, getMatchesRequestFilters.sportsIds) &&
        Objects.equals(this.categoriesIds, getMatchesRequestFilters.categoriesIds) &&
        Objects.equals(this.championshipsIds, getMatchesRequestFilters.championshipsIds) &&
        Objects.equals(this.isPendingCancels, getMatchesRequestFilters.isPendingCancels) &&
        Objects.equals(this.isOnlySelectedProviders, getMatchesRequestFilters.isOnlySelectedProviders) &&
        Objects.equals(this.searchString, getMatchesRequestFilters.searchString);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateFrom, dateTo, eventProductsType, customEventStatus, feedProviderIds, sportsIds, categoriesIds, championshipsIds, isPendingCancels, isOnlySelectedProviders, searchString);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMatchesRequestFilters {\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    eventProductsType: ").append(toIndentedString(eventProductsType)).append("\n");
    sb.append("    customEventStatus: ").append(toIndentedString(customEventStatus)).append("\n");
    sb.append("    feedProviderIds: ").append(toIndentedString(feedProviderIds)).append("\n");
    sb.append("    sportsIds: ").append(toIndentedString(sportsIds)).append("\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    championshipsIds: ").append(toIndentedString(championshipsIds)).append("\n");
    sb.append("    isPendingCancels: ").append(toIndentedString(isPendingCancels)).append("\n");
    sb.append("    isOnlySelectedProviders: ").append(toIndentedString(isOnlySelectedProviders)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DateFrom");
    openapiFields.add("DateTo");
    openapiFields.add("EventProductsType");
    openapiFields.add("CustomEventStatus");
    openapiFields.add("FeedProviderIds");
    openapiFields.add("SportsIds");
    openapiFields.add("CategoriesIds");
    openapiFields.add("ChampionshipsIds");
    openapiFields.add("IsPendingCancels");
    openapiFields.add("IsOnlySelectedProviders");
    openapiFields.add("SearchString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetMatchesRequestFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMatchesRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMatchesRequestFilters is not found in the empty JSON string", GetMatchesRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMatchesRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMatchesRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EventProductsType`
      if (jsonObj.get("EventProductsType") != null && !jsonObj.get("EventProductsType").isJsonNull()) {
        EventLiveTypes.validateJsonElement(jsonObj.get("EventProductsType"));
      }
      // validate the optional field `CustomEventStatus`
      if (jsonObj.get("CustomEventStatus") != null && !jsonObj.get("CustomEventStatus").isJsonNull()) {
        CustomEventStatuses.validateJsonElement(jsonObj.get("CustomEventStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FeedProviderIds") != null && !jsonObj.get("FeedProviderIds").isJsonNull() && !jsonObj.get("FeedProviderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeedProviderIds` to be an array in the JSON string but got `%s`", jsonObj.get("FeedProviderIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SportsIds") != null && !jsonObj.get("SportsIds").isJsonNull() && !jsonObj.get("SportsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportsIds` to be an array in the JSON string but got `%s`", jsonObj.get("SportsIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoriesIds") != null && !jsonObj.get("CategoriesIds").isJsonNull() && !jsonObj.get("CategoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("CategoriesIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ChampionshipsIds") != null && !jsonObj.get("ChampionshipsIds").isJsonNull() && !jsonObj.get("ChampionshipsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipsIds` to be an array in the JSON string but got `%s`", jsonObj.get("ChampionshipsIds").toString()));
      }
      if ((jsonObj.get("SearchString") != null && !jsonObj.get("SearchString").isJsonNull()) && !jsonObj.get("SearchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMatchesRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMatchesRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMatchesRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMatchesRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMatchesRequestFilters>() {
           @Override
           public void write(JsonWriter out, GetMatchesRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMatchesRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetMatchesRequestFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetMatchesRequestFilters
  * @throws IOException if the JSON string is invalid with respect to GetMatchesRequestFilters
  */
  public static GetMatchesRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMatchesRequestFilters.class);
  }

 /**
  * Convert an instance of GetMatchesRequestFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

