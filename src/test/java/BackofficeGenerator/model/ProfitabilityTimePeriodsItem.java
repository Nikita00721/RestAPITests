/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ProfitabilityTimePeriodsItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class ProfitabilityTimePeriodsItem {
  public static final String SERIALIZED_NAME_TIME_FRAME = "TimeFrame";
  @SerializedName(SERIALIZED_NAME_TIME_FRAME)
  private ProfitabilityTimeframes timeFrame;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_SEARCH_FROM = "SearchFrom";
  @SerializedName(SERIALIZED_NAME_SEARCH_FROM)
  private OffsetDateTime searchFrom;

  public static final String SERIALIZED_NAME_SEARCH_TO = "SearchTo";
  @SerializedName(SERIALIZED_NAME_SEARCH_TO)
  private OffsetDateTime searchTo;

  public static final String SERIALIZED_NAME_PERIOD_ID = "PeriodId";
  @SerializedName(SERIALIZED_NAME_PERIOD_ID)
  private Long periodId;

  public ProfitabilityTimePeriodsItem() {
  }

  public ProfitabilityTimePeriodsItem timeFrame(ProfitabilityTimeframes timeFrame) {
    this.timeFrame = timeFrame;
    return this;
  }

   /**
   * Get timeFrame
   * @return timeFrame
  **/
  @javax.annotation.Nullable
  public ProfitabilityTimeframes getTimeFrame() {
    return timeFrame;
  }

  public void setTimeFrame(ProfitabilityTimeframes timeFrame) {
    this.timeFrame = timeFrame;
  }


  public ProfitabilityTimePeriodsItem startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ProfitabilityTimePeriodsItem endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ProfitabilityTimePeriodsItem searchFrom(OffsetDateTime searchFrom) {
    this.searchFrom = searchFrom;
    return this;
  }

   /**
   * Get searchFrom
   * @return searchFrom
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSearchFrom() {
    return searchFrom;
  }

  public void setSearchFrom(OffsetDateTime searchFrom) {
    this.searchFrom = searchFrom;
  }


  public ProfitabilityTimePeriodsItem searchTo(OffsetDateTime searchTo) {
    this.searchTo = searchTo;
    return this;
  }

   /**
   * Get searchTo
   * @return searchTo
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSearchTo() {
    return searchTo;
  }

  public void setSearchTo(OffsetDateTime searchTo) {
    this.searchTo = searchTo;
  }


  public ProfitabilityTimePeriodsItem periodId(Long periodId) {
    this.periodId = periodId;
    return this;
  }

   /**
   * Get periodId
   * @return periodId
  **/
  @javax.annotation.Nullable
  public Long getPeriodId() {
    return periodId;
  }

  public void setPeriodId(Long periodId) {
    this.periodId = periodId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfitabilityTimePeriodsItem profitabilityTimePeriodsItem = (ProfitabilityTimePeriodsItem) o;
    return Objects.equals(this.timeFrame, profitabilityTimePeriodsItem.timeFrame) &&
        Objects.equals(this.startDate, profitabilityTimePeriodsItem.startDate) &&
        Objects.equals(this.endDate, profitabilityTimePeriodsItem.endDate) &&
        Objects.equals(this.searchFrom, profitabilityTimePeriodsItem.searchFrom) &&
        Objects.equals(this.searchTo, profitabilityTimePeriodsItem.searchTo) &&
        Objects.equals(this.periodId, profitabilityTimePeriodsItem.periodId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeFrame, startDate, endDate, searchFrom, searchTo, periodId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfitabilityTimePeriodsItem {\n");
    sb.append("    timeFrame: ").append(toIndentedString(timeFrame)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    searchFrom: ").append(toIndentedString(searchFrom)).append("\n");
    sb.append("    searchTo: ").append(toIndentedString(searchTo)).append("\n");
    sb.append("    periodId: ").append(toIndentedString(periodId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimeFrame");
    openapiFields.add("StartDate");
    openapiFields.add("EndDate");
    openapiFields.add("SearchFrom");
    openapiFields.add("SearchTo");
    openapiFields.add("PeriodId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProfitabilityTimePeriodsItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfitabilityTimePeriodsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfitabilityTimePeriodsItem is not found in the empty JSON string", ProfitabilityTimePeriodsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfitabilityTimePeriodsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfitabilityTimePeriodsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TimeFrame`
      if (jsonObj.get("TimeFrame") != null && !jsonObj.get("TimeFrame").isJsonNull()) {
        ProfitabilityTimeframes.validateJsonElement(jsonObj.get("TimeFrame"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfitabilityTimePeriodsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfitabilityTimePeriodsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfitabilityTimePeriodsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfitabilityTimePeriodsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfitabilityTimePeriodsItem>() {
           @Override
           public void write(JsonWriter out, ProfitabilityTimePeriodsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfitabilityTimePeriodsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProfitabilityTimePeriodsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProfitabilityTimePeriodsItem
  * @throws IOException if the JSON string is invalid with respect to ProfitabilityTimePeriodsItem
  */
  public static ProfitabilityTimePeriodsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfitabilityTimePeriodsItem.class);
  }

 /**
  * Convert an instance of ProfitabilityTimePeriodsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

