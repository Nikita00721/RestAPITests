/*
 * Backoffice.Api
 * Backoffice.Api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package BackofficeGenerator.model;

import BackofficeGenerator.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.*;

/**
 * GetBoostEventDetailsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-26T23:02:24.556418400+03:00[Europe/Moscow]")
public class GetBoostEventDetailsRequest {
  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Long eventId;

  public static final String SERIALIZED_NAME_IS_LIVE = "IsLive";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_FM_CONFIG_ID = "FMConfigId";
  @SerializedName(SERIALIZED_NAME_FM_CONFIG_ID)
  private Integer fmConfigId;

  public static final String SERIALIZED_NAME_TM_CONFIG_ID = "TMConfigId";
  @SerializedName(SERIALIZED_NAME_TM_CONFIG_ID)
  private Integer tmConfigId;

  public static final String SERIALIZED_NAME_BOOST_CONFIG_ID = "BoostConfigId";
  @SerializedName(SERIALIZED_NAME_BOOST_CONFIG_ID)
  private Integer boostConfigId;

  public GetBoostEventDetailsRequest() {
  }

  public GetBoostEventDetailsRequest eventId(Long eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nullable
  public Long getEventId() {
    return eventId;
  }

  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }


  public GetBoostEventDetailsRequest isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

   /**
   * Get isLive
   * @return isLive
  **/
  @javax.annotation.Nullable
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public GetBoostEventDetailsRequest fmConfigId(Integer fmConfigId) {
    this.fmConfigId = fmConfigId;
    return this;
  }

   /**
   * Get fmConfigId
   * @return fmConfigId
  **/
  @javax.annotation.Nullable
  public Integer getFmConfigId() {
    return fmConfigId;
  }

  public void setFmConfigId(Integer fmConfigId) {
    this.fmConfigId = fmConfigId;
  }


  public GetBoostEventDetailsRequest tmConfigId(Integer tmConfigId) {
    this.tmConfigId = tmConfigId;
    return this;
  }

   /**
   * Get tmConfigId
   * @return tmConfigId
  **/
  @javax.annotation.Nullable
  public Integer getTmConfigId() {
    return tmConfigId;
  }

  public void setTmConfigId(Integer tmConfigId) {
    this.tmConfigId = tmConfigId;
  }


  public GetBoostEventDetailsRequest boostConfigId(Integer boostConfigId) {
    this.boostConfigId = boostConfigId;
    return this;
  }

   /**
   * Get boostConfigId
   * @return boostConfigId
  **/
  @javax.annotation.Nullable
  public Integer getBoostConfigId() {
    return boostConfigId;
  }

  public void setBoostConfigId(Integer boostConfigId) {
    this.boostConfigId = boostConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBoostEventDetailsRequest getBoostEventDetailsRequest = (GetBoostEventDetailsRequest) o;
    return Objects.equals(this.eventId, getBoostEventDetailsRequest.eventId) &&
        Objects.equals(this.isLive, getBoostEventDetailsRequest.isLive) &&
        Objects.equals(this.fmConfigId, getBoostEventDetailsRequest.fmConfigId) &&
        Objects.equals(this.tmConfigId, getBoostEventDetailsRequest.tmConfigId) &&
        Objects.equals(this.boostConfigId, getBoostEventDetailsRequest.boostConfigId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, isLive, fmConfigId, tmConfigId, boostConfigId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBoostEventDetailsRequest {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    fmConfigId: ").append(toIndentedString(fmConfigId)).append("\n");
    sb.append("    tmConfigId: ").append(toIndentedString(tmConfigId)).append("\n");
    sb.append("    boostConfigId: ").append(toIndentedString(boostConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventId");
    openapiFields.add("IsLive");
    openapiFields.add("FMConfigId");
    openapiFields.add("TMConfigId");
    openapiFields.add("BoostConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetBoostEventDetailsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBoostEventDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBoostEventDetailsRequest is not found in the empty JSON string", GetBoostEventDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBoostEventDetailsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBoostEventDetailsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBoostEventDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBoostEventDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBoostEventDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBoostEventDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBoostEventDetailsRequest>() {
           @Override
           public void write(JsonWriter out, GetBoostEventDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBoostEventDetailsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetBoostEventDetailsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetBoostEventDetailsRequest
  * @throws IOException if the JSON string is invalid with respect to GetBoostEventDetailsRequest
  */
  public static GetBoostEventDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBoostEventDetailsRequest.class);
  }

 /**
  * Convert an instance of GetBoostEventDetailsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

