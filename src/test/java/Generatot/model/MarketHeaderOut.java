/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * MarketHeaderOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class MarketHeaderOut {
  public static final String SERIALIZED_NAME_MARKET_TYPE_ID = "MarketTypeId";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_ID)
  private String marketTypeId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPEC_ODD = "SpecOdd";
  @SerializedName(SERIALIZED_NAME_SPEC_ODD)
  private ISpecOdd specOdd;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SelectionTypeOut> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_TEMPLATE = "Template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private Integer template;

  public static final String SERIALIZED_NAME_COLUMN_COUNT = "ColumnCount";
  @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
  private Integer columnCount;

  public static final String SERIALIZED_NAME_MCOLUMN_COUNT = "MColumnCount";
  @SerializedName(SERIALIZED_NAME_MCOLUMN_COUNT)
  private Integer mcolumnCount;

  public MarketHeaderOut() {
  }

  public MarketHeaderOut marketTypeId(String marketTypeId) {
    this.marketTypeId = marketTypeId;
    return this;
  }

   /**
   * Get marketTypeId
   * @return marketTypeId
  **/
  @javax.annotation.Nonnull
  public String getMarketTypeId() {
    return marketTypeId;
  }

  public void setMarketTypeId(String marketTypeId) {
    this.marketTypeId = marketTypeId;
  }


  public MarketHeaderOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MarketHeaderOut specOdd(ISpecOdd specOdd) {
    this.specOdd = specOdd;
    return this;
  }

   /**
   * Get specOdd
   * @return specOdd
  **/
  @javax.annotation.Nullable
  public ISpecOdd getSpecOdd() {
    return specOdd;
  }

  public void setSpecOdd(ISpecOdd specOdd) {
    this.specOdd = specOdd;
  }


  public MarketHeaderOut items(List<SelectionTypeOut> items) {
    this.items = items;
    return this;
  }

  public MarketHeaderOut addItemsItem(SelectionTypeOut itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  public List<SelectionTypeOut> getItems() {
    return items;
  }

  public void setItems(List<SelectionTypeOut> items) {
    this.items = items;
  }


  public MarketHeaderOut sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @javax.annotation.Nonnull
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public MarketHeaderOut template(Integer template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nullable
  public Integer getTemplate() {
    return template;
  }

  public void setTemplate(Integer template) {
    this.template = template;
  }


  public MarketHeaderOut columnCount(Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

   /**
   * Get columnCount
   * @return columnCount
  **/
  @javax.annotation.Nonnull
  public Integer getColumnCount() {
    return columnCount;
  }

  public void setColumnCount(Integer columnCount) {
    this.columnCount = columnCount;
  }


  public MarketHeaderOut mcolumnCount(Integer mcolumnCount) {
    this.mcolumnCount = mcolumnCount;
    return this;
  }

   /**
   * Get mcolumnCount
   * @return mcolumnCount
  **/
  @javax.annotation.Nonnull
  public Integer getMcolumnCount() {
    return mcolumnCount;
  }

  public void setMcolumnCount(Integer mcolumnCount) {
    this.mcolumnCount = mcolumnCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketHeaderOut marketHeaderOut = (MarketHeaderOut) o;
    return Objects.equals(this.marketTypeId, marketHeaderOut.marketTypeId) &&
        Objects.equals(this.name, marketHeaderOut.name) &&
        Objects.equals(this.specOdd, marketHeaderOut.specOdd) &&
        Objects.equals(this.items, marketHeaderOut.items) &&
        Objects.equals(this.sortOrder, marketHeaderOut.sortOrder) &&
        Objects.equals(this.template, marketHeaderOut.template) &&
        Objects.equals(this.columnCount, marketHeaderOut.columnCount) &&
        Objects.equals(this.mcolumnCount, marketHeaderOut.mcolumnCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketTypeId, name, specOdd, items, sortOrder, template, columnCount, mcolumnCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketHeaderOut {\n");
    sb.append("    marketTypeId: ").append(toIndentedString(marketTypeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    specOdd: ").append(toIndentedString(specOdd)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    mcolumnCount: ").append(toIndentedString(mcolumnCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MarketTypeId");
    openapiFields.add("Name");
    openapiFields.add("SpecOdd");
    openapiFields.add("Items");
    openapiFields.add("SortOrder");
    openapiFields.add("Template");
    openapiFields.add("ColumnCount");
    openapiFields.add("MColumnCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MarketTypeId");
    openapiRequiredFields.add("Items");
    openapiRequiredFields.add("SortOrder");
    openapiRequiredFields.add("ColumnCount");
    openapiRequiredFields.add("MColumnCount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MarketHeaderOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketHeaderOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketHeaderOut is not found in the empty JSON string", MarketHeaderOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketHeaderOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketHeaderOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarketHeaderOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MarketTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketTypeId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `SpecOdd`
      if (jsonObj.get("SpecOdd") != null && !jsonObj.get("SpecOdd").isJsonNull()) {
        ISpecOdd.validateJsonElement(jsonObj.get("SpecOdd"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("Items");
      // validate the required field `Items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        SelectionTypeOut.validateJsonElement(jsonArrayitems.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketHeaderOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketHeaderOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketHeaderOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketHeaderOut.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketHeaderOut>() {
           @Override
           public void write(JsonWriter out, MarketHeaderOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketHeaderOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarketHeaderOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarketHeaderOut
  * @throws IOException if the JSON string is invalid with respect to MarketHeaderOut
  */
  public static MarketHeaderOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketHeaderOut.class);
  }

 /**
  * Convert an instance of MarketHeaderOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

