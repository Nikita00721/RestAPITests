/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Odd
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class Odd {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE_ID = "TypeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_BOOST_INFO = "BoostInfo";
  @SerializedName(SERIALIZED_NAME_BOOST_INFO)
  private BoostInfo boostInfo;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "PriceType";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private PriceType priceType;

  public static final String SERIALIZED_NAME_IS_M_B = "IsMB";
  @SerializedName(SERIALIZED_NAME_IS_M_B)
  private Boolean isMB;

  public static final String SERIALIZED_NAME_ODD_STATUS = "OddStatus";
  @SerializedName(SERIALIZED_NAME_ODD_STATUS)
  private OddStatus oddStatus;

  public static final String SERIALIZED_NAME_SV = "sv";
  @SerializedName(SERIALIZED_NAME_SV)
  private String sv;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_IS_B_B = "IsBB";
  @SerializedName(SERIALIZED_NAME_IS_B_B)
  private Boolean isBB;

  public static final String SERIALIZED_NAME_OFFERS = "Offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<OfferTypeParameter> offers;

  public static final String SERIALIZED_NAME_ICON_NAME = "IconName";
  @SerializedName(SERIALIZED_NAME_ICON_NAME)
  private String iconName;

  public static final String SERIALIZED_NAME_TEASERS = "Teasers";
  @SerializedName(SERIALIZED_NAME_TEASERS)
  private Map<String, Odd> teasers = new HashMap<>();

  public static final String SERIALIZED_NAME_CHANCE = "Chance";
  @SerializedName(SERIALIZED_NAME_CHANCE)
  private Double chance;

  public Odd() {
  }

  public Odd(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public Odd typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * Get typeId
   * @return typeId
  **/
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public Odd price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nonnull
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public Odd boostInfo(BoostInfo boostInfo) {
    this.boostInfo = boostInfo;
    return this;
  }

   /**
   * Get boostInfo
   * @return boostInfo
  **/
  @javax.annotation.Nullable
  public BoostInfo getBoostInfo() {
    return boostInfo;
  }

  public void setBoostInfo(BoostInfo boostInfo) {
    this.boostInfo = boostInfo;
  }


  public Odd priceType(PriceType priceType) {
    this.priceType = priceType;
    return this;
  }

   /**
   * Get priceType
   * @return priceType
  **/
  @javax.annotation.Nullable
  public PriceType getPriceType() {
    return priceType;
  }

  public void setPriceType(PriceType priceType) {
    this.priceType = priceType;
  }


  public Odd isMB(Boolean isMB) {
    this.isMB = isMB;
    return this;
  }

   /**
   * Get isMB
   * @return isMB
  **/
  @javax.annotation.Nonnull
  public Boolean getIsMB() {
    return isMB;
  }

  public void setIsMB(Boolean isMB) {
    this.isMB = isMB;
  }


  public Odd oddStatus(OddStatus oddStatus) {
    this.oddStatus = oddStatus;
    return this;
  }

   /**
   * Get oddStatus
   * @return oddStatus
  **/
  @javax.annotation.Nonnull
  public OddStatus getOddStatus() {
    return oddStatus;
  }

  public void setOddStatus(OddStatus oddStatus) {
    this.oddStatus = oddStatus;
  }


  public Odd sv(String sv) {
    this.sv = sv;
    return this;
  }

   /**
   * Get sv
   * @return sv
  **/
  @javax.annotation.Nullable
  public String getSv() {
    return sv;
  }

  public void setSv(String sv) {
    this.sv = sv;
  }


  public Odd code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Odd isBB(Boolean isBB) {
    this.isBB = isBB;
    return this;
  }

   /**
   * Get isBB
   * @return isBB
  **/
  @javax.annotation.Nullable
  public Boolean getIsBB() {
    return isBB;
  }

  public void setIsBB(Boolean isBB) {
    this.isBB = isBB;
  }


  public Odd offers(List<OfferTypeParameter> offers) {
    this.offers = offers;
    return this;
  }

  public Odd addOffersItem(OfferTypeParameter offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Get offers
   * @return offers
  **/
  @javax.annotation.Nullable
  public List<OfferTypeParameter> getOffers() {
    return offers;
  }

  public void setOffers(List<OfferTypeParameter> offers) {
    this.offers = offers;
  }


  public Odd iconName(String iconName) {
    this.iconName = iconName;
    return this;
  }

   /**
   * Get iconName
   * @return iconName
  **/
  @javax.annotation.Nullable
  public String getIconName() {
    return iconName;
  }

  public void setIconName(String iconName) {
    this.iconName = iconName;
  }


  public Odd teasers(Map<String, Odd> teasers) {
    this.teasers = teasers;
    return this;
  }

  public Odd putTeasersItem(String key, Odd teasersItem) {
    if (this.teasers == null) {
      this.teasers = new HashMap<>();
    }
    this.teasers.put(key, teasersItem);
    return this;
  }

   /**
   * Get teasers
   * @return teasers
  **/
  @javax.annotation.Nullable
  public Map<String, Odd> getTeasers() {
    return teasers;
  }

  public void setTeasers(Map<String, Odd> teasers) {
    this.teasers = teasers;
  }


  public Odd chance(Double chance) {
    this.chance = chance;
    return this;
  }

   /**
   * Get chance
   * @return chance
  **/
  @javax.annotation.Nullable
  public Double getChance() {
    return chance;
  }

  public void setChance(Double chance) {
    this.chance = chance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Odd odd = (Odd) o;
    return Objects.equals(this.id, odd.id) &&
        Objects.equals(this.name, odd.name) &&
        Objects.equals(this.typeId, odd.typeId) &&
        Objects.equals(this.price, odd.price) &&
        Objects.equals(this.boostInfo, odd.boostInfo) &&
        Objects.equals(this.priceType, odd.priceType) &&
        Objects.equals(this.isMB, odd.isMB) &&
        Objects.equals(this.oddStatus, odd.oddStatus) &&
        Objects.equals(this.sv, odd.sv) &&
        Objects.equals(this.code, odd.code) &&
        Objects.equals(this.isBB, odd.isBB) &&
        Objects.equals(this.offers, odd.offers) &&
        Objects.equals(this.iconName, odd.iconName) &&
        Objects.equals(this.teasers, odd.teasers) &&
        Objects.equals(this.chance, odd.chance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, typeId, price, boostInfo, priceType, isMB, oddStatus, sv, code, isBB, offers, iconName, teasers, chance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Odd {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    boostInfo: ").append(toIndentedString(boostInfo)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    isMB: ").append(toIndentedString(isMB)).append("\n");
    sb.append("    oddStatus: ").append(toIndentedString(oddStatus)).append("\n");
    sb.append("    sv: ").append(toIndentedString(sv)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    isBB: ").append(toIndentedString(isBB)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    iconName: ").append(toIndentedString(iconName)).append("\n");
    sb.append("    teasers: ").append(toIndentedString(teasers)).append("\n");
    sb.append("    chance: ").append(toIndentedString(chance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("TypeId");
    openapiFields.add("Price");
    openapiFields.add("BoostInfo");
    openapiFields.add("PriceType");
    openapiFields.add("IsMB");
    openapiFields.add("OddStatus");
    openapiFields.add("sv");
    openapiFields.add("Code");
    openapiFields.add("IsBB");
    openapiFields.add("Offers");
    openapiFields.add("IconName");
    openapiFields.add("Teasers");
    openapiFields.add("Chance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TypeId");
    openapiRequiredFields.add("Price");
    openapiRequiredFields.add("IsMB");
    openapiRequiredFields.add("OddStatus");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Odd
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Odd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Odd is not found in the empty JSON string", Odd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Odd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Odd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Odd.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `BoostInfo`
      if (jsonObj.get("BoostInfo") != null && !jsonObj.get("BoostInfo").isJsonNull()) {
        BoostInfo.validateJsonElement(jsonObj.get("BoostInfo"));
      }
      // validate the optional field `PriceType`
      if (jsonObj.get("PriceType") != null && !jsonObj.get("PriceType").isJsonNull()) {
        PriceType.validateJsonElement(jsonObj.get("PriceType"));
      }
      // validate the required field `OddStatus`
      OddStatus.validateJsonElement(jsonObj.get("OddStatus"));
      if ((jsonObj.get("sv") != null && !jsonObj.get("sv").isJsonNull()) && !jsonObj.get("sv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sv").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if (jsonObj.get("Offers") != null && !jsonObj.get("Offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("Offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Offers` to be an array in the JSON string but got `%s`", jsonObj.get("Offers").toString()));
          }

          // validate the optional field `Offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            OfferTypeParameter.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
      if ((jsonObj.get("IconName") != null && !jsonObj.get("IconName").isJsonNull()) && !jsonObj.get("IconName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Odd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Odd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Odd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Odd.class));

       return (TypeAdapter<T>) new TypeAdapter<Odd>() {
           @Override
           public void write(JsonWriter out, Odd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Odd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Odd given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Odd
  * @throws IOException if the JSON string is invalid with respect to Odd
  */
  public static Odd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Odd.class);
  }

 /**
  * Convert an instance of Odd to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

