/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * TotoOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class TotoOut {
  public static final String SERIALIZED_NAME_TOTO_ID = "TotoId";
  @SerializedName(SERIALIZED_NAME_TOTO_ID)
  private Integer totoId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_STAKE = "Stake";
  @SerializedName(SERIALIZED_NAME_STAKE)
  private Double stake;

  public static final String SERIALIZED_NAME_WINNINGS = "Winnings";
  @SerializedName(SERIALIZED_NAME_WINNINGS)
  private Double winnings;

  public static final String SERIALIZED_NAME_TYPE_ID = "TypeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_ORDER_ID = "OrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Integer orderId;

  public static final String SERIALIZED_NAME_ORDER = "Order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private String order;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "CurrencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Integer currencyId;

  public static final String SERIALIZED_NAME_CURRENCY_SIGN = "CurrencySign";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SIGN)
  private String currencySign;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<TotoMarketOut> events;

  public static final String SERIALIZED_NAME_SPLIT_WINNINGS = "SplitWinnings";
  @SerializedName(SERIALIZED_NAME_SPLIT_WINNINGS)
  private Boolean splitWinnings;

  public TotoOut() {
  }

  public TotoOut(
     Integer totoId, 
     String name, 
     OffsetDateTime startDate, 
     OffsetDateTime endDate, 
     Double stake, 
     Double winnings, 
     Integer typeId, 
     Integer orderId, 
     String currencySign, 
     Integer sportId, 
     String sportName, 
     Boolean splitWinnings
  ) {
    this();
    this.totoId = totoId;
    this.name = name;
    this.startDate = startDate;
    this.endDate = endDate;
    this.stake = stake;
    this.winnings = winnings;
    this.typeId = typeId;
    this.orderId = orderId;
    this.currencySign = currencySign;
    this.sportId = sportId;
    this.sportName = sportName;
    this.splitWinnings = splitWinnings;
  }

   /**
   * Get totoId
   * @return totoId
  **/
  @javax.annotation.Nonnull
  public Integer getTotoId() {
    return totoId;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }



   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEndDate() {
    return endDate;
  }



   /**
   * Get stake
   * @return stake
  **/
  @javax.annotation.Nonnull
  public Double getStake() {
    return stake;
  }



   /**
   * Get winnings
   * @return winnings
  **/
  @javax.annotation.Nonnull
  public Double getWinnings() {
    return winnings;
  }



   /**
   * Get typeId
   * @return typeId
  **/
  @javax.annotation.Nonnull
  public Integer getTypeId() {
    return typeId;
  }



   /**
   * Get orderId
   * @return orderId
  **/
  @javax.annotation.Nonnull
  public Integer getOrderId() {
    return orderId;
  }



  public TotoOut order(String order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }


  public TotoOut currencyId(Integer currencyId) {
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Get currencyId
   * @return currencyId
  **/
  @javax.annotation.Nonnull
  public Integer getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }


   /**
   * Get currencySign
   * @return currencySign
  **/
  @javax.annotation.Nullable
  public String getCurrencySign() {
    return currencySign;
  }



   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }



  public TotoOut sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }



  public TotoOut events(List<TotoMarketOut> events) {
    this.events = events;
    return this;
  }

  public TotoOut addEventsItem(TotoMarketOut eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  public List<TotoMarketOut> getEvents() {
    return events;
  }

  public void setEvents(List<TotoMarketOut> events) {
    this.events = events;
  }


   /**
   * Get splitWinnings
   * @return splitWinnings
  **/
  @javax.annotation.Nonnull
  public Boolean getSplitWinnings() {
    return splitWinnings;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotoOut totoOut = (TotoOut) o;
    return Objects.equals(this.totoId, totoOut.totoId) &&
        Objects.equals(this.name, totoOut.name) &&
        Objects.equals(this.startDate, totoOut.startDate) &&
        Objects.equals(this.endDate, totoOut.endDate) &&
        Objects.equals(this.stake, totoOut.stake) &&
        Objects.equals(this.winnings, totoOut.winnings) &&
        Objects.equals(this.typeId, totoOut.typeId) &&
        Objects.equals(this.orderId, totoOut.orderId) &&
        Objects.equals(this.order, totoOut.order) &&
        Objects.equals(this.currencyId, totoOut.currencyId) &&
        Objects.equals(this.currencySign, totoOut.currencySign) &&
        Objects.equals(this.sportId, totoOut.sportId) &&
        Objects.equals(this.sportTypeId, totoOut.sportTypeId) &&
        Objects.equals(this.sportName, totoOut.sportName) &&
        Objects.equals(this.events, totoOut.events) &&
        Objects.equals(this.splitWinnings, totoOut.splitWinnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totoId, name, startDate, endDate, stake, winnings, typeId, orderId, order, currencyId, currencySign, sportId, sportTypeId, sportName, events, splitWinnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotoOut {\n");
    sb.append("    totoId: ").append(toIndentedString(totoId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    winnings: ").append(toIndentedString(winnings)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    currencySign: ").append(toIndentedString(currencySign)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    splitWinnings: ").append(toIndentedString(splitWinnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotoId");
    openapiFields.add("Name");
    openapiFields.add("StartDate");
    openapiFields.add("EndDate");
    openapiFields.add("Stake");
    openapiFields.add("Winnings");
    openapiFields.add("TypeId");
    openapiFields.add("OrderId");
    openapiFields.add("Order");
    openapiFields.add("CurrencyId");
    openapiFields.add("CurrencySign");
    openapiFields.add("SportId");
    openapiFields.add("SportTypeId");
    openapiFields.add("SportName");
    openapiFields.add("Events");
    openapiFields.add("SplitWinnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TotoId");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("EndDate");
    openapiRequiredFields.add("Stake");
    openapiRequiredFields.add("Winnings");
    openapiRequiredFields.add("TypeId");
    openapiRequiredFields.add("OrderId");
    openapiRequiredFields.add("CurrencyId");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("SplitWinnings");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotoOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotoOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotoOut is not found in the empty JSON string", TotoOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotoOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotoOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotoOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Order") != null && !jsonObj.get("Order").isJsonNull()) && !jsonObj.get("Order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Order").toString()));
      }
      if ((jsonObj.get("CurrencySign") != null && !jsonObj.get("CurrencySign").isJsonNull()) && !jsonObj.get("CurrencySign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencySign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencySign").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if (jsonObj.get("Events") != null && !jsonObj.get("Events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("Events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
          }

          // validate the optional field `Events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            TotoMarketOut.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotoOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotoOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotoOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotoOut.class));

       return (TypeAdapter<T>) new TypeAdapter<TotoOut>() {
           @Override
           public void write(JsonWriter out, TotoOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotoOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotoOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotoOut
  * @throws IOException if the JSON string is invalid with respect to TotoOut
  */
  public static TotoOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotoOut.class);
  }

 /**
  * Convert an instance of TotoOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

