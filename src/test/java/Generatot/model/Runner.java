/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * Runner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class Runner {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AGE = "Age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PLACE = "Place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private Integer place;

  public static final String SERIALIZED_NAME_MARKET_IDS = "MarketIds";
  @SerializedName(SERIALIZED_NAME_MARKET_IDS)
  private List<Long> marketIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTORY = "History";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private String history;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private String weight;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_JOKEY_ID = "JokeyId";
  @SerializedName(SERIALIZED_NAME_JOKEY_ID)
  private Long jokeyId;

  public static final String SERIALIZED_NAME_TRAINER = "Trainer";
  @SerializedName(SERIALIZED_NAME_TRAINER)
  private String trainer;

  public static final String SERIALIZED_NAME_DAM = "Dam";
  @SerializedName(SERIALIZED_NAME_DAM)
  private String dam;

  public static final String SERIALIZED_NAME_SIRE = "Sire";
  @SerializedName(SERIALIZED_NAME_SIRE)
  private String sire;

  public static final String SERIALIZED_NAME_SEX = "Sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private String sex;

  public static final String SERIALIZED_NAME_COMMENT = "Comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_ISO = "Iso";
  @SerializedName(SERIALIZED_NAME_ISO)
  private String iso;

  public static final String SERIALIZED_NAME_WINNINGS = "Winnings";
  @SerializedName(SERIALIZED_NAME_WINNINGS)
  private String winnings;

  public static final String SERIALIZED_NAME_NON_RUNNER = "NonRunner";
  @SerializedName(SERIALIZED_NAME_NON_RUNNER)
  private Boolean nonRunner;

  public static final String SERIALIZED_NAME_TRAP = "Trap";
  @SerializedName(SERIALIZED_NAME_TRAP)
  private Integer trap;

  public Runner() {
  }

  public Runner(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public Runner age(Integer age) {
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @javax.annotation.Nonnull
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public Runner position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public Runner place(Integer place) {
    this.place = place;
    return this;
  }

   /**
   * Get place
   * @return place
  **/
  @javax.annotation.Nonnull
  public Integer getPlace() {
    return place;
  }

  public void setPlace(Integer place) {
    this.place = place;
  }


  public Runner marketIds(List<Long> marketIds) {
    this.marketIds = marketIds;
    return this;
  }

  public Runner addMarketIdsItem(Long marketIdsItem) {
    if (this.marketIds == null) {
      this.marketIds = new ArrayList<>();
    }
    this.marketIds.add(marketIdsItem);
    return this;
  }

   /**
   * Get marketIds
   * @return marketIds
  **/
  @javax.annotation.Nonnull
  public List<Long> getMarketIds() {
    return marketIds;
  }

  public void setMarketIds(List<Long> marketIds) {
    this.marketIds = marketIds;
  }


  public Runner history(String history) {
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  public String getHistory() {
    return history;
  }

  public void setHistory(String history) {
    this.history = history;
  }


  public Runner weight(String weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  public String getWeight() {
    return weight;
  }

  public void setWeight(String weight) {
    this.weight = weight;
  }


  public Runner color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public Runner jokeyId(Long jokeyId) {
    this.jokeyId = jokeyId;
    return this;
  }

   /**
   * Get jokeyId
   * @return jokeyId
  **/
  @javax.annotation.Nonnull
  public Long getJokeyId() {
    return jokeyId;
  }

  public void setJokeyId(Long jokeyId) {
    this.jokeyId = jokeyId;
  }


  public Runner trainer(String trainer) {
    this.trainer = trainer;
    return this;
  }

   /**
   * Get trainer
   * @return trainer
  **/
  @javax.annotation.Nullable
  public String getTrainer() {
    return trainer;
  }

  public void setTrainer(String trainer) {
    this.trainer = trainer;
  }


  public Runner dam(String dam) {
    this.dam = dam;
    return this;
  }

   /**
   * Get dam
   * @return dam
  **/
  @javax.annotation.Nullable
  public String getDam() {
    return dam;
  }

  public void setDam(String dam) {
    this.dam = dam;
  }


  public Runner sire(String sire) {
    this.sire = sire;
    return this;
  }

   /**
   * Get sire
   * @return sire
  **/
  @javax.annotation.Nullable
  public String getSire() {
    return sire;
  }

  public void setSire(String sire) {
    this.sire = sire;
  }


  public Runner sex(String sex) {
    this.sex = sex;
    return this;
  }

   /**
   * Get sex
   * @return sex
  **/
  @javax.annotation.Nullable
  public String getSex() {
    return sex;
  }

  public void setSex(String sex) {
    this.sex = sex;
  }


  public Runner comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Runner iso(String iso) {
    this.iso = iso;
    return this;
  }

   /**
   * Get iso
   * @return iso
  **/
  @javax.annotation.Nullable
  public String getIso() {
    return iso;
  }

  public void setIso(String iso) {
    this.iso = iso;
  }


  public Runner winnings(String winnings) {
    this.winnings = winnings;
    return this;
  }

   /**
   * Get winnings
   * @return winnings
  **/
  @javax.annotation.Nullable
  public String getWinnings() {
    return winnings;
  }

  public void setWinnings(String winnings) {
    this.winnings = winnings;
  }


  public Runner nonRunner(Boolean nonRunner) {
    this.nonRunner = nonRunner;
    return this;
  }

   /**
   * Get nonRunner
   * @return nonRunner
  **/
  @javax.annotation.Nonnull
  public Boolean getNonRunner() {
    return nonRunner;
  }

  public void setNonRunner(Boolean nonRunner) {
    this.nonRunner = nonRunner;
  }


  public Runner trap(Integer trap) {
    this.trap = trap;
    return this;
  }

   /**
   * Get trap
   * @return trap
  **/
  @javax.annotation.Nullable
  public Integer getTrap() {
    return trap;
  }

  public void setTrap(Integer trap) {
    this.trap = trap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Runner runner = (Runner) o;
    return Objects.equals(this.id, runner.id) &&
        Objects.equals(this.name, runner.name) &&
        Objects.equals(this.age, runner.age) &&
        Objects.equals(this.position, runner.position) &&
        Objects.equals(this.place, runner.place) &&
        Objects.equals(this.marketIds, runner.marketIds) &&
        Objects.equals(this.history, runner.history) &&
        Objects.equals(this.weight, runner.weight) &&
        Objects.equals(this.color, runner.color) &&
        Objects.equals(this.jokeyId, runner.jokeyId) &&
        Objects.equals(this.trainer, runner.trainer) &&
        Objects.equals(this.dam, runner.dam) &&
        Objects.equals(this.sire, runner.sire) &&
        Objects.equals(this.sex, runner.sex) &&
        Objects.equals(this.comment, runner.comment) &&
        Objects.equals(this.iso, runner.iso) &&
        Objects.equals(this.winnings, runner.winnings) &&
        Objects.equals(this.nonRunner, runner.nonRunner) &&
        Objects.equals(this.trap, runner.trap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, age, position, place, marketIds, history, weight, color, jokeyId, trainer, dam, sire, sex, comment, iso, winnings, nonRunner, trap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Runner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    marketIds: ").append(toIndentedString(marketIds)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    jokeyId: ").append(toIndentedString(jokeyId)).append("\n");
    sb.append("    trainer: ").append(toIndentedString(trainer)).append("\n");
    sb.append("    dam: ").append(toIndentedString(dam)).append("\n");
    sb.append("    sire: ").append(toIndentedString(sire)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    iso: ").append(toIndentedString(iso)).append("\n");
    sb.append("    winnings: ").append(toIndentedString(winnings)).append("\n");
    sb.append("    nonRunner: ").append(toIndentedString(nonRunner)).append("\n");
    sb.append("    trap: ").append(toIndentedString(trap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Age");
    openapiFields.add("Position");
    openapiFields.add("Place");
    openapiFields.add("MarketIds");
    openapiFields.add("History");
    openapiFields.add("Weight");
    openapiFields.add("Color");
    openapiFields.add("JokeyId");
    openapiFields.add("Trainer");
    openapiFields.add("Dam");
    openapiFields.add("Sire");
    openapiFields.add("Sex");
    openapiFields.add("Comment");
    openapiFields.add("Iso");
    openapiFields.add("Winnings");
    openapiFields.add("NonRunner");
    openapiFields.add("Trap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Age");
    openapiRequiredFields.add("Position");
    openapiRequiredFields.add("Place");
    openapiRequiredFields.add("MarketIds");
    openapiRequiredFields.add("JokeyId");
    openapiRequiredFields.add("NonRunner");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Runner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Runner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Runner is not found in the empty JSON string", Runner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Runner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Runner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Runner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("MarketIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("MarketIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketIds` to be an array in the JSON string but got `%s`", jsonObj.get("MarketIds").toString()));
      }
      if ((jsonObj.get("History") != null && !jsonObj.get("History").isJsonNull()) && !jsonObj.get("History").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `History` to be a primitive type in the JSON string but got `%s`", jsonObj.get("History").toString()));
      }
      if ((jsonObj.get("Weight") != null && !jsonObj.get("Weight").isJsonNull()) && !jsonObj.get("Weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Weight").toString()));
      }
      if ((jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) && !jsonObj.get("Color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Color").toString()));
      }
      if ((jsonObj.get("Trainer") != null && !jsonObj.get("Trainer").isJsonNull()) && !jsonObj.get("Trainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Trainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Trainer").toString()));
      }
      if ((jsonObj.get("Dam") != null && !jsonObj.get("Dam").isJsonNull()) && !jsonObj.get("Dam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dam").toString()));
      }
      if ((jsonObj.get("Sire") != null && !jsonObj.get("Sire").isJsonNull()) && !jsonObj.get("Sire").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sire` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sire").toString()));
      }
      if ((jsonObj.get("Sex") != null && !jsonObj.get("Sex").isJsonNull()) && !jsonObj.get("Sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sex").toString()));
      }
      if ((jsonObj.get("Comment") != null && !jsonObj.get("Comment").isJsonNull()) && !jsonObj.get("Comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comment").toString()));
      }
      if ((jsonObj.get("Iso") != null && !jsonObj.get("Iso").isJsonNull()) && !jsonObj.get("Iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Iso").toString()));
      }
      if ((jsonObj.get("Winnings") != null && !jsonObj.get("Winnings").isJsonNull()) && !jsonObj.get("Winnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Winnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Winnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Runner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Runner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Runner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Runner.class));

       return (TypeAdapter<T>) new TypeAdapter<Runner>() {
           @Override
           public void write(JsonWriter out, Runner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Runner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Runner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Runner
  * @throws IOException if the JSON string is invalid with respect to Runner
  */
  public static Runner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Runner.class);
  }

 /**
  * Convert an instance of Runner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

