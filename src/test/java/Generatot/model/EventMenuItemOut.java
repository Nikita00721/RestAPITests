/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * EventMenuItemOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class EventMenuItemOut {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE = "Node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<EventMenuItemOut> items;

  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<EventOut> events;

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<MarketHeaderOut> headers;

  public static final String SERIALIZED_NAME_ORDER = "Order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_I_S_O = "ISO";
  @SerializedName(SERIALIZED_NAME_I_S_O)
  private String ISO;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_MARKET_GROUPS = "MarketGroups";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUPS)
  private List<MarketTypeGroupOut> marketGroups;

  public EventMenuItemOut() {
  }

  public EventMenuItemOut id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public EventMenuItemOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventMenuItemOut node(String node) {
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }


  public EventMenuItemOut items(List<EventMenuItemOut> items) {
    this.items = items;
    return this;
  }

  public EventMenuItemOut addItemsItem(EventMenuItemOut itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public List<EventMenuItemOut> getItems() {
    return items;
  }

  public void setItems(List<EventMenuItemOut> items) {
    this.items = items;
  }


  public EventMenuItemOut events(List<EventOut> events) {
    this.events = events;
    return this;
  }

  public EventMenuItemOut addEventsItem(EventOut eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  public List<EventOut> getEvents() {
    return events;
  }

  public void setEvents(List<EventOut> events) {
    this.events = events;
  }


  public EventMenuItemOut headers(List<MarketHeaderOut> headers) {
    this.headers = headers;
    return this;
  }

  public EventMenuItemOut addHeadersItem(MarketHeaderOut headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  public List<MarketHeaderOut> getHeaders() {
    return headers;
  }

  public void setHeaders(List<MarketHeaderOut> headers) {
    this.headers = headers;
  }


  public EventMenuItemOut order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public EventMenuItemOut ISO(String ISO) {
    this.ISO = ISO;
    return this;
  }

   /**
   * Get ISO
   * @return ISO
  **/
  @javax.annotation.Nullable
  public String getISO() {
    return ISO;
  }

  public void setISO(String ISO) {
    this.ISO = ISO;
  }


  public EventMenuItemOut sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nullable
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public EventMenuItemOut marketGroups(List<MarketTypeGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
    return this;
  }

  public EventMenuItemOut addMarketGroupsItem(MarketTypeGroupOut marketGroupsItem) {
    if (this.marketGroups == null) {
      this.marketGroups = new ArrayList<>();
    }
    this.marketGroups.add(marketGroupsItem);
    return this;
  }

   /**
   * Get marketGroups
   * @return marketGroups
  **/
  @javax.annotation.Nullable
  public List<MarketTypeGroupOut> getMarketGroups() {
    return marketGroups;
  }

  public void setMarketGroups(List<MarketTypeGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventMenuItemOut eventMenuItemOut = (EventMenuItemOut) o;
    return Objects.equals(this.id, eventMenuItemOut.id) &&
        Objects.equals(this.name, eventMenuItemOut.name) &&
        Objects.equals(this.node, eventMenuItemOut.node) &&
        Objects.equals(this.items, eventMenuItemOut.items) &&
        Objects.equals(this.events, eventMenuItemOut.events) &&
        Objects.equals(this.headers, eventMenuItemOut.headers) &&
        Objects.equals(this.order, eventMenuItemOut.order) &&
        Objects.equals(this.ISO, eventMenuItemOut.ISO) &&
        Objects.equals(this.sportTypeId, eventMenuItemOut.sportTypeId) &&
        Objects.equals(this.marketGroups, eventMenuItemOut.marketGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, node, items, events, headers, order, ISO, sportTypeId, marketGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventMenuItemOut {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    ISO: ").append(toIndentedString(ISO)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    marketGroups: ").append(toIndentedString(marketGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Node");
    openapiFields.add("Items");
    openapiFields.add("Events");
    openapiFields.add("Headers");
    openapiFields.add("Order");
    openapiFields.add("ISO");
    openapiFields.add("SportTypeId");
    openapiFields.add("MarketGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Order");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventMenuItemOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventMenuItemOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventMenuItemOut is not found in the empty JSON string", EventMenuItemOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventMenuItemOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventMenuItemOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventMenuItemOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Node") != null && !jsonObj.get("Node").isJsonNull()) && !jsonObj.get("Node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Node").toString()));
      }
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("Items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
          }

          // validate the optional field `Items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            EventMenuItemOut.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("Events") != null && !jsonObj.get("Events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("Events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
          }

          // validate the optional field `Events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            EventOut.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if (jsonObj.get("Headers") != null && !jsonObj.get("Headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("Headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Headers` to be an array in the JSON string but got `%s`", jsonObj.get("Headers").toString()));
          }

          // validate the optional field `Headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            MarketHeaderOut.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("ISO") != null && !jsonObj.get("ISO").isJsonNull()) && !jsonObj.get("ISO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ISO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ISO").toString()));
      }
      if (jsonObj.get("MarketGroups") != null && !jsonObj.get("MarketGroups").isJsonNull()) {
        JsonArray jsonArraymarketGroups = jsonObj.getAsJsonArray("MarketGroups");
        if (jsonArraymarketGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MarketGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MarketGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MarketGroups").toString()));
          }

          // validate the optional field `MarketGroups` (array)
          for (int i = 0; i < jsonArraymarketGroups.size(); i++) {
            MarketTypeGroupOut.validateJsonElement(jsonArraymarketGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventMenuItemOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventMenuItemOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventMenuItemOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventMenuItemOut.class));

       return (TypeAdapter<T>) new TypeAdapter<EventMenuItemOut>() {
           @Override
           public void write(JsonWriter out, EventMenuItemOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventMenuItemOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventMenuItemOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventMenuItemOut
  * @throws IOException if the JSON string is invalid with respect to EventMenuItemOut
  */
  public static EventMenuItemOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventMenuItemOut.class);
  }

 /**
  * Convert an instance of EventMenuItemOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

