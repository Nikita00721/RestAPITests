/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Race
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class Race {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VENUE_ID = "VenueId";
  @SerializedName(SERIALIZED_NAME_VENUE_ID)
  private Integer venueId;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "CountryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private Integer countryId;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_RUNNER_COUNT = "RunnerCount";
  @SerializedName(SERIALIZED_NAME_RUNNER_COUNT)
  private Integer runnerCount;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EventStatus status;

  public static final String SERIALIZED_NAME_HAS_STREAM = "HasStream";
  @SerializedName(SERIALIZED_NAME_HAS_STREAM)
  private Boolean hasStream;

  public static final String SERIALIZED_NAME_HANDICAP = "Handicap";
  @SerializedName(SERIALIZED_NAME_HANDICAP)
  private Boolean handicap;

  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private String distance;

  public static final String SERIALIZED_NAME_SURFACE_TYPE = "SurfaceType";
  @SerializedName(SERIALIZED_NAME_SURFACE_TYPE)
  private String surfaceType;

  public static final String SERIALIZED_NAME_PLACE_WINNERS = "PlaceWinners";
  @SerializedName(SERIALIZED_NAME_PLACE_WINNERS)
  private Integer placeWinners;

  public Race() {
  }

  public Race(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public Race venueId(Integer venueId) {
    this.venueId = venueId;
    return this;
  }

   /**
   * Get venueId
   * @return venueId
  **/
  @javax.annotation.Nonnull
  public Integer getVenueId() {
    return venueId;
  }

  public void setVenueId(Integer venueId) {
    this.venueId = venueId;
  }


  public Race countryId(Integer countryId) {
    this.countryId = countryId;
    return this;
  }

   /**
   * Get countryId
   * @return countryId
  **/
  @javax.annotation.Nonnull
  public Integer getCountryId() {
    return countryId;
  }

  public void setCountryId(Integer countryId) {
    this.countryId = countryId;
  }


  public Race startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public Race runnerCount(Integer runnerCount) {
    this.runnerCount = runnerCount;
    return this;
  }

   /**
   * Get runnerCount
   * @return runnerCount
  **/
  @javax.annotation.Nonnull
  public Integer getRunnerCount() {
    return runnerCount;
  }

  public void setRunnerCount(Integer runnerCount) {
    this.runnerCount = runnerCount;
  }


  public Race status(EventStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public EventStatus getStatus() {
    return status;
  }

  public void setStatus(EventStatus status) {
    this.status = status;
  }


  public Race hasStream(Boolean hasStream) {
    this.hasStream = hasStream;
    return this;
  }

   /**
   * Get hasStream
   * @return hasStream
  **/
  @javax.annotation.Nonnull
  public Boolean getHasStream() {
    return hasStream;
  }

  public void setHasStream(Boolean hasStream) {
    this.hasStream = hasStream;
  }


  public Race handicap(Boolean handicap) {
    this.handicap = handicap;
    return this;
  }

   /**
   * Get handicap
   * @return handicap
  **/
  @javax.annotation.Nonnull
  public Boolean getHandicap() {
    return handicap;
  }

  public void setHandicap(Boolean handicap) {
    this.handicap = handicap;
  }


  public Race distance(String distance) {
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  public String getDistance() {
    return distance;
  }

  public void setDistance(String distance) {
    this.distance = distance;
  }


  public Race surfaceType(String surfaceType) {
    this.surfaceType = surfaceType;
    return this;
  }

   /**
   * Get surfaceType
   * @return surfaceType
  **/
  @javax.annotation.Nullable
  public String getSurfaceType() {
    return surfaceType;
  }

  public void setSurfaceType(String surfaceType) {
    this.surfaceType = surfaceType;
  }


  public Race placeWinners(Integer placeWinners) {
    this.placeWinners = placeWinners;
    return this;
  }

   /**
   * Get placeWinners
   * @return placeWinners
  **/
  @javax.annotation.Nonnull
  public Integer getPlaceWinners() {
    return placeWinners;
  }

  public void setPlaceWinners(Integer placeWinners) {
    this.placeWinners = placeWinners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Race race = (Race) o;
    return Objects.equals(this.id, race.id) &&
        Objects.equals(this.name, race.name) &&
        Objects.equals(this.venueId, race.venueId) &&
        Objects.equals(this.countryId, race.countryId) &&
        Objects.equals(this.startDate, race.startDate) &&
        Objects.equals(this.runnerCount, race.runnerCount) &&
        Objects.equals(this.status, race.status) &&
        Objects.equals(this.hasStream, race.hasStream) &&
        Objects.equals(this.handicap, race.handicap) &&
        Objects.equals(this.distance, race.distance) &&
        Objects.equals(this.surfaceType, race.surfaceType) &&
        Objects.equals(this.placeWinners, race.placeWinners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, venueId, countryId, startDate, runnerCount, status, hasStream, handicap, distance, surfaceType, placeWinners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Race {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    venueId: ").append(toIndentedString(venueId)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    runnerCount: ").append(toIndentedString(runnerCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hasStream: ").append(toIndentedString(hasStream)).append("\n");
    sb.append("    handicap: ").append(toIndentedString(handicap)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    surfaceType: ").append(toIndentedString(surfaceType)).append("\n");
    sb.append("    placeWinners: ").append(toIndentedString(placeWinners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("VenueId");
    openapiFields.add("CountryId");
    openapiFields.add("StartDate");
    openapiFields.add("RunnerCount");
    openapiFields.add("Status");
    openapiFields.add("HasStream");
    openapiFields.add("Handicap");
    openapiFields.add("Distance");
    openapiFields.add("SurfaceType");
    openapiFields.add("PlaceWinners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("VenueId");
    openapiRequiredFields.add("CountryId");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("RunnerCount");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("HasStream");
    openapiRequiredFields.add("Handicap");
    openapiRequiredFields.add("PlaceWinners");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Race
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Race.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Race is not found in the empty JSON string", Race.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Race.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Race` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Race.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the required field `Status`
      EventStatus.validateJsonElement(jsonObj.get("Status"));
      if ((jsonObj.get("Distance") != null && !jsonObj.get("Distance").isJsonNull()) && !jsonObj.get("Distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Distance").toString()));
      }
      if ((jsonObj.get("SurfaceType") != null && !jsonObj.get("SurfaceType").isJsonNull()) && !jsonObj.get("SurfaceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SurfaceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SurfaceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Race.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Race' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Race> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Race.class));

       return (TypeAdapter<T>) new TypeAdapter<Race>() {
           @Override
           public void write(JsonWriter out, Race value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Race read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Race given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Race
  * @throws IOException if the JSON string is invalid with respect to Race
  */
  public static Race fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Race.class);
  }

 /**
  * Convert an instance of Race to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

