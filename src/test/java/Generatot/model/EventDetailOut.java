/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * EventDetailOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class EventDetailOut {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_EXT_ID = "ExtId";
  @SerializedName(SERIALIZED_NAME_EXT_ID)
  private String extId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private ClientEventTypes eventType;

  public static final String SERIALIZED_NAME_NODE_TYPE = "NodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private String nodeType;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<CompetitorOut> competitors;

  public static final String SERIALIZED_NAME_IS_LIVE_EVENT = "IsLiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_EVENT)
  private Boolean isLiveEvent;

  public static final String SERIALIZED_NAME_LIVE_CURRENT_TIME = "LiveCurrentTime";
  @SerializedName(SERIALIZED_NAME_LIVE_CURRENT_TIME)
  private String liveCurrentTime;

  public static final String SERIALIZED_NAME_LIVE_SCORE = "LiveScore";
  @SerializedName(SERIALIZED_NAME_LIVE_SCORE)
  private String liveScore;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private Integer server;

  public static final String SERIALIZED_NAME_POINT_SCORE = "PointScore";
  @SerializedName(SERIALIZED_NAME_POINT_SCORE)
  private String pointScore;

  public static final String SERIALIZED_NAME_CURRENT_SET_SCORE = "CurrentSetScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_SET_SCORE)
  private String currentSetScore;

  public static final String SERIALIZED_NAME_MARKET_GROUPS = "MarketGroups";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUPS)
  private List<MarketGroupOut> marketGroups;

  public static final String SERIALIZED_NAME_IS_PARLAY = "IsParlay";
  @SerializedName(SERIALIZED_NAME_IS_PARLAY)
  private Boolean isParlay;

  public static final String SERIALIZED_NAME_E_P = "EP";
  @SerializedName(SERIALIZED_NAME_E_P)
  private Boolean EP;

  public static final String SERIALIZED_NAME_B_D = "BD";
  @SerializedName(SERIALIZED_NAME_B_D)
  private Boolean BD;

  public static final String SERIALIZED_NAME_EXTRA_EVENT_INFO = "ExtraEventInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_EVENT_INFO)
  private String extraEventInfo;

  public static final String SERIALIZED_NAME_IS_VIRTUAL = "IsVirtual";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL)
  private Boolean isVirtual;

  public static final String SERIALIZED_NAME_EVENT_CODE = "EventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private Integer eventCode;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "CategoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Long champId;

  public static final String SERIALIZED_NAME_CHAMP_NAME = "ChampName";
  @SerializedName(SERIALIZED_NAME_CHAMP_NAME)
  private String champName;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_SPORT_ICON = "SportIcon";
  @SerializedName(SERIALIZED_NAME_SPORT_ICON)
  private String sportIcon;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_QUICK_PICK_ENABLED = "QuickPickEnabled";
  @SerializedName(SERIALIZED_NAME_QUICK_PICK_ENABLED)
  private Boolean quickPickEnabled;

  public static final String SERIALIZED_NAME_NUMBER_OF_MAIN_BALLS = "NumberOfMainBalls";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MAIN_BALLS)
  private Integer numberOfMainBalls;

  public static final String SERIALIZED_NAME_NUMBER_OF_BONUS_BALLS = "NumberOfBonusBalls";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_BONUS_BALLS)
  private Integer numberOfBonusBalls;

  public static final String SERIALIZED_NAME_BONUS_BALL_TYPE = "BonusBallType";
  @SerializedName(SERIALIZED_NAME_BONUS_BALL_TYPE)
  private LotteryBonusBallType bonusBallType;

  public static final String SERIALIZED_NAME_DB_ID = "DbId";
  @SerializedName(SERIALIZED_NAME_DB_ID)
  private Integer dbId;

  public static final String SERIALIZED_NAME_PITCHER_INFO = "PitcherInfo";
  @SerializedName(SERIALIZED_NAME_PITCHER_INFO)
  private IPitcherInfo pitcherInfo;

  public static final String SERIALIZED_NAME_R_C = "RC";
  @SerializedName(SERIALIZED_NAME_R_C)
  private Boolean RC;

  public static final String SERIALIZED_NAME_TEASER_MARKETS = "TeaserMarkets";
  @SerializedName(SERIALIZED_NAME_TEASER_MARKETS)
  private Map<String, Map<String, Selection>> teaserMarkets = new HashMap<>();

  public EventDetailOut() {
  }

  public EventDetailOut id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public EventDetailOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventDetailOut eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public EventDetailOut status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public EventDetailOut extId(String extId) {
    this.extId = extId;
    return this;
  }

   /**
   * Get extId
   * @return extId
  **/
  @javax.annotation.Nullable
  public String getExtId() {
    return extId;
  }

  public void setExtId(String extId) {
    this.extId = extId;
  }


  public EventDetailOut eventType(ClientEventTypes eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public ClientEventTypes getEventType() {
    return eventType;
  }

  public void setEventType(ClientEventTypes eventType) {
    this.eventType = eventType;
  }


  public EventDetailOut nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @javax.annotation.Nullable
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }


  public EventDetailOut competitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
    return this;
  }

  public EventDetailOut addCompetitorsItem(CompetitorOut competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<CompetitorOut> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
  }


  public EventDetailOut isLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
    return this;
  }

   /**
   * Get isLiveEvent
   * @return isLiveEvent
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveEvent() {
    return isLiveEvent;
  }

  public void setIsLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
  }


  public EventDetailOut liveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
    return this;
  }

   /**
   * Get liveCurrentTime
   * @return liveCurrentTime
  **/
  @javax.annotation.Nullable
  public String getLiveCurrentTime() {
    return liveCurrentTime;
  }

  public void setLiveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
  }


  public EventDetailOut liveScore(String liveScore) {
    this.liveScore = liveScore;
    return this;
  }

   /**
   * Get liveScore
   * @return liveScore
  **/
  @javax.annotation.Nullable
  public String getLiveScore() {
    return liveScore;
  }

  public void setLiveScore(String liveScore) {
    this.liveScore = liveScore;
  }


  public EventDetailOut server(Integer server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  public Integer getServer() {
    return server;
  }

  public void setServer(Integer server) {
    this.server = server;
  }


  public EventDetailOut pointScore(String pointScore) {
    this.pointScore = pointScore;
    return this;
  }

   /**
   * Get pointScore
   * @return pointScore
  **/
  @javax.annotation.Nullable
  public String getPointScore() {
    return pointScore;
  }

  public void setPointScore(String pointScore) {
    this.pointScore = pointScore;
  }


  public EventDetailOut currentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
    return this;
  }

   /**
   * Get currentSetScore
   * @return currentSetScore
  **/
  @javax.annotation.Nullable
  public String getCurrentSetScore() {
    return currentSetScore;
  }

  public void setCurrentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
  }


  public EventDetailOut marketGroups(List<MarketGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
    return this;
  }

  public EventDetailOut addMarketGroupsItem(MarketGroupOut marketGroupsItem) {
    if (this.marketGroups == null) {
      this.marketGroups = new ArrayList<>();
    }
    this.marketGroups.add(marketGroupsItem);
    return this;
  }

   /**
   * Get marketGroups
   * @return marketGroups
  **/
  @javax.annotation.Nullable
  public List<MarketGroupOut> getMarketGroups() {
    return marketGroups;
  }

  public void setMarketGroups(List<MarketGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
  }


  public EventDetailOut isParlay(Boolean isParlay) {
    this.isParlay = isParlay;
    return this;
  }

   /**
   * Get isParlay
   * @return isParlay
  **/
  @javax.annotation.Nonnull
  public Boolean getIsParlay() {
    return isParlay;
  }

  public void setIsParlay(Boolean isParlay) {
    this.isParlay = isParlay;
  }


  public EventDetailOut EP(Boolean EP) {
    this.EP = EP;
    return this;
  }

   /**
   * Get EP
   * @return EP
  **/
  @javax.annotation.Nullable
  public Boolean getEP() {
    return EP;
  }

  public void setEP(Boolean EP) {
    this.EP = EP;
  }


  public EventDetailOut BD(Boolean BD) {
    this.BD = BD;
    return this;
  }

   /**
   * Get BD
   * @return BD
  **/
  @javax.annotation.Nullable
  public Boolean getBD() {
    return BD;
  }

  public void setBD(Boolean BD) {
    this.BD = BD;
  }


  public EventDetailOut extraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
    return this;
  }

   /**
   * Get extraEventInfo
   * @return extraEventInfo
  **/
  @javax.annotation.Nullable
  public String getExtraEventInfo() {
    return extraEventInfo;
  }

  public void setExtraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
  }


  public EventDetailOut isVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
    return this;
  }

   /**
   * Get isVirtual
   * @return isVirtual
  **/
  @javax.annotation.Nonnull
  public Boolean getIsVirtual() {
    return isVirtual;
  }

  public void setIsVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
  }


  public EventDetailOut eventCode(Integer eventCode) {
    this.eventCode = eventCode;
    return this;
  }

   /**
   * Get eventCode
   * @return eventCode
  **/
  @javax.annotation.Nullable
  public Integer getEventCode() {
    return eventCode;
  }

  public void setEventCode(Integer eventCode) {
    this.eventCode = eventCode;
  }


  public EventDetailOut categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * Get categoryName
   * @return categoryName
  **/
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public EventDetailOut champId(Long champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nonnull
  public Long getChampId() {
    return champId;
  }

  public void setChampId(Long champId) {
    this.champId = champId;
  }


  public EventDetailOut champName(String champName) {
    this.champName = champName;
    return this;
  }

   /**
   * Get champName
   * @return champName
  **/
  @javax.annotation.Nullable
  public String getChampName() {
    return champName;
  }

  public void setChampName(String champName) {
    this.champName = champName;
  }


  public EventDetailOut sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public EventDetailOut sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public EventDetailOut sportIcon(String sportIcon) {
    this.sportIcon = sportIcon;
    return this;
  }

   /**
   * Get sportIcon
   * @return sportIcon
  **/
  @javax.annotation.Nullable
  public String getSportIcon() {
    return sportIcon;
  }

  public void setSportIcon(String sportIcon) {
    this.sportIcon = sportIcon;
  }


  public EventDetailOut sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public EventDetailOut quickPickEnabled(Boolean quickPickEnabled) {
    this.quickPickEnabled = quickPickEnabled;
    return this;
  }

   /**
   * Get quickPickEnabled
   * @return quickPickEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getQuickPickEnabled() {
    return quickPickEnabled;
  }

  public void setQuickPickEnabled(Boolean quickPickEnabled) {
    this.quickPickEnabled = quickPickEnabled;
  }


  public EventDetailOut numberOfMainBalls(Integer numberOfMainBalls) {
    this.numberOfMainBalls = numberOfMainBalls;
    return this;
  }

   /**
   * Get numberOfMainBalls
   * @return numberOfMainBalls
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfMainBalls() {
    return numberOfMainBalls;
  }

  public void setNumberOfMainBalls(Integer numberOfMainBalls) {
    this.numberOfMainBalls = numberOfMainBalls;
  }


  public EventDetailOut numberOfBonusBalls(Integer numberOfBonusBalls) {
    this.numberOfBonusBalls = numberOfBonusBalls;
    return this;
  }

   /**
   * Get numberOfBonusBalls
   * @return numberOfBonusBalls
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfBonusBalls() {
    return numberOfBonusBalls;
  }

  public void setNumberOfBonusBalls(Integer numberOfBonusBalls) {
    this.numberOfBonusBalls = numberOfBonusBalls;
  }


  public EventDetailOut bonusBallType(LotteryBonusBallType bonusBallType) {
    this.bonusBallType = bonusBallType;
    return this;
  }

   /**
   * Get bonusBallType
   * @return bonusBallType
  **/
  @javax.annotation.Nullable
  public LotteryBonusBallType getBonusBallType() {
    return bonusBallType;
  }

  public void setBonusBallType(LotteryBonusBallType bonusBallType) {
    this.bonusBallType = bonusBallType;
  }


  public EventDetailOut dbId(Integer dbId) {
    this.dbId = dbId;
    return this;
  }

   /**
   * Get dbId
   * @return dbId
  **/
  @javax.annotation.Nonnull
  public Integer getDbId() {
    return dbId;
  }

  public void setDbId(Integer dbId) {
    this.dbId = dbId;
  }


  public EventDetailOut pitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
    return this;
  }

   /**
   * Get pitcherInfo
   * @return pitcherInfo
  **/
  @javax.annotation.Nullable
  public IPitcherInfo getPitcherInfo() {
    return pitcherInfo;
  }

  public void setPitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
  }


  public EventDetailOut RC(Boolean RC) {
    this.RC = RC;
    return this;
  }

   /**
   * Get RC
   * @return RC
  **/
  @javax.annotation.Nullable
  public Boolean getRC() {
    return RC;
  }

  public void setRC(Boolean RC) {
    this.RC = RC;
  }


  public EventDetailOut teaserMarkets(Map<String, Map<String, Selection>> teaserMarkets) {
    this.teaserMarkets = teaserMarkets;
    return this;
  }

  public EventDetailOut putTeaserMarketsItem(String key, Map<String, Selection> teaserMarketsItem) {
    if (this.teaserMarkets == null) {
      this.teaserMarkets = new HashMap<>();
    }
    this.teaserMarkets.put(key, teaserMarketsItem);
    return this;
  }

   /**
   * Get teaserMarkets
   * @return teaserMarkets
  **/
  @javax.annotation.Nullable
  public Map<String, Map<String, Selection>> getTeaserMarkets() {
    return teaserMarkets;
  }

  public void setTeaserMarkets(Map<String, Map<String, Selection>> teaserMarkets) {
    this.teaserMarkets = teaserMarkets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDetailOut eventDetailOut = (EventDetailOut) o;
    return Objects.equals(this.id, eventDetailOut.id) &&
        Objects.equals(this.name, eventDetailOut.name) &&
        Objects.equals(this.eventDate, eventDetailOut.eventDate) &&
        Objects.equals(this.status, eventDetailOut.status) &&
        Objects.equals(this.extId, eventDetailOut.extId) &&
        Objects.equals(this.eventType, eventDetailOut.eventType) &&
        Objects.equals(this.nodeType, eventDetailOut.nodeType) &&
        Objects.equals(this.competitors, eventDetailOut.competitors) &&
        Objects.equals(this.isLiveEvent, eventDetailOut.isLiveEvent) &&
        Objects.equals(this.liveCurrentTime, eventDetailOut.liveCurrentTime) &&
        Objects.equals(this.liveScore, eventDetailOut.liveScore) &&
        Objects.equals(this.server, eventDetailOut.server) &&
        Objects.equals(this.pointScore, eventDetailOut.pointScore) &&
        Objects.equals(this.currentSetScore, eventDetailOut.currentSetScore) &&
        Objects.equals(this.marketGroups, eventDetailOut.marketGroups) &&
        Objects.equals(this.isParlay, eventDetailOut.isParlay) &&
        Objects.equals(this.EP, eventDetailOut.EP) &&
        Objects.equals(this.BD, eventDetailOut.BD) &&
        Objects.equals(this.extraEventInfo, eventDetailOut.extraEventInfo) &&
        Objects.equals(this.isVirtual, eventDetailOut.isVirtual) &&
        Objects.equals(this.eventCode, eventDetailOut.eventCode) &&
        Objects.equals(this.categoryName, eventDetailOut.categoryName) &&
        Objects.equals(this.champId, eventDetailOut.champId) &&
        Objects.equals(this.champName, eventDetailOut.champName) &&
        Objects.equals(this.sportId, eventDetailOut.sportId) &&
        Objects.equals(this.sportName, eventDetailOut.sportName) &&
        Objects.equals(this.sportIcon, eventDetailOut.sportIcon) &&
        Objects.equals(this.sportTypeId, eventDetailOut.sportTypeId) &&
        Objects.equals(this.quickPickEnabled, eventDetailOut.quickPickEnabled) &&
        Objects.equals(this.numberOfMainBalls, eventDetailOut.numberOfMainBalls) &&
        Objects.equals(this.numberOfBonusBalls, eventDetailOut.numberOfBonusBalls) &&
        Objects.equals(this.bonusBallType, eventDetailOut.bonusBallType) &&
        Objects.equals(this.dbId, eventDetailOut.dbId) &&
        Objects.equals(this.pitcherInfo, eventDetailOut.pitcherInfo) &&
        Objects.equals(this.RC, eventDetailOut.RC) &&
        Objects.equals(this.teaserMarkets, eventDetailOut.teaserMarkets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, eventDate, status, extId, eventType, nodeType, competitors, isLiveEvent, liveCurrentTime, liveScore, server, pointScore, currentSetScore, marketGroups, isParlay, EP, BD, extraEventInfo, isVirtual, eventCode, categoryName, champId, champName, sportId, sportName, sportIcon, sportTypeId, quickPickEnabled, numberOfMainBalls, numberOfBonusBalls, bonusBallType, dbId, pitcherInfo, RC, teaserMarkets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDetailOut {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    extId: ").append(toIndentedString(extId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    isLiveEvent: ").append(toIndentedString(isLiveEvent)).append("\n");
    sb.append("    liveCurrentTime: ").append(toIndentedString(liveCurrentTime)).append("\n");
    sb.append("    liveScore: ").append(toIndentedString(liveScore)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    pointScore: ").append(toIndentedString(pointScore)).append("\n");
    sb.append("    currentSetScore: ").append(toIndentedString(currentSetScore)).append("\n");
    sb.append("    marketGroups: ").append(toIndentedString(marketGroups)).append("\n");
    sb.append("    isParlay: ").append(toIndentedString(isParlay)).append("\n");
    sb.append("    EP: ").append(toIndentedString(EP)).append("\n");
    sb.append("    BD: ").append(toIndentedString(BD)).append("\n");
    sb.append("    extraEventInfo: ").append(toIndentedString(extraEventInfo)).append("\n");
    sb.append("    isVirtual: ").append(toIndentedString(isVirtual)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    champName: ").append(toIndentedString(champName)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    sportIcon: ").append(toIndentedString(sportIcon)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    quickPickEnabled: ").append(toIndentedString(quickPickEnabled)).append("\n");
    sb.append("    numberOfMainBalls: ").append(toIndentedString(numberOfMainBalls)).append("\n");
    sb.append("    numberOfBonusBalls: ").append(toIndentedString(numberOfBonusBalls)).append("\n");
    sb.append("    bonusBallType: ").append(toIndentedString(bonusBallType)).append("\n");
    sb.append("    dbId: ").append(toIndentedString(dbId)).append("\n");
    sb.append("    pitcherInfo: ").append(toIndentedString(pitcherInfo)).append("\n");
    sb.append("    RC: ").append(toIndentedString(RC)).append("\n");
    sb.append("    teaserMarkets: ").append(toIndentedString(teaserMarkets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("EventDate");
    openapiFields.add("Status");
    openapiFields.add("ExtId");
    openapiFields.add("EventType");
    openapiFields.add("NodeType");
    openapiFields.add("Competitors");
    openapiFields.add("IsLiveEvent");
    openapiFields.add("LiveCurrentTime");
    openapiFields.add("LiveScore");
    openapiFields.add("Server");
    openapiFields.add("PointScore");
    openapiFields.add("CurrentSetScore");
    openapiFields.add("MarketGroups");
    openapiFields.add("IsParlay");
    openapiFields.add("EP");
    openapiFields.add("BD");
    openapiFields.add("ExtraEventInfo");
    openapiFields.add("IsVirtual");
    openapiFields.add("EventCode");
    openapiFields.add("CategoryName");
    openapiFields.add("ChampId");
    openapiFields.add("ChampName");
    openapiFields.add("SportId");
    openapiFields.add("SportName");
    openapiFields.add("SportIcon");
    openapiFields.add("SportTypeId");
    openapiFields.add("QuickPickEnabled");
    openapiFields.add("NumberOfMainBalls");
    openapiFields.add("NumberOfBonusBalls");
    openapiFields.add("BonusBallType");
    openapiFields.add("DbId");
    openapiFields.add("PitcherInfo");
    openapiFields.add("RC");
    openapiFields.add("TeaserMarkets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("EventDate");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("EventType");
    openapiRequiredFields.add("IsLiveEvent");
    openapiRequiredFields.add("IsParlay");
    openapiRequiredFields.add("IsVirtual");
    openapiRequiredFields.add("ChampId");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("SportTypeId");
    openapiRequiredFields.add("DbId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventDetailOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDetailOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDetailOut is not found in the empty JSON string", EventDetailOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDetailOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDetailOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventDetailOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ExtId") != null && !jsonObj.get("ExtId").isJsonNull()) && !jsonObj.get("ExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtId").toString()));
      }
      // validate the required field `EventType`
      ClientEventTypes.validateJsonElement(jsonObj.get("EventType"));
      if ((jsonObj.get("NodeType") != null && !jsonObj.get("NodeType").isJsonNull()) && !jsonObj.get("NodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeType").toString()));
      }
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull()) {
        JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
        if (jsonArraycompetitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Competitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
          }

          // validate the optional field `Competitors` (array)
          for (int i = 0; i < jsonArraycompetitors.size(); i++) {
            CompetitorOut.validateJsonElement(jsonArraycompetitors.get(i));
          };
        }
      }
      if ((jsonObj.get("LiveCurrentTime") != null && !jsonObj.get("LiveCurrentTime").isJsonNull()) && !jsonObj.get("LiveCurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveCurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveCurrentTime").toString()));
      }
      if ((jsonObj.get("LiveScore") != null && !jsonObj.get("LiveScore").isJsonNull()) && !jsonObj.get("LiveScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveScore").toString()));
      }
      if ((jsonObj.get("PointScore") != null && !jsonObj.get("PointScore").isJsonNull()) && !jsonObj.get("PointScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointScore").toString()));
      }
      if ((jsonObj.get("CurrentSetScore") != null && !jsonObj.get("CurrentSetScore").isJsonNull()) && !jsonObj.get("CurrentSetScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentSetScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentSetScore").toString()));
      }
      if (jsonObj.get("MarketGroups") != null && !jsonObj.get("MarketGroups").isJsonNull()) {
        JsonArray jsonArraymarketGroups = jsonObj.getAsJsonArray("MarketGroups");
        if (jsonArraymarketGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MarketGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MarketGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MarketGroups").toString()));
          }

          // validate the optional field `MarketGroups` (array)
          for (int i = 0; i < jsonArraymarketGroups.size(); i++) {
            MarketGroupOut.validateJsonElement(jsonArraymarketGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("ExtraEventInfo") != null && !jsonObj.get("ExtraEventInfo").isJsonNull()) && !jsonObj.get("ExtraEventInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraEventInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraEventInfo").toString()));
      }
      if ((jsonObj.get("CategoryName") != null && !jsonObj.get("CategoryName").isJsonNull()) && !jsonObj.get("CategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryName").toString()));
      }
      if ((jsonObj.get("ChampName") != null && !jsonObj.get("ChampName").isJsonNull()) && !jsonObj.get("ChampName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampName").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if ((jsonObj.get("SportIcon") != null && !jsonObj.get("SportIcon").isJsonNull()) && !jsonObj.get("SportIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportIcon").toString()));
      }
      // validate the optional field `BonusBallType`
      if (jsonObj.get("BonusBallType") != null && !jsonObj.get("BonusBallType").isJsonNull()) {
        LotteryBonusBallType.validateJsonElement(jsonObj.get("BonusBallType"));
      }
      // validate the optional field `PitcherInfo`
      if (jsonObj.get("PitcherInfo") != null && !jsonObj.get("PitcherInfo").isJsonNull()) {
        IPitcherInfo.validateJsonElement(jsonObj.get("PitcherInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDetailOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDetailOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDetailOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDetailOut.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDetailOut>() {
           @Override
           public void write(JsonWriter out, EventDetailOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDetailOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventDetailOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventDetailOut
  * @throws IOException if the JSON string is invalid with respect to EventDetailOut
  */
  public static EventDetailOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDetailOut.class);
  }

 /**
  * Convert an instance of EventDetailOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

