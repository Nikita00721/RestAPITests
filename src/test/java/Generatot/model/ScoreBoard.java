/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * ScoreBoard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class ScoreBoard {
  public static final String SERIALIZED_NAME_FEED_EVENT_ID = "FeedEventId";
  @SerializedName(SERIALIZED_NAME_FEED_EVENT_ID)
  private Long feedEventId;

  public static final String SERIALIZED_NAME_LIVE_INFO = "LiveInfo";
  @SerializedName(SERIALIZED_NAME_LIVE_INFO)
  private LiveEventInfo liveInfo;

  public static final String SERIALIZED_NAME_PERIODS = "Periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<PeriodScore> periods;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public ScoreBoard() {
  }

  public ScoreBoard feedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
    return this;
  }

   /**
   * Get feedEventId
   * @return feedEventId
  **/
  @javax.annotation.Nonnull
  public Long getFeedEventId() {
    return feedEventId;
  }

  public void setFeedEventId(Long feedEventId) {
    this.feedEventId = feedEventId;
  }


  public ScoreBoard liveInfo(LiveEventInfo liveInfo) {
    this.liveInfo = liveInfo;
    return this;
  }

   /**
   * Get liveInfo
   * @return liveInfo
  **/
  @javax.annotation.Nullable
  public LiveEventInfo getLiveInfo() {
    return liveInfo;
  }

  public void setLiveInfo(LiveEventInfo liveInfo) {
    this.liveInfo = liveInfo;
  }


  public ScoreBoard periods(List<PeriodScore> periods) {
    this.periods = periods;
    return this;
  }

  public ScoreBoard addPeriodsItem(PeriodScore periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

   /**
   * Get periods
   * @return periods
  **/
  @javax.annotation.Nullable
  public List<PeriodScore> getPeriods() {
    return periods;
  }

  public void setPeriods(List<PeriodScore> periods) {
    this.periods = periods;
  }


  public ScoreBoard updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreBoard scoreBoard = (ScoreBoard) o;
    return Objects.equals(this.feedEventId, scoreBoard.feedEventId) &&
        Objects.equals(this.liveInfo, scoreBoard.liveInfo) &&
        Objects.equals(this.periods, scoreBoard.periods) &&
        Objects.equals(this.updated, scoreBoard.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedEventId, liveInfo, periods, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreBoard {\n");
    sb.append("    feedEventId: ").append(toIndentedString(feedEventId)).append("\n");
    sb.append("    liveInfo: ").append(toIndentedString(liveInfo)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeedEventId");
    openapiFields.add("LiveInfo");
    openapiFields.add("Periods");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FeedEventId");
    openapiRequiredFields.add("Updated");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ScoreBoard
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreBoard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreBoard is not found in the empty JSON string", ScoreBoard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreBoard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreBoard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScoreBoard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LiveInfo`
      if (jsonObj.get("LiveInfo") != null && !jsonObj.get("LiveInfo").isJsonNull()) {
        LiveEventInfo.validateJsonElement(jsonObj.get("LiveInfo"));
      }
      if (jsonObj.get("Periods") != null && !jsonObj.get("Periods").isJsonNull()) {
        JsonArray jsonArrayperiods = jsonObj.getAsJsonArray("Periods");
        if (jsonArrayperiods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Periods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Periods` to be an array in the JSON string but got `%s`", jsonObj.get("Periods").toString()));
          }

          // validate the optional field `Periods` (array)
          for (int i = 0; i < jsonArrayperiods.size(); i++) {
            PeriodScore.validateJsonElement(jsonArrayperiods.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreBoard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreBoard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreBoard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreBoard.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreBoard>() {
           @Override
           public void write(JsonWriter out, ScoreBoard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreBoard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScoreBoard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScoreBoard
  * @throws IOException if the JSON string is invalid with respect to ScoreBoard
  */
  public static ScoreBoard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreBoard.class);
  }

 /**
  * Convert an instance of ScoreBoard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

