/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * IPitcherInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class IPitcherInfo {
  public static final String SERIALIZED_NAME_HOME = "Home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private IPitcher home;

  public static final String SERIALIZED_NAME_AWAY = "Away";
  @SerializedName(SERIALIZED_NAME_AWAY)
  private IPitcher away;

  public IPitcherInfo() {
  }

  public IPitcherInfo home(IPitcher home) {
    this.home = home;
    return this;
  }

   /**
   * Get home
   * @return home
  **/
  @javax.annotation.Nonnull
  public IPitcher getHome() {
    return home;
  }

  public void setHome(IPitcher home) {
    this.home = home;
  }


  public IPitcherInfo away(IPitcher away) {
    this.away = away;
    return this;
  }

   /**
   * Get away
   * @return away
  **/
  @javax.annotation.Nonnull
  public IPitcher getAway() {
    return away;
  }

  public void setAway(IPitcher away) {
    this.away = away;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPitcherInfo ipitcherInfo = (IPitcherInfo) o;
    return Objects.equals(this.home, ipitcherInfo.home) &&
        Objects.equals(this.away, ipitcherInfo.away);
  }

  @Override
  public int hashCode() {
    return Objects.hash(home, away);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPitcherInfo {\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    away: ").append(toIndentedString(away)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Home");
    openapiFields.add("Away");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Home");
    openapiRequiredFields.add("Away");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IPitcherInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPitcherInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPitcherInfo is not found in the empty JSON string", IPitcherInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPitcherInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPitcherInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IPitcherInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Home`
      IPitcher.validateJsonElement(jsonObj.get("Home"));
      // validate the required field `Away`
      IPitcher.validateJsonElement(jsonObj.get("Away"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPitcherInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPitcherInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPitcherInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPitcherInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IPitcherInfo>() {
           @Override
           public void write(JsonWriter out, IPitcherInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPitcherInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IPitcherInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IPitcherInfo
  * @throws IOException if the JSON string is invalid with respect to IPitcherInfo
  */
  public static IPitcherInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPitcherInfo.class);
  }

 /**
  * Convert an instance of IPitcherInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

