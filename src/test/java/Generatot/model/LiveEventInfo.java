/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * LiveEventInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class LiveEventInfo {
  public static final String SERIALIZED_NAME_STATUS_ID = "StatusId";
  @SerializedName(SERIALIZED_NAME_STATUS_ID)
  private Integer statusId;

  public static final String SERIALIZED_NAME_CURRENT_TIME = "CurrentTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIME)
  private String currentTime;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private String score;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private Integer server;

  public static final String SERIALIZED_NAME_CURRENT_SCORE = "CurrentScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCORE)
  private PeriodScore currentScore;

  public LiveEventInfo() {
  }

  public LiveEventInfo statusId(Integer statusId) {
    this.statusId = statusId;
    return this;
  }

   /**
   * Get statusId
   * @return statusId
  **/
  @javax.annotation.Nullable
  public Integer getStatusId() {
    return statusId;
  }

  public void setStatusId(Integer statusId) {
    this.statusId = statusId;
  }


  public LiveEventInfo currentTime(String currentTime) {
    this.currentTime = currentTime;
    return this;
  }

   /**
   * Get currentTime
   * @return currentTime
  **/
  @javax.annotation.Nullable
  public String getCurrentTime() {
    return currentTime;
  }

  public void setCurrentTime(String currentTime) {
    this.currentTime = currentTime;
  }


  public LiveEventInfo score(String score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  public String getScore() {
    return score;
  }

  public void setScore(String score) {
    this.score = score;
  }


  public LiveEventInfo server(Integer server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  public Integer getServer() {
    return server;
  }

  public void setServer(Integer server) {
    this.server = server;
  }


  public LiveEventInfo currentScore(PeriodScore currentScore) {
    this.currentScore = currentScore;
    return this;
  }

   /**
   * Get currentScore
   * @return currentScore
  **/
  @javax.annotation.Nullable
  public PeriodScore getCurrentScore() {
    return currentScore;
  }

  public void setCurrentScore(PeriodScore currentScore) {
    this.currentScore = currentScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveEventInfo liveEventInfo = (LiveEventInfo) o;
    return Objects.equals(this.statusId, liveEventInfo.statusId) &&
        Objects.equals(this.currentTime, liveEventInfo.currentTime) &&
        Objects.equals(this.score, liveEventInfo.score) &&
        Objects.equals(this.server, liveEventInfo.server) &&
        Objects.equals(this.currentScore, liveEventInfo.currentScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusId, currentTime, score, server, currentScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveEventInfo {\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    currentTime: ").append(toIndentedString(currentTime)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    currentScore: ").append(toIndentedString(currentScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StatusId");
    openapiFields.add("CurrentTime");
    openapiFields.add("Score");
    openapiFields.add("Server");
    openapiFields.add("CurrentScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LiveEventInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveEventInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveEventInfo is not found in the empty JSON string", LiveEventInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveEventInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveEventInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CurrentTime") != null && !jsonObj.get("CurrentTime").isJsonNull()) && !jsonObj.get("CurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentTime").toString()));
      }
      if ((jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) && !jsonObj.get("Score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      // validate the optional field `CurrentScore`
      if (jsonObj.get("CurrentScore") != null && !jsonObj.get("CurrentScore").isJsonNull()) {
        PeriodScore.validateJsonElement(jsonObj.get("CurrentScore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveEventInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveEventInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveEventInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveEventInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveEventInfo>() {
           @Override
           public void write(JsonWriter out, LiveEventInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveEventInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveEventInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveEventInfo
  * @throws IOException if the JSON string is invalid with respect to LiveEventInfo
  */
  public static LiveEventInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveEventInfo.class);
  }

 /**
  * Convert an instance of LiveEventInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

