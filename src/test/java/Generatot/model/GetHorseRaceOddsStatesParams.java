/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * GetHorseRaceOddsStatesParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class GetHorseRaceOddsStatesParams {
  public static final String SERIALIZED_NAME_INTEGRATION = "Integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private String integration;

  public static final String SERIALIZED_NAME_CULTURE = "Culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  public static final String SERIALIZED_NAME_TIMEZONE_OFFSET = "TimezoneOffset";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_OFFSET)
  private Integer timezoneOffset;

  public static final String SERIALIZED_NAME_NUM_FORMAT = "NumFormat";
  @SerializedName(SERIALIZED_NAME_NUM_FORMAT)
  private String numFormat;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "DeviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceType deviceType;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_ODDS = "Odds";
  @SerializedName(SERIALIZED_NAME_ODDS)
  private List<HorseRaceOddStateParam> odds = new ArrayList<>();

  public GetHorseRaceOddsStatesParams() {
  }

  public GetHorseRaceOddsStatesParams integration(String integration) {
    this.integration = integration;
    return this;
  }

   /**
   * Get integration
   * @return integration
  **/
  @javax.annotation.Nonnull
  public String getIntegration() {
    return integration;
  }

  public void setIntegration(String integration) {
    this.integration = integration;
  }


  public GetHorseRaceOddsStatesParams culture(String culture) {
    this.culture = culture;
    return this;
  }

   /**
   * Get culture
   * @return culture
  **/
  @javax.annotation.Nonnull
  public String getCulture() {
    return culture;
  }

  public void setCulture(String culture) {
    this.culture = culture;
  }


  public GetHorseRaceOddsStatesParams timezoneOffset(Integer timezoneOffset) {
    this.timezoneOffset = timezoneOffset;
    return this;
  }

   /**
   * Get timezoneOffset
   * @return timezoneOffset
  **/
  @javax.annotation.Nullable
  public Integer getTimezoneOffset() {
    return timezoneOffset;
  }

  public void setTimezoneOffset(Integer timezoneOffset) {
    this.timezoneOffset = timezoneOffset;
  }


  public GetHorseRaceOddsStatesParams numFormat(String numFormat) {
    this.numFormat = numFormat;
    return this;
  }

   /**
   * Get numFormat
   * @return numFormat
  **/
  @javax.annotation.Nullable
  public String getNumFormat() {
    return numFormat;
  }

  public void setNumFormat(String numFormat) {
    this.numFormat = numFormat;
  }


  public GetHorseRaceOddsStatesParams deviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/
  @javax.annotation.Nullable
  public DeviceType getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public GetHorseRaceOddsStatesParams countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GetHorseRaceOddsStatesParams odds(List<HorseRaceOddStateParam> odds) {
    this.odds = odds;
    return this;
  }

  public GetHorseRaceOddsStatesParams addOddsItem(HorseRaceOddStateParam oddsItem) {
    if (this.odds == null) {
      this.odds = new ArrayList<>();
    }
    this.odds.add(oddsItem);
    return this;
  }

   /**
   * Get odds
   * @return odds
  **/
  @javax.annotation.Nonnull
  public List<HorseRaceOddStateParam> getOdds() {
    return odds;
  }

  public void setOdds(List<HorseRaceOddStateParam> odds) {
    this.odds = odds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetHorseRaceOddsStatesParams getHorseRaceOddsStatesParams = (GetHorseRaceOddsStatesParams) o;
    return Objects.equals(this.integration, getHorseRaceOddsStatesParams.integration) &&
        Objects.equals(this.culture, getHorseRaceOddsStatesParams.culture) &&
        Objects.equals(this.timezoneOffset, getHorseRaceOddsStatesParams.timezoneOffset) &&
        Objects.equals(this.numFormat, getHorseRaceOddsStatesParams.numFormat) &&
        Objects.equals(this.deviceType, getHorseRaceOddsStatesParams.deviceType) &&
        Objects.equals(this.countryCode, getHorseRaceOddsStatesParams.countryCode) &&
        Objects.equals(this.odds, getHorseRaceOddsStatesParams.odds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integration, culture, timezoneOffset, numFormat, deviceType, countryCode, odds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetHorseRaceOddsStatesParams {\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    timezoneOffset: ").append(toIndentedString(timezoneOffset)).append("\n");
    sb.append("    numFormat: ").append(toIndentedString(numFormat)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    odds: ").append(toIndentedString(odds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Integration");
    openapiFields.add("Culture");
    openapiFields.add("TimezoneOffset");
    openapiFields.add("NumFormat");
    openapiFields.add("DeviceType");
    openapiFields.add("CountryCode");
    openapiFields.add("Odds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Integration");
    openapiRequiredFields.add("Culture");
    openapiRequiredFields.add("Odds");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetHorseRaceOddsStatesParams
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetHorseRaceOddsStatesParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetHorseRaceOddsStatesParams is not found in the empty JSON string", GetHorseRaceOddsStatesParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetHorseRaceOddsStatesParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetHorseRaceOddsStatesParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetHorseRaceOddsStatesParams.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Integration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Integration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Integration").toString()));
      }
      if (!jsonObj.get("Culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Culture").toString()));
      }
      if ((jsonObj.get("NumFormat") != null && !jsonObj.get("NumFormat").isJsonNull()) && !jsonObj.get("NumFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumFormat").toString()));
      }
      // validate the optional field `DeviceType`
      if (jsonObj.get("DeviceType") != null && !jsonObj.get("DeviceType").isJsonNull()) {
        DeviceType.validateJsonElement(jsonObj.get("DeviceType"));
      }
      if ((jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Odds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Odds` to be an array in the JSON string but got `%s`", jsonObj.get("Odds").toString()));
      }

      JsonArray jsonArrayodds = jsonObj.getAsJsonArray("Odds");
      // validate the required field `Odds` (array)
      for (int i = 0; i < jsonArrayodds.size(); i++) {
        HorseRaceOddStateParam.validateJsonElement(jsonArrayodds.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetHorseRaceOddsStatesParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetHorseRaceOddsStatesParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetHorseRaceOddsStatesParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetHorseRaceOddsStatesParams.class));

       return (TypeAdapter<T>) new TypeAdapter<GetHorseRaceOddsStatesParams>() {
           @Override
           public void write(JsonWriter out, GetHorseRaceOddsStatesParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetHorseRaceOddsStatesParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetHorseRaceOddsStatesParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetHorseRaceOddsStatesParams
  * @throws IOException if the JSON string is invalid with respect to GetHorseRaceOddsStatesParams
  */
  public static GetHorseRaceOddsStatesParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetHorseRaceOddsStatesParams.class);
  }

 /**
  * Convert an instance of GetHorseRaceOddsStatesParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

