/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * RaceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class RaceInfo {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ISO = "Iso";
  @SerializedName(SERIALIZED_NAME_ISO)
  private String iso;

  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private String distance;

  public static final String SERIALIZED_NAME_PRIZES = "Prizes";
  @SerializedName(SERIALIZED_NAME_PRIZES)
  private String prizes;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EventStatus status;

  public static final String SERIALIZED_NAME_HAS_STREAM = "HasStream";
  @SerializedName(SERIALIZED_NAME_HAS_STREAM)
  private Boolean hasStream;

  public static final String SERIALIZED_NAME_GOING = "Going";
  @SerializedName(SERIALIZED_NAME_GOING)
  private String going;

  public static final String SERIALIZED_NAME_TRACK_RATING = "TrackRating";
  @SerializedName(SERIALIZED_NAME_TRACK_RATING)
  private String trackRating;

  public static final String SERIALIZED_NAME_OFF_DATE = "OffDate";
  @SerializedName(SERIALIZED_NAME_OFF_DATE)
  private OffsetDateTime offDate;

  public static final String SERIALIZED_NAME_EW_PLACES = "EwPlaces";
  @SerializedName(SERIALIZED_NAME_EW_PLACES)
  private Integer ewPlaces;

  public static final String SERIALIZED_NAME_EW_DENOMINATOR = "EwDenominator";
  @SerializedName(SERIALIZED_NAME_EW_DENOMINATOR)
  private Integer ewDenominator;

  public static final String SERIALIZED_NAME_RESULTS = "Results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<RaceResult> results;

  public RaceInfo() {
  }

  public RaceInfo(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public RaceInfo iso(String iso) {
    this.iso = iso;
    return this;
  }

   /**
   * Get iso
   * @return iso
  **/
  @javax.annotation.Nullable
  public String getIso() {
    return iso;
  }

  public void setIso(String iso) {
    this.iso = iso;
  }


  public RaceInfo distance(String distance) {
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  public String getDistance() {
    return distance;
  }

  public void setDistance(String distance) {
    this.distance = distance;
  }


  public RaceInfo prizes(String prizes) {
    this.prizes = prizes;
    return this;
  }

   /**
   * Get prizes
   * @return prizes
  **/
  @javax.annotation.Nullable
  public String getPrizes() {
    return prizes;
  }

  public void setPrizes(String prizes) {
    this.prizes = prizes;
  }


  public RaceInfo startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public RaceInfo status(EventStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public EventStatus getStatus() {
    return status;
  }

  public void setStatus(EventStatus status) {
    this.status = status;
  }


  public RaceInfo hasStream(Boolean hasStream) {
    this.hasStream = hasStream;
    return this;
  }

   /**
   * Get hasStream
   * @return hasStream
  **/
  @javax.annotation.Nonnull
  public Boolean getHasStream() {
    return hasStream;
  }

  public void setHasStream(Boolean hasStream) {
    this.hasStream = hasStream;
  }


  public RaceInfo going(String going) {
    this.going = going;
    return this;
  }

   /**
   * Get going
   * @return going
  **/
  @javax.annotation.Nullable
  public String getGoing() {
    return going;
  }

  public void setGoing(String going) {
    this.going = going;
  }


  public RaceInfo trackRating(String trackRating) {
    this.trackRating = trackRating;
    return this;
  }

   /**
   * Get trackRating
   * @return trackRating
  **/
  @javax.annotation.Nullable
  public String getTrackRating() {
    return trackRating;
  }

  public void setTrackRating(String trackRating) {
    this.trackRating = trackRating;
  }


  public RaceInfo offDate(OffsetDateTime offDate) {
    this.offDate = offDate;
    return this;
  }

   /**
   * Get offDate
   * @return offDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getOffDate() {
    return offDate;
  }

  public void setOffDate(OffsetDateTime offDate) {
    this.offDate = offDate;
  }


  public RaceInfo ewPlaces(Integer ewPlaces) {
    this.ewPlaces = ewPlaces;
    return this;
  }

   /**
   * Get ewPlaces
   * @return ewPlaces
  **/
  @javax.annotation.Nonnull
  public Integer getEwPlaces() {
    return ewPlaces;
  }

  public void setEwPlaces(Integer ewPlaces) {
    this.ewPlaces = ewPlaces;
  }


  public RaceInfo ewDenominator(Integer ewDenominator) {
    this.ewDenominator = ewDenominator;
    return this;
  }

   /**
   * Get ewDenominator
   * @return ewDenominator
  **/
  @javax.annotation.Nonnull
  public Integer getEwDenominator() {
    return ewDenominator;
  }

  public void setEwDenominator(Integer ewDenominator) {
    this.ewDenominator = ewDenominator;
  }


  public RaceInfo results(List<RaceResult> results) {
    this.results = results;
    return this;
  }

  public RaceInfo addResultsItem(RaceResult resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * Get results
   * @return results
  **/
  @javax.annotation.Nullable
  public List<RaceResult> getResults() {
    return results;
  }

  public void setResults(List<RaceResult> results) {
    this.results = results;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RaceInfo raceInfo = (RaceInfo) o;
    return Objects.equals(this.id, raceInfo.id) &&
        Objects.equals(this.name, raceInfo.name) &&
        Objects.equals(this.iso, raceInfo.iso) &&
        Objects.equals(this.distance, raceInfo.distance) &&
        Objects.equals(this.prizes, raceInfo.prizes) &&
        Objects.equals(this.startDate, raceInfo.startDate) &&
        Objects.equals(this.status, raceInfo.status) &&
        Objects.equals(this.hasStream, raceInfo.hasStream) &&
        Objects.equals(this.going, raceInfo.going) &&
        Objects.equals(this.trackRating, raceInfo.trackRating) &&
        Objects.equals(this.offDate, raceInfo.offDate) &&
        Objects.equals(this.ewPlaces, raceInfo.ewPlaces) &&
        Objects.equals(this.ewDenominator, raceInfo.ewDenominator) &&
        Objects.equals(this.results, raceInfo.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, iso, distance, prizes, startDate, status, hasStream, going, trackRating, offDate, ewPlaces, ewDenominator, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RaceInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    iso: ").append(toIndentedString(iso)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    prizes: ").append(toIndentedString(prizes)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hasStream: ").append(toIndentedString(hasStream)).append("\n");
    sb.append("    going: ").append(toIndentedString(going)).append("\n");
    sb.append("    trackRating: ").append(toIndentedString(trackRating)).append("\n");
    sb.append("    offDate: ").append(toIndentedString(offDate)).append("\n");
    sb.append("    ewPlaces: ").append(toIndentedString(ewPlaces)).append("\n");
    sb.append("    ewDenominator: ").append(toIndentedString(ewDenominator)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Iso");
    openapiFields.add("Distance");
    openapiFields.add("Prizes");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("HasStream");
    openapiFields.add("Going");
    openapiFields.add("TrackRating");
    openapiFields.add("OffDate");
    openapiFields.add("EwPlaces");
    openapiFields.add("EwDenominator");
    openapiFields.add("Results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("HasStream");
    openapiRequiredFields.add("EwPlaces");
    openapiRequiredFields.add("EwDenominator");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RaceInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RaceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RaceInfo is not found in the empty JSON string", RaceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RaceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RaceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RaceInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Iso") != null && !jsonObj.get("Iso").isJsonNull()) && !jsonObj.get("Iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Iso").toString()));
      }
      if ((jsonObj.get("Distance") != null && !jsonObj.get("Distance").isJsonNull()) && !jsonObj.get("Distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Distance").toString()));
      }
      if ((jsonObj.get("Prizes") != null && !jsonObj.get("Prizes").isJsonNull()) && !jsonObj.get("Prizes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Prizes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Prizes").toString()));
      }
      // validate the required field `Status`
      EventStatus.validateJsonElement(jsonObj.get("Status"));
      if ((jsonObj.get("Going") != null && !jsonObj.get("Going").isJsonNull()) && !jsonObj.get("Going").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Going` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Going").toString()));
      }
      if ((jsonObj.get("TrackRating") != null && !jsonObj.get("TrackRating").isJsonNull()) && !jsonObj.get("TrackRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackRating").toString()));
      }
      if (jsonObj.get("Results") != null && !jsonObj.get("Results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("Results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Results` to be an array in the JSON string but got `%s`", jsonObj.get("Results").toString()));
          }

          // validate the optional field `Results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            RaceResult.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RaceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RaceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RaceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RaceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RaceInfo>() {
           @Override
           public void write(JsonWriter out, RaceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RaceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RaceInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RaceInfo
  * @throws IOException if the JSON string is invalid with respect to RaceInfo
  */
  public static RaceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RaceInfo.class);
  }

 /**
  * Convert an instance of RaceInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

