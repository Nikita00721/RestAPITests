/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * GetEventByCodeResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class GetEventByCodeResults {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LIVE_TIME = "LiveTime";
  @SerializedName(SERIALIZED_NAME_LIVE_TIME)
  private String liveTime;

  public static final String SERIALIZED_NAME_SPORT = "Sport";
  @SerializedName(SERIALIZED_NAME_SPORT)
  private SportNode sport;

  public static final String SERIALIZED_NAME_CHAMP = "Champ";
  @SerializedName(SERIALIZED_NAME_CHAMP)
  private ChampionshipNode champ;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<Competitor> competitors = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETS = "Markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<Market> markets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ODDS = "Odds";
  @SerializedName(SERIALIZED_NAME_ODDS)
  private List<Odd> odds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RC = "rc";
  @SerializedName(SERIALIZED_NAME_RC)
  private Boolean rc;

  public static final String SERIALIZED_NAME_PITCHERS = "Pitchers";
  @SerializedName(SERIALIZED_NAME_PITCHERS)
  private List<Pitcher> pitchers;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public GetEventByCodeResults() {
  }

  public GetEventByCodeResults id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public GetEventByCodeResults name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetEventByCodeResults liveTime(String liveTime) {
    this.liveTime = liveTime;
    return this;
  }

   /**
   * Get liveTime
   * @return liveTime
  **/
  @javax.annotation.Nonnull
  public String getLiveTime() {
    return liveTime;
  }

  public void setLiveTime(String liveTime) {
    this.liveTime = liveTime;
  }


  public GetEventByCodeResults sport(SportNode sport) {
    this.sport = sport;
    return this;
  }

   /**
   * Get sport
   * @return sport
  **/
  @javax.annotation.Nonnull
  public SportNode getSport() {
    return sport;
  }

  public void setSport(SportNode sport) {
    this.sport = sport;
  }


  public GetEventByCodeResults champ(ChampionshipNode champ) {
    this.champ = champ;
    return this;
  }

   /**
   * Get champ
   * @return champ
  **/
  @javax.annotation.Nonnull
  public ChampionshipNode getChamp() {
    return champ;
  }

  public void setChamp(ChampionshipNode champ) {
    this.champ = champ;
  }


  public GetEventByCodeResults competitors(List<Competitor> competitors) {
    this.competitors = competitors;
    return this;
  }

  public GetEventByCodeResults addCompetitorsItem(Competitor competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nonnull
  public List<Competitor> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<Competitor> competitors) {
    this.competitors = competitors;
  }


  public GetEventByCodeResults markets(List<Market> markets) {
    this.markets = markets;
    return this;
  }

  public GetEventByCodeResults addMarketsItem(Market marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nonnull
  public List<Market> getMarkets() {
    return markets;
  }

  public void setMarkets(List<Market> markets) {
    this.markets = markets;
  }


  public GetEventByCodeResults odds(List<Odd> odds) {
    this.odds = odds;
    return this;
  }

  public GetEventByCodeResults addOddsItem(Odd oddsItem) {
    if (this.odds == null) {
      this.odds = new ArrayList<>();
    }
    this.odds.add(oddsItem);
    return this;
  }

   /**
   * Get odds
   * @return odds
  **/
  @javax.annotation.Nonnull
  public List<Odd> getOdds() {
    return odds;
  }

  public void setOdds(List<Odd> odds) {
    this.odds = odds;
  }


  public GetEventByCodeResults rc(Boolean rc) {
    this.rc = rc;
    return this;
  }

   /**
   * Get rc
   * @return rc
  **/
  @javax.annotation.Nullable
  public Boolean getRc() {
    return rc;
  }

  public void setRc(Boolean rc) {
    this.rc = rc;
  }


  public GetEventByCodeResults pitchers(List<Pitcher> pitchers) {
    this.pitchers = pitchers;
    return this;
  }

  public GetEventByCodeResults addPitchersItem(Pitcher pitchersItem) {
    if (this.pitchers == null) {
      this.pitchers = new ArrayList<>();
    }
    this.pitchers.add(pitchersItem);
    return this;
  }

   /**
   * Get pitchers
   * @return pitchers
  **/
  @javax.annotation.Nullable
  public List<Pitcher> getPitchers() {
    return pitchers;
  }

  public void setPitchers(List<Pitcher> pitchers) {
    this.pitchers = pitchers;
  }


  public GetEventByCodeResults startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEventByCodeResults getEventByCodeResults = (GetEventByCodeResults) o;
    return Objects.equals(this.id, getEventByCodeResults.id) &&
        Objects.equals(this.name, getEventByCodeResults.name) &&
        Objects.equals(this.liveTime, getEventByCodeResults.liveTime) &&
        Objects.equals(this.sport, getEventByCodeResults.sport) &&
        Objects.equals(this.champ, getEventByCodeResults.champ) &&
        Objects.equals(this.competitors, getEventByCodeResults.competitors) &&
        Objects.equals(this.markets, getEventByCodeResults.markets) &&
        Objects.equals(this.odds, getEventByCodeResults.odds) &&
        Objects.equals(this.rc, getEventByCodeResults.rc) &&
        Objects.equals(this.pitchers, getEventByCodeResults.pitchers) &&
        Objects.equals(this.startDate, getEventByCodeResults.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, liveTime, sport, champ, competitors, markets, odds, rc, pitchers, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEventByCodeResults {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    liveTime: ").append(toIndentedString(liveTime)).append("\n");
    sb.append("    sport: ").append(toIndentedString(sport)).append("\n");
    sb.append("    champ: ").append(toIndentedString(champ)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    odds: ").append(toIndentedString(odds)).append("\n");
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("    pitchers: ").append(toIndentedString(pitchers)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("LiveTime");
    openapiFields.add("Sport");
    openapiFields.add("Champ");
    openapiFields.add("Competitors");
    openapiFields.add("Markets");
    openapiFields.add("Odds");
    openapiFields.add("rc");
    openapiFields.add("Pitchers");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("LiveTime");
    openapiRequiredFields.add("Sport");
    openapiRequiredFields.add("Champ");
    openapiRequiredFields.add("Competitors");
    openapiRequiredFields.add("Markets");
    openapiRequiredFields.add("Odds");
    openapiRequiredFields.add("StartDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetEventByCodeResults
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEventByCodeResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEventByCodeResults is not found in the empty JSON string", GetEventByCodeResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEventByCodeResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEventByCodeResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetEventByCodeResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("LiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveTime").toString()));
      }
      // validate the required field `Sport`
      SportNode.validateJsonElement(jsonObj.get("Sport"));
      // validate the required field `Champ`
      ChampionshipNode.validateJsonElement(jsonObj.get("Champ"));
      // ensure the json data is an array
      if (!jsonObj.get("Competitors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
      }

      JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
      // validate the required field `Competitors` (array)
      for (int i = 0; i < jsonArraycompetitors.size(); i++) {
        Competitor.validateJsonElement(jsonArraycompetitors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Markets` to be an array in the JSON string but got `%s`", jsonObj.get("Markets").toString()));
      }

      JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("Markets");
      // validate the required field `Markets` (array)
      for (int i = 0; i < jsonArraymarkets.size(); i++) {
        Market.validateJsonElement(jsonArraymarkets.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Odds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Odds` to be an array in the JSON string but got `%s`", jsonObj.get("Odds").toString()));
      }

      JsonArray jsonArrayodds = jsonObj.getAsJsonArray("Odds");
      // validate the required field `Odds` (array)
      for (int i = 0; i < jsonArrayodds.size(); i++) {
        Odd.validateJsonElement(jsonArrayodds.get(i));
      };
      if (jsonObj.get("Pitchers") != null && !jsonObj.get("Pitchers").isJsonNull()) {
        JsonArray jsonArraypitchers = jsonObj.getAsJsonArray("Pitchers");
        if (jsonArraypitchers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Pitchers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Pitchers` to be an array in the JSON string but got `%s`", jsonObj.get("Pitchers").toString()));
          }

          // validate the optional field `Pitchers` (array)
          for (int i = 0; i < jsonArraypitchers.size(); i++) {
            Pitcher.validateJsonElement(jsonArraypitchers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEventByCodeResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEventByCodeResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEventByCodeResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEventByCodeResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEventByCodeResults>() {
           @Override
           public void write(JsonWriter out, GetEventByCodeResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEventByCodeResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetEventByCodeResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetEventByCodeResults
  * @throws IOException if the JSON string is invalid with respect to GetEventByCodeResults
  */
  public static GetEventByCodeResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEventByCodeResults.class);
  }

 /**
  * Convert an instance of GetEventByCodeResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

