/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * OddState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class OddState {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_BOOST_PRICE = "BoostPrice";
  @SerializedName(SERIALIZED_NAME_BOOST_PRICE)
  private Double boostPrice;

  public static final String SERIALIZED_NAME_ODD_STATUS = "OddStatus";
  @SerializedName(SERIALIZED_NAME_ODD_STATUS)
  private OddStatus oddStatus;

  public static final String SERIALIZED_NAME_IS_LIVE = "IsLive";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_REPLACED_SELECTION_ID = "ReplacedSelectionId";
  @SerializedName(SERIALIZED_NAME_REPLACED_SELECTION_ID)
  private Long replacedSelectionId;

  public static final String SERIALIZED_NAME_SPOV = "Spov";
  @SerializedName(SERIALIZED_NAME_SPOV)
  private String spov;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public OddState() {
  }

  public OddState id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OddState price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nonnull
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public OddState boostPrice(Double boostPrice) {
    this.boostPrice = boostPrice;
    return this;
  }

   /**
   * Get boostPrice
   * @return boostPrice
  **/
  @javax.annotation.Nullable
  public Double getBoostPrice() {
    return boostPrice;
  }

  public void setBoostPrice(Double boostPrice) {
    this.boostPrice = boostPrice;
  }


  public OddState oddStatus(OddStatus oddStatus) {
    this.oddStatus = oddStatus;
    return this;
  }

   /**
   * Get oddStatus
   * @return oddStatus
  **/
  @javax.annotation.Nonnull
  public OddStatus getOddStatus() {
    return oddStatus;
  }

  public void setOddStatus(OddStatus oddStatus) {
    this.oddStatus = oddStatus;
  }


  public OddState isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

   /**
   * Get isLive
   * @return isLive
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public OddState replacedSelectionId(Long replacedSelectionId) {
    this.replacedSelectionId = replacedSelectionId;
    return this;
  }

   /**
   * Get replacedSelectionId
   * @return replacedSelectionId
  **/
  @javax.annotation.Nullable
  public Long getReplacedSelectionId() {
    return replacedSelectionId;
  }

  public void setReplacedSelectionId(Long replacedSelectionId) {
    this.replacedSelectionId = replacedSelectionId;
  }


  public OddState spov(String spov) {
    this.spov = spov;
    return this;
  }

   /**
   * Get spov
   * @return spov
  **/
  @javax.annotation.Nullable
  public String getSpov() {
    return spov;
  }

  public void setSpov(String spov) {
    this.spov = spov;
  }


  public OddState name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OddState oddState = (OddState) o;
    return Objects.equals(this.id, oddState.id) &&
        Objects.equals(this.price, oddState.price) &&
        Objects.equals(this.boostPrice, oddState.boostPrice) &&
        Objects.equals(this.oddStatus, oddState.oddStatus) &&
        Objects.equals(this.isLive, oddState.isLive) &&
        Objects.equals(this.replacedSelectionId, oddState.replacedSelectionId) &&
        Objects.equals(this.spov, oddState.spov) &&
        Objects.equals(this.name, oddState.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, price, boostPrice, oddStatus, isLive, replacedSelectionId, spov, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OddState {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    boostPrice: ").append(toIndentedString(boostPrice)).append("\n");
    sb.append("    oddStatus: ").append(toIndentedString(oddStatus)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    replacedSelectionId: ").append(toIndentedString(replacedSelectionId)).append("\n");
    sb.append("    spov: ").append(toIndentedString(spov)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Price");
    openapiFields.add("BoostPrice");
    openapiFields.add("OddStatus");
    openapiFields.add("IsLive");
    openapiFields.add("ReplacedSelectionId");
    openapiFields.add("Spov");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Price");
    openapiRequiredFields.add("OddStatus");
    openapiRequiredFields.add("IsLive");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OddState
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OddState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OddState is not found in the empty JSON string", OddState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OddState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OddState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OddState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `OddStatus`
      OddStatus.validateJsonElement(jsonObj.get("OddStatus"));
      if ((jsonObj.get("Spov") != null && !jsonObj.get("Spov").isJsonNull()) && !jsonObj.get("Spov").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Spov` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Spov").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OddState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OddState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OddState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OddState.class));

       return (TypeAdapter<T>) new TypeAdapter<OddState>() {
           @Override
           public void write(JsonWriter out, OddState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OddState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OddState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OddState
  * @throws IOException if the JSON string is invalid with respect to OddState
  */
  public static OddState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OddState.class);
  }

 /**
  * Convert an instance of OddState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

