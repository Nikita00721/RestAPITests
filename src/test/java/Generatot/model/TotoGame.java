/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * TotoGame
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class TotoGame {
  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_TYPE_ID = "TypeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private TotoType typeId;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_STAKE = "Stake";
  @SerializedName(SERIALIZED_NAME_STAKE)
  private Double stake;

  public static final String SERIALIZED_NAME_TOTAL_GOAL_STAKE = "TotalGoalStake";
  @SerializedName(SERIALIZED_NAME_TOTAL_GOAL_STAKE)
  private Double totalGoalStake;

  public static final String SERIALIZED_NAME_PAYOUT = "Payout";
  @SerializedName(SERIALIZED_NAME_PAYOUT)
  private Double payout;

  public static final String SERIALIZED_NAME_IS_TOTAL_GOAL_ENABLED = "IsTotalGoalEnabled";
  @SerializedName(SERIALIZED_NAME_IS_TOTAL_GOAL_ENABLED)
  private Boolean isTotalGoalEnabled;

  public static final String SERIALIZED_NAME_CATEGORY_WON = "CategoryWon";
  @SerializedName(SERIALIZED_NAME_CATEGORY_WON)
  private String categoryWon;

  public static final String SERIALIZED_NAME_PAYOUTS = "Payouts";
  @SerializedName(SERIALIZED_NAME_PAYOUTS)
  private List<TotoPayout> payouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_GOAL_PAYOUTS = "TotalGoalPayouts";
  @SerializedName(SERIALIZED_NAME_TOTAL_GOAL_PAYOUTS)
  private List<TotoPayout> totalGoalPayouts;

  public TotoGame() {
  }

  public TotoGame gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nonnull
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public TotoGame typeId(TotoType typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * Get typeId
   * @return typeId
  **/
  @javax.annotation.Nonnull
  public TotoType getTypeId() {
    return typeId;
  }

  public void setTypeId(TotoType typeId) {
    this.typeId = typeId;
  }


  public TotoGame number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public TotoGame name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TotoGame startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public TotoGame endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public TotoGame stake(Double stake) {
    this.stake = stake;
    return this;
  }

   /**
   * Get stake
   * @return stake
  **/
  @javax.annotation.Nonnull
  public Double getStake() {
    return stake;
  }

  public void setStake(Double stake) {
    this.stake = stake;
  }


  public TotoGame totalGoalStake(Double totalGoalStake) {
    this.totalGoalStake = totalGoalStake;
    return this;
  }

   /**
   * Get totalGoalStake
   * @return totalGoalStake
  **/
  @javax.annotation.Nullable
  public Double getTotalGoalStake() {
    return totalGoalStake;
  }

  public void setTotalGoalStake(Double totalGoalStake) {
    this.totalGoalStake = totalGoalStake;
  }


  public TotoGame payout(Double payout) {
    this.payout = payout;
    return this;
  }

   /**
   * Get payout
   * @return payout
  **/
  @javax.annotation.Nonnull
  public Double getPayout() {
    return payout;
  }

  public void setPayout(Double payout) {
    this.payout = payout;
  }


  public TotoGame isTotalGoalEnabled(Boolean isTotalGoalEnabled) {
    this.isTotalGoalEnabled = isTotalGoalEnabled;
    return this;
  }

   /**
   * Get isTotalGoalEnabled
   * @return isTotalGoalEnabled
  **/
  @javax.annotation.Nonnull
  public Boolean getIsTotalGoalEnabled() {
    return isTotalGoalEnabled;
  }

  public void setIsTotalGoalEnabled(Boolean isTotalGoalEnabled) {
    this.isTotalGoalEnabled = isTotalGoalEnabled;
  }


  public TotoGame categoryWon(String categoryWon) {
    this.categoryWon = categoryWon;
    return this;
  }

   /**
   * Get categoryWon
   * @return categoryWon
  **/
  @javax.annotation.Nullable
  public String getCategoryWon() {
    return categoryWon;
  }

  public void setCategoryWon(String categoryWon) {
    this.categoryWon = categoryWon;
  }


  public TotoGame payouts(List<TotoPayout> payouts) {
    this.payouts = payouts;
    return this;
  }

  public TotoGame addPayoutsItem(TotoPayout payoutsItem) {
    if (this.payouts == null) {
      this.payouts = new ArrayList<>();
    }
    this.payouts.add(payoutsItem);
    return this;
  }

   /**
   * Get payouts
   * @return payouts
  **/
  @javax.annotation.Nonnull
  public List<TotoPayout> getPayouts() {
    return payouts;
  }

  public void setPayouts(List<TotoPayout> payouts) {
    this.payouts = payouts;
  }


  public TotoGame totalGoalPayouts(List<TotoPayout> totalGoalPayouts) {
    this.totalGoalPayouts = totalGoalPayouts;
    return this;
  }

  public TotoGame addTotalGoalPayoutsItem(TotoPayout totalGoalPayoutsItem) {
    if (this.totalGoalPayouts == null) {
      this.totalGoalPayouts = new ArrayList<>();
    }
    this.totalGoalPayouts.add(totalGoalPayoutsItem);
    return this;
  }

   /**
   * Get totalGoalPayouts
   * @return totalGoalPayouts
  **/
  @javax.annotation.Nullable
  public List<TotoPayout> getTotalGoalPayouts() {
    return totalGoalPayouts;
  }

  public void setTotalGoalPayouts(List<TotoPayout> totalGoalPayouts) {
    this.totalGoalPayouts = totalGoalPayouts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotoGame totoGame = (TotoGame) o;
    return Objects.equals(this.gameId, totoGame.gameId) &&
        Objects.equals(this.typeId, totoGame.typeId) &&
        Objects.equals(this.number, totoGame.number) &&
        Objects.equals(this.name, totoGame.name) &&
        Objects.equals(this.startDate, totoGame.startDate) &&
        Objects.equals(this.endDate, totoGame.endDate) &&
        Objects.equals(this.stake, totoGame.stake) &&
        Objects.equals(this.totalGoalStake, totoGame.totalGoalStake) &&
        Objects.equals(this.payout, totoGame.payout) &&
        Objects.equals(this.isTotalGoalEnabled, totoGame.isTotalGoalEnabled) &&
        Objects.equals(this.categoryWon, totoGame.categoryWon) &&
        Objects.equals(this.payouts, totoGame.payouts) &&
        Objects.equals(this.totalGoalPayouts, totoGame.totalGoalPayouts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameId, typeId, number, name, startDate, endDate, stake, totalGoalStake, payout, isTotalGoalEnabled, categoryWon, payouts, totalGoalPayouts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotoGame {\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    totalGoalStake: ").append(toIndentedString(totalGoalStake)).append("\n");
    sb.append("    payout: ").append(toIndentedString(payout)).append("\n");
    sb.append("    isTotalGoalEnabled: ").append(toIndentedString(isTotalGoalEnabled)).append("\n");
    sb.append("    categoryWon: ").append(toIndentedString(categoryWon)).append("\n");
    sb.append("    payouts: ").append(toIndentedString(payouts)).append("\n");
    sb.append("    totalGoalPayouts: ").append(toIndentedString(totalGoalPayouts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GameId");
    openapiFields.add("TypeId");
    openapiFields.add("Number");
    openapiFields.add("Name");
    openapiFields.add("StartDate");
    openapiFields.add("EndDate");
    openapiFields.add("Stake");
    openapiFields.add("TotalGoalStake");
    openapiFields.add("Payout");
    openapiFields.add("IsTotalGoalEnabled");
    openapiFields.add("CategoryWon");
    openapiFields.add("Payouts");
    openapiFields.add("TotalGoalPayouts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("GameId");
    openapiRequiredFields.add("TypeId");
    openapiRequiredFields.add("Number");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("EndDate");
    openapiRequiredFields.add("Stake");
    openapiRequiredFields.add("Payout");
    openapiRequiredFields.add("IsTotalGoalEnabled");
    openapiRequiredFields.add("Payouts");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotoGame
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotoGame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotoGame is not found in the empty JSON string", TotoGame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotoGame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotoGame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotoGame.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TypeId`
      TotoType.validateJsonElement(jsonObj.get("TypeId"));
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("CategoryWon") != null && !jsonObj.get("CategoryWon").isJsonNull()) && !jsonObj.get("CategoryWon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryWon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryWon").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Payouts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Payouts` to be an array in the JSON string but got `%s`", jsonObj.get("Payouts").toString()));
      }

      JsonArray jsonArraypayouts = jsonObj.getAsJsonArray("Payouts");
      // validate the required field `Payouts` (array)
      for (int i = 0; i < jsonArraypayouts.size(); i++) {
        TotoPayout.validateJsonElement(jsonArraypayouts.get(i));
      };
      if (jsonObj.get("TotalGoalPayouts") != null && !jsonObj.get("TotalGoalPayouts").isJsonNull()) {
        JsonArray jsonArraytotalGoalPayouts = jsonObj.getAsJsonArray("TotalGoalPayouts");
        if (jsonArraytotalGoalPayouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TotalGoalPayouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TotalGoalPayouts` to be an array in the JSON string but got `%s`", jsonObj.get("TotalGoalPayouts").toString()));
          }

          // validate the optional field `TotalGoalPayouts` (array)
          for (int i = 0; i < jsonArraytotalGoalPayouts.size(); i++) {
            TotoPayout.validateJsonElement(jsonArraytotalGoalPayouts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotoGame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotoGame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotoGame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotoGame.class));

       return (TypeAdapter<T>) new TypeAdapter<TotoGame>() {
           @Override
           public void write(JsonWriter out, TotoGame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotoGame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotoGame given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotoGame
  * @throws IOException if the JSON string is invalid with respect to TotoGame
  */
  public static TotoGame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotoGame.class);
  }

 /**
  * Convert an instance of TotoGame to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

