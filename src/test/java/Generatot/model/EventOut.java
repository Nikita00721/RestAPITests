/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * EventOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class EventOut {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_SPORT_ICON = "SportIcon";
  @SerializedName(SERIALIZED_NAME_SPORT_ICON)
  private String sportIcon;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "CategoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Long champId;

  public static final String SERIALIZED_NAME_CHAMP_NAME = "ChampName";
  @SerializedName(SERIALIZED_NAME_CHAMP_NAME)
  private String champName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_CODE = "EventCode";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private Integer eventCode;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_EXT_ID = "ExtId";
  @SerializedName(SERIALIZED_NAME_EXT_ID)
  private String extId;

  public static final String SERIALIZED_NAME_IS_PROMO = "IsPromo";
  @SerializedName(SERIALIZED_NAME_IS_PROMO)
  private Boolean isPromo;

  public static final String SERIALIZED_NAME_IS_LIVE_STREAM = "IsLiveStream";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_STREAM)
  private Boolean isLiveStream;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private ClientEventTypes eventType;

  public static final String SERIALIZED_NAME_ITEMS = "Items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<MarketOut> items;

  public static final String SERIALIZED_NAME_NODE = "Node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<CompetitorOut> competitors;

  public static final String SERIALIZED_NAME_IS_LIVE_EVENT = "IsLiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_EVENT)
  private Boolean isLiveEvent;

  public static final String SERIALIZED_NAME_LIVE_CURRENT_TIME = "LiveCurrentTime";
  @SerializedName(SERIALIZED_NAME_LIVE_CURRENT_TIME)
  private String liveCurrentTime;

  public static final String SERIALIZED_NAME_LIVE_SCORE = "LiveScore";
  @SerializedName(SERIALIZED_NAME_LIVE_SCORE)
  private String liveScore;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private Integer server;

  public static final String SERIALIZED_NAME_POINT_SCORE = "PointScore";
  @SerializedName(SERIALIZED_NAME_POINT_SCORE)
  private String pointScore;

  public static final String SERIALIZED_NAME_CURRENT_SET_SCORE = "CurrentSetScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_SET_SCORE)
  private String currentSetScore;

  public static final String SERIALIZED_NAME_I_S_O = "ISO";
  @SerializedName(SERIALIZED_NAME_I_S_O)
  private String ISO;

  public static final String SERIALIZED_NAME_MARKET_GROUPS = "MarketGroups";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUPS)
  private List<MarketTypeGroupOut> marketGroups;

  public static final String SERIALIZED_NAME_COMPETITORS_COUNT = "CompetitorsCount";
  @SerializedName(SERIALIZED_NAME_COMPETITORS_COUNT)
  private Integer competitorsCount;

  public static final String SERIALIZED_NAME_CATEGORY_ORDER = "CategoryOrder";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ORDER)
  private Long categoryOrder;

  public static final String SERIALIZED_NAME_STREAM_PROVIDERS = "StreamProviders";
  @SerializedName(SERIALIZED_NAME_STREAM_PROVIDERS)
  private List<Integer> streamProviders;

  public static final String SERIALIZED_NAME_IS_PARLAY = "IsParlay";
  @SerializedName(SERIALIZED_NAME_IS_PARLAY)
  private Boolean isParlay;

  public static final String SERIALIZED_NAME_E_P = "EP";
  @SerializedName(SERIALIZED_NAME_E_P)
  private Boolean EP;

  public static final String SERIALIZED_NAME_B_D = "BD";
  @SerializedName(SERIALIZED_NAME_B_D)
  private Boolean BD;

  public static final String SERIALIZED_NAME_EXTRA_EVENT_INFO = "ExtraEventInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_EVENT_INFO)
  private String extraEventInfo;

  public static final String SERIALIZED_NAME_IS_VIRTUAL = "IsVirtual";
  @SerializedName(SERIALIZED_NAME_IS_VIRTUAL)
  private Boolean isVirtual;

  public static final String SERIALIZED_NAME_PITCHER_INFO = "PitcherInfo";
  @SerializedName(SERIALIZED_NAME_PITCHER_INFO)
  private IPitcherInfo pitcherInfo;

  public static final String SERIALIZED_NAME_IS_LIVE_BOOKED = "IsLiveBooked";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_BOOKED)
  private Boolean isLiveBooked;

  public static final String SERIALIZED_NAME_MARKET_PROMO_TYPE = "MarketPromoType";
  @SerializedName(SERIALIZED_NAME_MARKET_PROMO_TYPE)
  private MarketPromoType marketPromoType;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_IS_SAFE = "IsSafe";
  @SerializedName(SERIALIZED_NAME_IS_SAFE)
  private Boolean isSafe;

  public static final String SERIALIZED_NAME_DB_ID = "DbId";
  @SerializedName(SERIALIZED_NAME_DB_ID)
  private Integer dbId;

  public static final String SERIALIZED_NAME_SELECTIONS_COUNT = "SelectionsCount";
  @SerializedName(SERIALIZED_NAME_SELECTIONS_COUNT)
  private Integer selectionsCount;

  public static final String SERIALIZED_NAME_R_C = "RC";
  @SerializedName(SERIALIZED_NAME_R_C)
  private Boolean RC;

  public static final String SERIALIZED_NAME_TEASER_MARKETS = "TeaserMarkets";
  @SerializedName(SERIALIZED_NAME_TEASER_MARKETS)
  private Map<String, Map<String, Selection>> teaserMarkets = new HashMap<>();

  public EventOut() {
  }

  public EventOut id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public EventOut sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public EventOut sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public EventOut sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public EventOut sportIcon(String sportIcon) {
    this.sportIcon = sportIcon;
    return this;
  }

   /**
   * Get sportIcon
   * @return sportIcon
  **/
  @javax.annotation.Nullable
  public String getSportIcon() {
    return sportIcon;
  }

  public void setSportIcon(String sportIcon) {
    this.sportIcon = sportIcon;
  }


  public EventOut categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nonnull
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public EventOut categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * Get categoryName
   * @return categoryName
  **/
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public EventOut champId(Long champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nonnull
  public Long getChampId() {
    return champId;
  }

  public void setChampId(Long champId) {
    this.champId = champId;
  }


  public EventOut champName(String champName) {
    this.champName = champName;
    return this;
  }

   /**
   * Get champName
   * @return champName
  **/
  @javax.annotation.Nullable
  public String getChampName() {
    return champName;
  }

  public void setChampName(String champName) {
    this.champName = champName;
  }


  public EventOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventOut eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public EventOut eventCode(Integer eventCode) {
    this.eventCode = eventCode;
    return this;
  }

   /**
   * Get eventCode
   * @return eventCode
  **/
  @javax.annotation.Nullable
  public Integer getEventCode() {
    return eventCode;
  }

  public void setEventCode(Integer eventCode) {
    this.eventCode = eventCode;
  }


  public EventOut status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public EventOut extId(String extId) {
    this.extId = extId;
    return this;
  }

   /**
   * Get extId
   * @return extId
  **/
  @javax.annotation.Nullable
  public String getExtId() {
    return extId;
  }

  public void setExtId(String extId) {
    this.extId = extId;
  }


  public EventOut isPromo(Boolean isPromo) {
    this.isPromo = isPromo;
    return this;
  }

   /**
   * Get isPromo
   * @return isPromo
  **/
  @javax.annotation.Nonnull
  public Boolean getIsPromo() {
    return isPromo;
  }

  public void setIsPromo(Boolean isPromo) {
    this.isPromo = isPromo;
  }


  public EventOut isLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
    return this;
  }

   /**
   * Get isLiveStream
   * @return isLiveStream
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveStream() {
    return isLiveStream;
  }

  public void setIsLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
  }


  public EventOut eventType(ClientEventTypes eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public ClientEventTypes getEventType() {
    return eventType;
  }

  public void setEventType(ClientEventTypes eventType) {
    this.eventType = eventType;
  }


  public EventOut items(List<MarketOut> items) {
    this.items = items;
    return this;
  }

  public EventOut addItemsItem(MarketOut itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public List<MarketOut> getItems() {
    return items;
  }

  public void setItems(List<MarketOut> items) {
    this.items = items;
  }


  public EventOut node(String node) {
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }


  public EventOut competitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
    return this;
  }

  public EventOut addCompetitorsItem(CompetitorOut competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<CompetitorOut> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
  }


  public EventOut isLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
    return this;
  }

   /**
   * Get isLiveEvent
   * @return isLiveEvent
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveEvent() {
    return isLiveEvent;
  }

  public void setIsLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
  }


  public EventOut liveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
    return this;
  }

   /**
   * Get liveCurrentTime
   * @return liveCurrentTime
  **/
  @javax.annotation.Nullable
  public String getLiveCurrentTime() {
    return liveCurrentTime;
  }

  public void setLiveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
  }


  public EventOut liveScore(String liveScore) {
    this.liveScore = liveScore;
    return this;
  }

   /**
   * Get liveScore
   * @return liveScore
  **/
  @javax.annotation.Nullable
  public String getLiveScore() {
    return liveScore;
  }

  public void setLiveScore(String liveScore) {
    this.liveScore = liveScore;
  }


  public EventOut server(Integer server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  public Integer getServer() {
    return server;
  }

  public void setServer(Integer server) {
    this.server = server;
  }


  public EventOut pointScore(String pointScore) {
    this.pointScore = pointScore;
    return this;
  }

   /**
   * Get pointScore
   * @return pointScore
  **/
  @javax.annotation.Nullable
  public String getPointScore() {
    return pointScore;
  }

  public void setPointScore(String pointScore) {
    this.pointScore = pointScore;
  }


  public EventOut currentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
    return this;
  }

   /**
   * Get currentSetScore
   * @return currentSetScore
  **/
  @javax.annotation.Nullable
  public String getCurrentSetScore() {
    return currentSetScore;
  }

  public void setCurrentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
  }


  public EventOut ISO(String ISO) {
    this.ISO = ISO;
    return this;
  }

   /**
   * Get ISO
   * @return ISO
  **/
  @javax.annotation.Nullable
  public String getISO() {
    return ISO;
  }

  public void setISO(String ISO) {
    this.ISO = ISO;
  }


  public EventOut marketGroups(List<MarketTypeGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
    return this;
  }

  public EventOut addMarketGroupsItem(MarketTypeGroupOut marketGroupsItem) {
    if (this.marketGroups == null) {
      this.marketGroups = new ArrayList<>();
    }
    this.marketGroups.add(marketGroupsItem);
    return this;
  }

   /**
   * Get marketGroups
   * @return marketGroups
  **/
  @javax.annotation.Nullable
  public List<MarketTypeGroupOut> getMarketGroups() {
    return marketGroups;
  }

  public void setMarketGroups(List<MarketTypeGroupOut> marketGroups) {
    this.marketGroups = marketGroups;
  }


  public EventOut competitorsCount(Integer competitorsCount) {
    this.competitorsCount = competitorsCount;
    return this;
  }

   /**
   * Get competitorsCount
   * @return competitorsCount
  **/
  @javax.annotation.Nonnull
  public Integer getCompetitorsCount() {
    return competitorsCount;
  }

  public void setCompetitorsCount(Integer competitorsCount) {
    this.competitorsCount = competitorsCount;
  }


  public EventOut categoryOrder(Long categoryOrder) {
    this.categoryOrder = categoryOrder;
    return this;
  }

   /**
   * Get categoryOrder
   * @return categoryOrder
  **/
  @javax.annotation.Nonnull
  public Long getCategoryOrder() {
    return categoryOrder;
  }

  public void setCategoryOrder(Long categoryOrder) {
    this.categoryOrder = categoryOrder;
  }


  public EventOut streamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
    return this;
  }

  public EventOut addStreamProvidersItem(Integer streamProvidersItem) {
    if (this.streamProviders == null) {
      this.streamProviders = new ArrayList<>();
    }
    this.streamProviders.add(streamProvidersItem);
    return this;
  }

   /**
   * Get streamProviders
   * @return streamProviders
  **/
  @javax.annotation.Nullable
  public List<Integer> getStreamProviders() {
    return streamProviders;
  }

  public void setStreamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
  }


  public EventOut isParlay(Boolean isParlay) {
    this.isParlay = isParlay;
    return this;
  }

   /**
   * Get isParlay
   * @return isParlay
  **/
  @javax.annotation.Nonnull
  public Boolean getIsParlay() {
    return isParlay;
  }

  public void setIsParlay(Boolean isParlay) {
    this.isParlay = isParlay;
  }


  public EventOut EP(Boolean EP) {
    this.EP = EP;
    return this;
  }

   /**
   * Get EP
   * @return EP
  **/
  @javax.annotation.Nullable
  public Boolean getEP() {
    return EP;
  }

  public void setEP(Boolean EP) {
    this.EP = EP;
  }


  public EventOut BD(Boolean BD) {
    this.BD = BD;
    return this;
  }

   /**
   * Get BD
   * @return BD
  **/
  @javax.annotation.Nullable
  public Boolean getBD() {
    return BD;
  }

  public void setBD(Boolean BD) {
    this.BD = BD;
  }


  public EventOut extraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
    return this;
  }

   /**
   * Get extraEventInfo
   * @return extraEventInfo
  **/
  @javax.annotation.Nullable
  public String getExtraEventInfo() {
    return extraEventInfo;
  }

  public void setExtraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
  }


  public EventOut isVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
    return this;
  }

   /**
   * Get isVirtual
   * @return isVirtual
  **/
  @javax.annotation.Nonnull
  public Boolean getIsVirtual() {
    return isVirtual;
  }

  public void setIsVirtual(Boolean isVirtual) {
    this.isVirtual = isVirtual;
  }


  public EventOut pitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
    return this;
  }

   /**
   * Get pitcherInfo
   * @return pitcherInfo
  **/
  @javax.annotation.Nullable
  public IPitcherInfo getPitcherInfo() {
    return pitcherInfo;
  }

  public void setPitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
  }


  public EventOut isLiveBooked(Boolean isLiveBooked) {
    this.isLiveBooked = isLiveBooked;
    return this;
  }

   /**
   * Get isLiveBooked
   * @return isLiveBooked
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveBooked() {
    return isLiveBooked;
  }

  public void setIsLiveBooked(Boolean isLiveBooked) {
    this.isLiveBooked = isLiveBooked;
  }


  public EventOut marketPromoType(MarketPromoType marketPromoType) {
    this.marketPromoType = marketPromoType;
    return this;
  }

   /**
   * Get marketPromoType
   * @return marketPromoType
  **/
  @javax.annotation.Nullable
  public MarketPromoType getMarketPromoType() {
    return marketPromoType;
  }

  public void setMarketPromoType(MarketPromoType marketPromoType) {
    this.marketPromoType = marketPromoType;
  }


  public EventOut endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public EventOut isSafe(Boolean isSafe) {
    this.isSafe = isSafe;
    return this;
  }

   /**
   * Get isSafe
   * @return isSafe
  **/
  @javax.annotation.Nonnull
  public Boolean getIsSafe() {
    return isSafe;
  }

  public void setIsSafe(Boolean isSafe) {
    this.isSafe = isSafe;
  }


  public EventOut dbId(Integer dbId) {
    this.dbId = dbId;
    return this;
  }

   /**
   * Get dbId
   * @return dbId
  **/
  @javax.annotation.Nonnull
  public Integer getDbId() {
    return dbId;
  }

  public void setDbId(Integer dbId) {
    this.dbId = dbId;
  }


  public EventOut selectionsCount(Integer selectionsCount) {
    this.selectionsCount = selectionsCount;
    return this;
  }

   /**
   * Get selectionsCount
   * @return selectionsCount
  **/
  @javax.annotation.Nonnull
  public Integer getSelectionsCount() {
    return selectionsCount;
  }

  public void setSelectionsCount(Integer selectionsCount) {
    this.selectionsCount = selectionsCount;
  }


  public EventOut RC(Boolean RC) {
    this.RC = RC;
    return this;
  }

   /**
   * Get RC
   * @return RC
  **/
  @javax.annotation.Nullable
  public Boolean getRC() {
    return RC;
  }

  public void setRC(Boolean RC) {
    this.RC = RC;
  }


  public EventOut teaserMarkets(Map<String, Map<String, Selection>> teaserMarkets) {
    this.teaserMarkets = teaserMarkets;
    return this;
  }

  public EventOut putTeaserMarketsItem(String key, Map<String, Selection> teaserMarketsItem) {
    if (this.teaserMarkets == null) {
      this.teaserMarkets = new HashMap<>();
    }
    this.teaserMarkets.put(key, teaserMarketsItem);
    return this;
  }

   /**
   * Get teaserMarkets
   * @return teaserMarkets
  **/
  @javax.annotation.Nullable
  public Map<String, Map<String, Selection>> getTeaserMarkets() {
    return teaserMarkets;
  }

  public void setTeaserMarkets(Map<String, Map<String, Selection>> teaserMarkets) {
    this.teaserMarkets = teaserMarkets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventOut eventOut = (EventOut) o;
    return Objects.equals(this.id, eventOut.id) &&
        Objects.equals(this.sportId, eventOut.sportId) &&
        Objects.equals(this.sportTypeId, eventOut.sportTypeId) &&
        Objects.equals(this.sportName, eventOut.sportName) &&
        Objects.equals(this.sportIcon, eventOut.sportIcon) &&
        Objects.equals(this.categoryId, eventOut.categoryId) &&
        Objects.equals(this.categoryName, eventOut.categoryName) &&
        Objects.equals(this.champId, eventOut.champId) &&
        Objects.equals(this.champName, eventOut.champName) &&
        Objects.equals(this.name, eventOut.name) &&
        Objects.equals(this.eventDate, eventOut.eventDate) &&
        Objects.equals(this.eventCode, eventOut.eventCode) &&
        Objects.equals(this.status, eventOut.status) &&
        Objects.equals(this.extId, eventOut.extId) &&
        Objects.equals(this.isPromo, eventOut.isPromo) &&
        Objects.equals(this.isLiveStream, eventOut.isLiveStream) &&
        Objects.equals(this.eventType, eventOut.eventType) &&
        Objects.equals(this.items, eventOut.items) &&
        Objects.equals(this.node, eventOut.node) &&
        Objects.equals(this.competitors, eventOut.competitors) &&
        Objects.equals(this.isLiveEvent, eventOut.isLiveEvent) &&
        Objects.equals(this.liveCurrentTime, eventOut.liveCurrentTime) &&
        Objects.equals(this.liveScore, eventOut.liveScore) &&
        Objects.equals(this.server, eventOut.server) &&
        Objects.equals(this.pointScore, eventOut.pointScore) &&
        Objects.equals(this.currentSetScore, eventOut.currentSetScore) &&
        Objects.equals(this.ISO, eventOut.ISO) &&
        Objects.equals(this.marketGroups, eventOut.marketGroups) &&
        Objects.equals(this.competitorsCount, eventOut.competitorsCount) &&
        Objects.equals(this.categoryOrder, eventOut.categoryOrder) &&
        Objects.equals(this.streamProviders, eventOut.streamProviders) &&
        Objects.equals(this.isParlay, eventOut.isParlay) &&
        Objects.equals(this.EP, eventOut.EP) &&
        Objects.equals(this.BD, eventOut.BD) &&
        Objects.equals(this.extraEventInfo, eventOut.extraEventInfo) &&
        Objects.equals(this.isVirtual, eventOut.isVirtual) &&
        Objects.equals(this.pitcherInfo, eventOut.pitcherInfo) &&
        Objects.equals(this.isLiveBooked, eventOut.isLiveBooked) &&
        Objects.equals(this.marketPromoType, eventOut.marketPromoType) &&
        Objects.equals(this.endDate, eventOut.endDate) &&
        Objects.equals(this.isSafe, eventOut.isSafe) &&
        Objects.equals(this.dbId, eventOut.dbId) &&
        Objects.equals(this.selectionsCount, eventOut.selectionsCount) &&
        Objects.equals(this.RC, eventOut.RC) &&
        Objects.equals(this.teaserMarkets, eventOut.teaserMarkets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sportId, sportTypeId, sportName, sportIcon, categoryId, categoryName, champId, champName, name, eventDate, eventCode, status, extId, isPromo, isLiveStream, eventType, items, node, competitors, isLiveEvent, liveCurrentTime, liveScore, server, pointScore, currentSetScore, ISO, marketGroups, competitorsCount, categoryOrder, streamProviders, isParlay, EP, BD, extraEventInfo, isVirtual, pitcherInfo, isLiveBooked, marketPromoType, endDate, isSafe, dbId, selectionsCount, RC, teaserMarkets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventOut {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    sportIcon: ").append(toIndentedString(sportIcon)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    champName: ").append(toIndentedString(champName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    extId: ").append(toIndentedString(extId)).append("\n");
    sb.append("    isPromo: ").append(toIndentedString(isPromo)).append("\n");
    sb.append("    isLiveStream: ").append(toIndentedString(isLiveStream)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    isLiveEvent: ").append(toIndentedString(isLiveEvent)).append("\n");
    sb.append("    liveCurrentTime: ").append(toIndentedString(liveCurrentTime)).append("\n");
    sb.append("    liveScore: ").append(toIndentedString(liveScore)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    pointScore: ").append(toIndentedString(pointScore)).append("\n");
    sb.append("    currentSetScore: ").append(toIndentedString(currentSetScore)).append("\n");
    sb.append("    ISO: ").append(toIndentedString(ISO)).append("\n");
    sb.append("    marketGroups: ").append(toIndentedString(marketGroups)).append("\n");
    sb.append("    competitorsCount: ").append(toIndentedString(competitorsCount)).append("\n");
    sb.append("    categoryOrder: ").append(toIndentedString(categoryOrder)).append("\n");
    sb.append("    streamProviders: ").append(toIndentedString(streamProviders)).append("\n");
    sb.append("    isParlay: ").append(toIndentedString(isParlay)).append("\n");
    sb.append("    EP: ").append(toIndentedString(EP)).append("\n");
    sb.append("    BD: ").append(toIndentedString(BD)).append("\n");
    sb.append("    extraEventInfo: ").append(toIndentedString(extraEventInfo)).append("\n");
    sb.append("    isVirtual: ").append(toIndentedString(isVirtual)).append("\n");
    sb.append("    pitcherInfo: ").append(toIndentedString(pitcherInfo)).append("\n");
    sb.append("    isLiveBooked: ").append(toIndentedString(isLiveBooked)).append("\n");
    sb.append("    marketPromoType: ").append(toIndentedString(marketPromoType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    isSafe: ").append(toIndentedString(isSafe)).append("\n");
    sb.append("    dbId: ").append(toIndentedString(dbId)).append("\n");
    sb.append("    selectionsCount: ").append(toIndentedString(selectionsCount)).append("\n");
    sb.append("    RC: ").append(toIndentedString(RC)).append("\n");
    sb.append("    teaserMarkets: ").append(toIndentedString(teaserMarkets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("SportId");
    openapiFields.add("SportTypeId");
    openapiFields.add("SportName");
    openapiFields.add("SportIcon");
    openapiFields.add("CategoryId");
    openapiFields.add("CategoryName");
    openapiFields.add("ChampId");
    openapiFields.add("ChampName");
    openapiFields.add("Name");
    openapiFields.add("EventDate");
    openapiFields.add("EventCode");
    openapiFields.add("Status");
    openapiFields.add("ExtId");
    openapiFields.add("IsPromo");
    openapiFields.add("IsLiveStream");
    openapiFields.add("EventType");
    openapiFields.add("Items");
    openapiFields.add("Node");
    openapiFields.add("Competitors");
    openapiFields.add("IsLiveEvent");
    openapiFields.add("LiveCurrentTime");
    openapiFields.add("LiveScore");
    openapiFields.add("Server");
    openapiFields.add("PointScore");
    openapiFields.add("CurrentSetScore");
    openapiFields.add("ISO");
    openapiFields.add("MarketGroups");
    openapiFields.add("CompetitorsCount");
    openapiFields.add("CategoryOrder");
    openapiFields.add("StreamProviders");
    openapiFields.add("IsParlay");
    openapiFields.add("EP");
    openapiFields.add("BD");
    openapiFields.add("ExtraEventInfo");
    openapiFields.add("IsVirtual");
    openapiFields.add("PitcherInfo");
    openapiFields.add("IsLiveBooked");
    openapiFields.add("MarketPromoType");
    openapiFields.add("EndDate");
    openapiFields.add("IsSafe");
    openapiFields.add("DbId");
    openapiFields.add("SelectionsCount");
    openapiFields.add("RC");
    openapiFields.add("TeaserMarkets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("SportTypeId");
    openapiRequiredFields.add("CategoryId");
    openapiRequiredFields.add("ChampId");
    openapiRequiredFields.add("EventDate");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("IsPromo");
    openapiRequiredFields.add("IsLiveStream");
    openapiRequiredFields.add("EventType");
    openapiRequiredFields.add("IsLiveEvent");
    openapiRequiredFields.add("CompetitorsCount");
    openapiRequiredFields.add("CategoryOrder");
    openapiRequiredFields.add("IsParlay");
    openapiRequiredFields.add("IsVirtual");
    openapiRequiredFields.add("IsLiveBooked");
    openapiRequiredFields.add("IsSafe");
    openapiRequiredFields.add("DbId");
    openapiRequiredFields.add("SelectionsCount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventOut is not found in the empty JSON string", EventOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if ((jsonObj.get("SportIcon") != null && !jsonObj.get("SportIcon").isJsonNull()) && !jsonObj.get("SportIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportIcon").toString()));
      }
      if ((jsonObj.get("CategoryName") != null && !jsonObj.get("CategoryName").isJsonNull()) && !jsonObj.get("CategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryName").toString()));
      }
      if ((jsonObj.get("ChampName") != null && !jsonObj.get("ChampName").isJsonNull()) && !jsonObj.get("ChampName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ExtId") != null && !jsonObj.get("ExtId").isJsonNull()) && !jsonObj.get("ExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtId").toString()));
      }
      // validate the required field `EventType`
      ClientEventTypes.validateJsonElement(jsonObj.get("EventType"));
      if (jsonObj.get("Items") != null && !jsonObj.get("Items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("Items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Items` to be an array in the JSON string but got `%s`", jsonObj.get("Items").toString()));
          }

          // validate the optional field `Items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            MarketOut.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("Node") != null && !jsonObj.get("Node").isJsonNull()) && !jsonObj.get("Node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Node").toString()));
      }
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull()) {
        JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
        if (jsonArraycompetitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Competitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
          }

          // validate the optional field `Competitors` (array)
          for (int i = 0; i < jsonArraycompetitors.size(); i++) {
            CompetitorOut.validateJsonElement(jsonArraycompetitors.get(i));
          };
        }
      }
      if ((jsonObj.get("LiveCurrentTime") != null && !jsonObj.get("LiveCurrentTime").isJsonNull()) && !jsonObj.get("LiveCurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveCurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveCurrentTime").toString()));
      }
      if ((jsonObj.get("LiveScore") != null && !jsonObj.get("LiveScore").isJsonNull()) && !jsonObj.get("LiveScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveScore").toString()));
      }
      if ((jsonObj.get("PointScore") != null && !jsonObj.get("PointScore").isJsonNull()) && !jsonObj.get("PointScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointScore").toString()));
      }
      if ((jsonObj.get("CurrentSetScore") != null && !jsonObj.get("CurrentSetScore").isJsonNull()) && !jsonObj.get("CurrentSetScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentSetScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentSetScore").toString()));
      }
      if ((jsonObj.get("ISO") != null && !jsonObj.get("ISO").isJsonNull()) && !jsonObj.get("ISO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ISO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ISO").toString()));
      }
      if (jsonObj.get("MarketGroups") != null && !jsonObj.get("MarketGroups").isJsonNull()) {
        JsonArray jsonArraymarketGroups = jsonObj.getAsJsonArray("MarketGroups");
        if (jsonArraymarketGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MarketGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MarketGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MarketGroups").toString()));
          }

          // validate the optional field `MarketGroups` (array)
          for (int i = 0; i < jsonArraymarketGroups.size(); i++) {
            MarketTypeGroupOut.validateJsonElement(jsonArraymarketGroups.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StreamProviders") != null && !jsonObj.get("StreamProviders").isJsonNull() && !jsonObj.get("StreamProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamProviders` to be an array in the JSON string but got `%s`", jsonObj.get("StreamProviders").toString()));
      }
      if ((jsonObj.get("ExtraEventInfo") != null && !jsonObj.get("ExtraEventInfo").isJsonNull()) && !jsonObj.get("ExtraEventInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraEventInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraEventInfo").toString()));
      }
      // validate the optional field `PitcherInfo`
      if (jsonObj.get("PitcherInfo") != null && !jsonObj.get("PitcherInfo").isJsonNull()) {
        IPitcherInfo.validateJsonElement(jsonObj.get("PitcherInfo"));
      }
      // validate the optional field `MarketPromoType`
      if (jsonObj.get("MarketPromoType") != null && !jsonObj.get("MarketPromoType").isJsonNull()) {
        MarketPromoType.validateJsonElement(jsonObj.get("MarketPromoType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventOut.class));

       return (TypeAdapter<T>) new TypeAdapter<EventOut>() {
           @Override
           public void write(JsonWriter out, EventOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventOut
  * @throws IOException if the JSON string is invalid with respect to EventOut
  */
  public static EventOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventOut.class);
  }

 /**
  * Convert an instance of EventOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

