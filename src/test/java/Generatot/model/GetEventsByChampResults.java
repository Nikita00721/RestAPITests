/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * GetEventsByChampResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class GetEventsByChampResults {
  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<SportEvent> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPORTS = "Sports";
  @SerializedName(SERIALIZED_NAME_SPORTS)
  private List<SportNodeWithChildIds> sports = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<CategoryNodeWithChildIds> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHAMPS = "Champs";
  @SerializedName(SERIALIZED_NAME_CHAMPS)
  private List<ChampionshipNode> champs = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<Competitor> competitors = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETS = "Markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<Market> markets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ODDS = "Odds";
  @SerializedName(SERIALIZED_NAME_ODDS)
  private List<Odd> odds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADERS = "Headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<Header> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_CHAMPS = "AvailableChamps";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CHAMPS)
  private List<ChampionshipNode> availableChamps = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTRIGHT_GROUPS = "OutrightGroups";
  @SerializedName(SERIALIZED_NAME_OUTRIGHT_GROUPS)
  private List<OutrightGroupPerChamp> outrightGroups = new ArrayList<>();

  public GetEventsByChampResults() {
  }

  public GetEventsByChampResults events(List<SportEvent> events) {
    this.events = events;
    return this;
  }

  public GetEventsByChampResults addEventsItem(SportEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nonnull
  public List<SportEvent> getEvents() {
    return events;
  }

  public void setEvents(List<SportEvent> events) {
    this.events = events;
  }


  public GetEventsByChampResults sports(List<SportNodeWithChildIds> sports) {
    this.sports = sports;
    return this;
  }

  public GetEventsByChampResults addSportsItem(SportNodeWithChildIds sportsItem) {
    if (this.sports == null) {
      this.sports = new ArrayList<>();
    }
    this.sports.add(sportsItem);
    return this;
  }

   /**
   * Get sports
   * @return sports
  **/
  @javax.annotation.Nonnull
  public List<SportNodeWithChildIds> getSports() {
    return sports;
  }

  public void setSports(List<SportNodeWithChildIds> sports) {
    this.sports = sports;
  }


  public GetEventsByChampResults categories(List<CategoryNodeWithChildIds> categories) {
    this.categories = categories;
    return this;
  }

  public GetEventsByChampResults addCategoriesItem(CategoryNodeWithChildIds categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nonnull
  public List<CategoryNodeWithChildIds> getCategories() {
    return categories;
  }

  public void setCategories(List<CategoryNodeWithChildIds> categories) {
    this.categories = categories;
  }


  public GetEventsByChampResults champs(List<ChampionshipNode> champs) {
    this.champs = champs;
    return this;
  }

  public GetEventsByChampResults addChampsItem(ChampionshipNode champsItem) {
    if (this.champs == null) {
      this.champs = new ArrayList<>();
    }
    this.champs.add(champsItem);
    return this;
  }

   /**
   * Get champs
   * @return champs
  **/
  @javax.annotation.Nonnull
  public List<ChampionshipNode> getChamps() {
    return champs;
  }

  public void setChamps(List<ChampionshipNode> champs) {
    this.champs = champs;
  }


  public GetEventsByChampResults competitors(List<Competitor> competitors) {
    this.competitors = competitors;
    return this;
  }

  public GetEventsByChampResults addCompetitorsItem(Competitor competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nonnull
  public List<Competitor> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<Competitor> competitors) {
    this.competitors = competitors;
  }


  public GetEventsByChampResults markets(List<Market> markets) {
    this.markets = markets;
    return this;
  }

  public GetEventsByChampResults addMarketsItem(Market marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nonnull
  public List<Market> getMarkets() {
    return markets;
  }

  public void setMarkets(List<Market> markets) {
    this.markets = markets;
  }


  public GetEventsByChampResults odds(List<Odd> odds) {
    this.odds = odds;
    return this;
  }

  public GetEventsByChampResults addOddsItem(Odd oddsItem) {
    if (this.odds == null) {
      this.odds = new ArrayList<>();
    }
    this.odds.add(oddsItem);
    return this;
  }

   /**
   * Get odds
   * @return odds
  **/
  @javax.annotation.Nonnull
  public List<Odd> getOdds() {
    return odds;
  }

  public void setOdds(List<Odd> odds) {
    this.odds = odds;
  }


  public GetEventsByChampResults headers(List<Header> headers) {
    this.headers = headers;
    return this;
  }

  public GetEventsByChampResults addHeadersItem(Header headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nonnull
  public List<Header> getHeaders() {
    return headers;
  }

  public void setHeaders(List<Header> headers) {
    this.headers = headers;
  }


  public GetEventsByChampResults availableChamps(List<ChampionshipNode> availableChamps) {
    this.availableChamps = availableChamps;
    return this;
  }

  public GetEventsByChampResults addAvailableChampsItem(ChampionshipNode availableChampsItem) {
    if (this.availableChamps == null) {
      this.availableChamps = new ArrayList<>();
    }
    this.availableChamps.add(availableChampsItem);
    return this;
  }

   /**
   * Get availableChamps
   * @return availableChamps
  **/
  @javax.annotation.Nonnull
  public List<ChampionshipNode> getAvailableChamps() {
    return availableChamps;
  }

  public void setAvailableChamps(List<ChampionshipNode> availableChamps) {
    this.availableChamps = availableChamps;
  }


  public GetEventsByChampResults outrightGroups(List<OutrightGroupPerChamp> outrightGroups) {
    this.outrightGroups = outrightGroups;
    return this;
  }

  public GetEventsByChampResults addOutrightGroupsItem(OutrightGroupPerChamp outrightGroupsItem) {
    if (this.outrightGroups == null) {
      this.outrightGroups = new ArrayList<>();
    }
    this.outrightGroups.add(outrightGroupsItem);
    return this;
  }

   /**
   * Get outrightGroups
   * @return outrightGroups
  **/
  @javax.annotation.Nonnull
  public List<OutrightGroupPerChamp> getOutrightGroups() {
    return outrightGroups;
  }

  public void setOutrightGroups(List<OutrightGroupPerChamp> outrightGroups) {
    this.outrightGroups = outrightGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEventsByChampResults getEventsByChampResults = (GetEventsByChampResults) o;
    return Objects.equals(this.events, getEventsByChampResults.events) &&
        Objects.equals(this.sports, getEventsByChampResults.sports) &&
        Objects.equals(this.categories, getEventsByChampResults.categories) &&
        Objects.equals(this.champs, getEventsByChampResults.champs) &&
        Objects.equals(this.competitors, getEventsByChampResults.competitors) &&
        Objects.equals(this.markets, getEventsByChampResults.markets) &&
        Objects.equals(this.odds, getEventsByChampResults.odds) &&
        Objects.equals(this.headers, getEventsByChampResults.headers) &&
        Objects.equals(this.availableChamps, getEventsByChampResults.availableChamps) &&
        Objects.equals(this.outrightGroups, getEventsByChampResults.outrightGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, sports, categories, champs, competitors, markets, odds, headers, availableChamps, outrightGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEventsByChampResults {\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    sports: ").append(toIndentedString(sports)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    champs: ").append(toIndentedString(champs)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    odds: ").append(toIndentedString(odds)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    availableChamps: ").append(toIndentedString(availableChamps)).append("\n");
    sb.append("    outrightGroups: ").append(toIndentedString(outrightGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Events");
    openapiFields.add("Sports");
    openapiFields.add("Categories");
    openapiFields.add("Champs");
    openapiFields.add("Competitors");
    openapiFields.add("Markets");
    openapiFields.add("Odds");
    openapiFields.add("Headers");
    openapiFields.add("AvailableChamps");
    openapiFields.add("OutrightGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Events");
    openapiRequiredFields.add("Sports");
    openapiRequiredFields.add("Categories");
    openapiRequiredFields.add("Champs");
    openapiRequiredFields.add("Competitors");
    openapiRequiredFields.add("Markets");
    openapiRequiredFields.add("Odds");
    openapiRequiredFields.add("Headers");
    openapiRequiredFields.add("AvailableChamps");
    openapiRequiredFields.add("OutrightGroups");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetEventsByChampResults
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEventsByChampResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEventsByChampResults is not found in the empty JSON string", GetEventsByChampResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEventsByChampResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEventsByChampResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetEventsByChampResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Events` to be an array in the JSON string but got `%s`", jsonObj.get("Events").toString()));
      }

      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("Events");
      // validate the required field `Events` (array)
      for (int i = 0; i < jsonArrayevents.size(); i++) {
        SportEvent.validateJsonElement(jsonArrayevents.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Sports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sports` to be an array in the JSON string but got `%s`", jsonObj.get("Sports").toString()));
      }

      JsonArray jsonArraysports = jsonObj.getAsJsonArray("Sports");
      // validate the required field `Sports` (array)
      for (int i = 0; i < jsonArraysports.size(); i++) {
        SportNodeWithChildIds.validateJsonElement(jsonArraysports.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Categories` to be an array in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("Categories");
      // validate the required field `Categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        CategoryNodeWithChildIds.validateJsonElement(jsonArraycategories.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Champs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Champs` to be an array in the JSON string but got `%s`", jsonObj.get("Champs").toString()));
      }

      JsonArray jsonArraychamps = jsonObj.getAsJsonArray("Champs");
      // validate the required field `Champs` (array)
      for (int i = 0; i < jsonArraychamps.size(); i++) {
        ChampionshipNode.validateJsonElement(jsonArraychamps.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Competitors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
      }

      JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
      // validate the required field `Competitors` (array)
      for (int i = 0; i < jsonArraycompetitors.size(); i++) {
        Competitor.validateJsonElement(jsonArraycompetitors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Markets` to be an array in the JSON string but got `%s`", jsonObj.get("Markets").toString()));
      }

      JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("Markets");
      // validate the required field `Markets` (array)
      for (int i = 0; i < jsonArraymarkets.size(); i++) {
        Market.validateJsonElement(jsonArraymarkets.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Odds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Odds` to be an array in the JSON string but got `%s`", jsonObj.get("Odds").toString()));
      }

      JsonArray jsonArrayodds = jsonObj.getAsJsonArray("Odds");
      // validate the required field `Odds` (array)
      for (int i = 0; i < jsonArrayodds.size(); i++) {
        Odd.validateJsonElement(jsonArrayodds.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Headers` to be an array in the JSON string but got `%s`", jsonObj.get("Headers").toString()));
      }

      JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("Headers");
      // validate the required field `Headers` (array)
      for (int i = 0; i < jsonArrayheaders.size(); i++) {
        Header.validateJsonElement(jsonArrayheaders.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("AvailableChamps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AvailableChamps` to be an array in the JSON string but got `%s`", jsonObj.get("AvailableChamps").toString()));
      }

      JsonArray jsonArrayavailableChamps = jsonObj.getAsJsonArray("AvailableChamps");
      // validate the required field `AvailableChamps` (array)
      for (int i = 0; i < jsonArrayavailableChamps.size(); i++) {
        ChampionshipNode.validateJsonElement(jsonArrayavailableChamps.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("OutrightGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutrightGroups` to be an array in the JSON string but got `%s`", jsonObj.get("OutrightGroups").toString()));
      }

      JsonArray jsonArrayoutrightGroups = jsonObj.getAsJsonArray("OutrightGroups");
      // validate the required field `OutrightGroups` (array)
      for (int i = 0; i < jsonArrayoutrightGroups.size(); i++) {
        OutrightGroupPerChamp.validateJsonElement(jsonArrayoutrightGroups.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEventsByChampResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEventsByChampResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEventsByChampResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEventsByChampResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEventsByChampResults>() {
           @Override
           public void write(JsonWriter out, GetEventsByChampResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEventsByChampResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetEventsByChampResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetEventsByChampResults
  * @throws IOException if the JSON string is invalid with respect to GetEventsByChampResults
  */
  public static GetEventsByChampResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEventsByChampResults.class);
  }

 /**
  * Convert an instance of GetEventsByChampResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

