/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * ChampionshipNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class ChampionshipNode {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON_NAME = "IconName";
  @SerializedName(SERIALIZED_NAME_ICON_NAME)
  private String iconName;

  public static final String SERIALIZED_NAME_HAS_LIVE_EVENTS = "HasLiveEvents";
  @SerializedName(SERIALIZED_NAME_HAS_LIVE_EVENTS)
  private Boolean hasLiveEvents;

  public static final String SERIALIZED_NAME_CHAMP_IDS = "ChampIds";
  @SerializedName(SERIALIZED_NAME_CHAMP_IDS)
  private List<Long> champIds;

  public static final String SERIALIZED_NAME_OFFERS = "Offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<OfferTypeParameter> offers;

  public ChampionshipNode() {
  }

  public ChampionshipNode(
     Long id, 
     String name, 
     String iconName
  ) {
    this();
    this.id = id;
    this.name = name;
    this.iconName = iconName;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



   /**
   * Get iconName
   * @return iconName
  **/
  @javax.annotation.Nullable
  public String getIconName() {
    return iconName;
  }



  public ChampionshipNode hasLiveEvents(Boolean hasLiveEvents) {
    this.hasLiveEvents = hasLiveEvents;
    return this;
  }

   /**
   * Get hasLiveEvents
   * @return hasLiveEvents
  **/
  @javax.annotation.Nonnull
  public Boolean getHasLiveEvents() {
    return hasLiveEvents;
  }

  public void setHasLiveEvents(Boolean hasLiveEvents) {
    this.hasLiveEvents = hasLiveEvents;
  }


  public ChampionshipNode champIds(List<Long> champIds) {
    this.champIds = champIds;
    return this;
  }

  public ChampionshipNode addChampIdsItem(Long champIdsItem) {
    if (this.champIds == null) {
      this.champIds = new ArrayList<>();
    }
    this.champIds.add(champIdsItem);
    return this;
  }

   /**
   * Get champIds
   * @return champIds
  **/
  @javax.annotation.Nullable
  public List<Long> getChampIds() {
    return champIds;
  }

  public void setChampIds(List<Long> champIds) {
    this.champIds = champIds;
  }


  public ChampionshipNode offers(List<OfferTypeParameter> offers) {
    this.offers = offers;
    return this;
  }

  public ChampionshipNode addOffersItem(OfferTypeParameter offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Get offers
   * @return offers
  **/
  @javax.annotation.Nullable
  public List<OfferTypeParameter> getOffers() {
    return offers;
  }

  public void setOffers(List<OfferTypeParameter> offers) {
    this.offers = offers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChampionshipNode championshipNode = (ChampionshipNode) o;
    return Objects.equals(this.id, championshipNode.id) &&
        Objects.equals(this.name, championshipNode.name) &&
        Objects.equals(this.iconName, championshipNode.iconName) &&
        Objects.equals(this.hasLiveEvents, championshipNode.hasLiveEvents) &&
        Objects.equals(this.champIds, championshipNode.champIds) &&
        Objects.equals(this.offers, championshipNode.offers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, iconName, hasLiveEvents, champIds, offers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChampionshipNode {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    iconName: ").append(toIndentedString(iconName)).append("\n");
    sb.append("    hasLiveEvents: ").append(toIndentedString(hasLiveEvents)).append("\n");
    sb.append("    champIds: ").append(toIndentedString(champIds)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("IconName");
    openapiFields.add("HasLiveEvents");
    openapiFields.add("ChampIds");
    openapiFields.add("Offers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("HasLiveEvents");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChampionshipNode
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChampionshipNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChampionshipNode is not found in the empty JSON string", ChampionshipNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChampionshipNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChampionshipNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChampionshipNode.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("IconName") != null && !jsonObj.get("IconName").isJsonNull()) && !jsonObj.get("IconName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IconName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IconName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ChampIds") != null && !jsonObj.get("ChampIds").isJsonNull() && !jsonObj.get("ChampIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampIds` to be an array in the JSON string but got `%s`", jsonObj.get("ChampIds").toString()));
      }
      if (jsonObj.get("Offers") != null && !jsonObj.get("Offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("Offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Offers` to be an array in the JSON string but got `%s`", jsonObj.get("Offers").toString()));
          }

          // validate the optional field `Offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            OfferTypeParameter.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChampionshipNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChampionshipNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChampionshipNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChampionshipNode.class));

       return (TypeAdapter<T>) new TypeAdapter<ChampionshipNode>() {
           @Override
           public void write(JsonWriter out, ChampionshipNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChampionshipNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChampionshipNode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChampionshipNode
  * @throws IOException if the JSON string is invalid with respect to ChampionshipNode
  */
  public static ChampionshipNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChampionshipNode.class);
  }

 /**
  * Convert an instance of ChampionshipNode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

