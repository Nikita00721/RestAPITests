/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * SportEventInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class SportEventInfo {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_CAT_ID = "CatId";
  @SerializedName(SERIALIZED_NAME_CAT_ID)
  private Integer catId;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Long champId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EventStatus status;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_COMPETITOR_IDS = "CompetitorIds";
  @SerializedName(SERIALIZED_NAME_COMPETITOR_IDS)
  private List<Long> competitorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIVE_TIME = "LiveTime";
  @SerializedName(SERIALIZED_NAME_LIVE_TIME)
  private String liveTime;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private List<Integer> score;

  public static final String SERIALIZED_NAME_L_M_T = "LMT";
  @SerializedName(SERIALIZED_NAME_L_M_T)
  private LMTProvider LMT;

  public static final String SERIALIZED_NAME_SCORE_BOARD = "ScoreBoard";
  @SerializedName(SERIALIZED_NAME_SCORE_BOARD)
  private LMTProvider scoreBoard;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "ExtraInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  private String extraInfo;

  public static final String SERIALIZED_NAME_VARIANT = "Variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private ScoreboardVariant variant;

  public static final String SERIALIZED_NAME_RC = "rc";
  @SerializedName(SERIALIZED_NAME_RC)
  private Boolean rc;

  public SportEventInfo() {
  }

  public SportEventInfo(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public SportEventInfo sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public SportEventInfo catId(Integer catId) {
    this.catId = catId;
    return this;
  }

   /**
   * Get catId
   * @return catId
  **/
  @javax.annotation.Nonnull
  public Integer getCatId() {
    return catId;
  }

  public void setCatId(Integer catId) {
    this.catId = catId;
  }


  public SportEventInfo champId(Long champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nonnull
  public Long getChampId() {
    return champId;
  }

  public void setChampId(Long champId) {
    this.champId = champId;
  }


  public SportEventInfo status(EventStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public EventStatus getStatus() {
    return status;
  }

  public void setStatus(EventStatus status) {
    this.status = status;
  }


  public SportEventInfo startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public SportEventInfo competitorIds(List<Long> competitorIds) {
    this.competitorIds = competitorIds;
    return this;
  }

  public SportEventInfo addCompetitorIdsItem(Long competitorIdsItem) {
    if (this.competitorIds == null) {
      this.competitorIds = new ArrayList<>();
    }
    this.competitorIds.add(competitorIdsItem);
    return this;
  }

   /**
   * Get competitorIds
   * @return competitorIds
  **/
  @javax.annotation.Nonnull
  public List<Long> getCompetitorIds() {
    return competitorIds;
  }

  public void setCompetitorIds(List<Long> competitorIds) {
    this.competitorIds = competitorIds;
  }


  public SportEventInfo liveTime(String liveTime) {
    this.liveTime = liveTime;
    return this;
  }

   /**
   * Get liveTime
   * @return liveTime
  **/
  @javax.annotation.Nullable
  public String getLiveTime() {
    return liveTime;
  }

  public void setLiveTime(String liveTime) {
    this.liveTime = liveTime;
  }


  public SportEventInfo score(List<Integer> score) {
    this.score = score;
    return this;
  }

  public SportEventInfo addScoreItem(Integer scoreItem) {
    if (this.score == null) {
      this.score = new ArrayList<>();
    }
    this.score.add(scoreItem);
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  public List<Integer> getScore() {
    return score;
  }

  public void setScore(List<Integer> score) {
    this.score = score;
  }


  public SportEventInfo LMT(LMTProvider LMT) {
    this.LMT = LMT;
    return this;
  }

   /**
   * Get LMT
   * @return LMT
  **/
  @javax.annotation.Nullable
  public LMTProvider getLMT() {
    return LMT;
  }

  public void setLMT(LMTProvider LMT) {
    this.LMT = LMT;
  }


  public SportEventInfo scoreBoard(LMTProvider scoreBoard) {
    this.scoreBoard = scoreBoard;
    return this;
  }

   /**
   * Get scoreBoard
   * @return scoreBoard
  **/
  @javax.annotation.Nullable
  public LMTProvider getScoreBoard() {
    return scoreBoard;
  }

  public void setScoreBoard(LMTProvider scoreBoard) {
    this.scoreBoard = scoreBoard;
  }


  public SportEventInfo endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public SportEventInfo extraInfo(String extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

   /**
   * Get extraInfo
   * @return extraInfo
  **/
  @javax.annotation.Nullable
  public String getExtraInfo() {
    return extraInfo;
  }

  public void setExtraInfo(String extraInfo) {
    this.extraInfo = extraInfo;
  }


  public SportEventInfo variant(ScoreboardVariant variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Get variant
   * @return variant
  **/
  @javax.annotation.Nullable
  public ScoreboardVariant getVariant() {
    return variant;
  }

  public void setVariant(ScoreboardVariant variant) {
    this.variant = variant;
  }


  public SportEventInfo rc(Boolean rc) {
    this.rc = rc;
    return this;
  }

   /**
   * Get rc
   * @return rc
  **/
  @javax.annotation.Nullable
  public Boolean getRc() {
    return rc;
  }

  public void setRc(Boolean rc) {
    this.rc = rc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SportEventInfo sportEventInfo = (SportEventInfo) o;
    return Objects.equals(this.id, sportEventInfo.id) &&
        Objects.equals(this.name, sportEventInfo.name) &&
        Objects.equals(this.sportId, sportEventInfo.sportId) &&
        Objects.equals(this.catId, sportEventInfo.catId) &&
        Objects.equals(this.champId, sportEventInfo.champId) &&
        Objects.equals(this.status, sportEventInfo.status) &&
        Objects.equals(this.startDate, sportEventInfo.startDate) &&
        Objects.equals(this.competitorIds, sportEventInfo.competitorIds) &&
        Objects.equals(this.liveTime, sportEventInfo.liveTime) &&
        Objects.equals(this.score, sportEventInfo.score) &&
        Objects.equals(this.LMT, sportEventInfo.LMT) &&
        Objects.equals(this.scoreBoard, sportEventInfo.scoreBoard) &&
        Objects.equals(this.endDate, sportEventInfo.endDate) &&
        Objects.equals(this.extraInfo, sportEventInfo.extraInfo) &&
        Objects.equals(this.variant, sportEventInfo.variant) &&
        Objects.equals(this.rc, sportEventInfo.rc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, sportId, catId, champId, status, startDate, competitorIds, liveTime, score, LMT, scoreBoard, endDate, extraInfo, variant, rc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SportEventInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    catId: ").append(toIndentedString(catId)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    competitorIds: ").append(toIndentedString(competitorIds)).append("\n");
    sb.append("    liveTime: ").append(toIndentedString(liveTime)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    LMT: ").append(toIndentedString(LMT)).append("\n");
    sb.append("    scoreBoard: ").append(toIndentedString(scoreBoard)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    rc: ").append(toIndentedString(rc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("SportId");
    openapiFields.add("CatId");
    openapiFields.add("ChampId");
    openapiFields.add("Status");
    openapiFields.add("StartDate");
    openapiFields.add("CompetitorIds");
    openapiFields.add("LiveTime");
    openapiFields.add("Score");
    openapiFields.add("LMT");
    openapiFields.add("ScoreBoard");
    openapiFields.add("EndDate");
    openapiFields.add("ExtraInfo");
    openapiFields.add("Variant");
    openapiFields.add("rc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("CatId");
    openapiRequiredFields.add("ChampId");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("CompetitorIds");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SportEventInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SportEventInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SportEventInfo is not found in the empty JSON string", SportEventInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SportEventInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SportEventInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SportEventInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the required field `Status`
      EventStatus.validateJsonElement(jsonObj.get("Status"));
      // ensure the required json array is present
      if (jsonObj.get("CompetitorIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("CompetitorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompetitorIds` to be an array in the JSON string but got `%s`", jsonObj.get("CompetitorIds").toString()));
      }
      if ((jsonObj.get("LiveTime") != null && !jsonObj.get("LiveTime").isJsonNull()) && !jsonObj.get("LiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull() && !jsonObj.get("Score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be an array in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      // validate the optional field `LMT`
      if (jsonObj.get("LMT") != null && !jsonObj.get("LMT").isJsonNull()) {
        LMTProvider.validateJsonElement(jsonObj.get("LMT"));
      }
      // validate the optional field `ScoreBoard`
      if (jsonObj.get("ScoreBoard") != null && !jsonObj.get("ScoreBoard").isJsonNull()) {
        LMTProvider.validateJsonElement(jsonObj.get("ScoreBoard"));
      }
      if ((jsonObj.get("ExtraInfo") != null && !jsonObj.get("ExtraInfo").isJsonNull()) && !jsonObj.get("ExtraInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraInfo").toString()));
      }
      // validate the optional field `Variant`
      if (jsonObj.get("Variant") != null && !jsonObj.get("Variant").isJsonNull()) {
        ScoreboardVariant.validateJsonElement(jsonObj.get("Variant"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SportEventInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SportEventInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SportEventInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SportEventInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SportEventInfo>() {
           @Override
           public void write(JsonWriter out, SportEventInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SportEventInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SportEventInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SportEventInfo
  * @throws IOException if the JSON string is invalid with respect to SportEventInfo
  */
  public static SportEventInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SportEventInfo.class);
  }

 /**
  * Convert an instance of SportEventInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

