/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * TotoCampaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class TotoCampaign {
  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "CampaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private Integer campaignId;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_PAYOUT = "Payout";
  @SerializedName(SERIALIZED_NAME_PAYOUT)
  private Double payout;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private List<TotoGame> games = new ArrayList<>();

  public TotoCampaign() {
  }

  public TotoCampaign campaignId(Integer campaignId) {
    this.campaignId = campaignId;
    return this;
  }

   /**
   * Get campaignId
   * @return campaignId
  **/
  @javax.annotation.Nonnull
  public Integer getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(Integer campaignId) {
    this.campaignId = campaignId;
  }


  public TotoCampaign sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public TotoCampaign name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TotoCampaign startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public TotoCampaign payout(Double payout) {
    this.payout = payout;
    return this;
  }

   /**
   * Get payout
   * @return payout
  **/
  @javax.annotation.Nonnull
  public Double getPayout() {
    return payout;
  }

  public void setPayout(Double payout) {
    this.payout = payout;
  }


  public TotoCampaign games(List<TotoGame> games) {
    this.games = games;
    return this;
  }

  public TotoCampaign addGamesItem(TotoGame gamesItem) {
    if (this.games == null) {
      this.games = new ArrayList<>();
    }
    this.games.add(gamesItem);
    return this;
  }

   /**
   * Get games
   * @return games
  **/
  @javax.annotation.Nonnull
  public List<TotoGame> getGames() {
    return games;
  }

  public void setGames(List<TotoGame> games) {
    this.games = games;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotoCampaign totoCampaign = (TotoCampaign) o;
    return Objects.equals(this.campaignId, totoCampaign.campaignId) &&
        Objects.equals(this.sportId, totoCampaign.sportId) &&
        Objects.equals(this.name, totoCampaign.name) &&
        Objects.equals(this.startDate, totoCampaign.startDate) &&
        Objects.equals(this.payout, totoCampaign.payout) &&
        Objects.equals(this.games, totoCampaign.games);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaignId, sportId, name, startDate, payout, games);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotoCampaign {\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    payout: ").append(toIndentedString(payout)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CampaignId");
    openapiFields.add("SportId");
    openapiFields.add("Name");
    openapiFields.add("StartDate");
    openapiFields.add("Payout");
    openapiFields.add("Games");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CampaignId");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("Payout");
    openapiRequiredFields.add("Games");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotoCampaign
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotoCampaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotoCampaign is not found in the empty JSON string", TotoCampaign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotoCampaign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotoCampaign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotoCampaign.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Games").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Games` to be an array in the JSON string but got `%s`", jsonObj.get("Games").toString()));
      }

      JsonArray jsonArraygames = jsonObj.getAsJsonArray("Games");
      // validate the required field `Games` (array)
      for (int i = 0; i < jsonArraygames.size(); i++) {
        TotoGame.validateJsonElement(jsonArraygames.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotoCampaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotoCampaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotoCampaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotoCampaign.class));

       return (TypeAdapter<T>) new TypeAdapter<TotoCampaign>() {
           @Override
           public void write(JsonWriter out, TotoCampaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotoCampaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotoCampaign given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotoCampaign
  * @throws IOException if the JSON string is invalid with respect to TotoCampaign
  */
  public static TotoCampaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotoCampaign.class);
  }

 /**
  * Convert an instance of TotoCampaign to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

