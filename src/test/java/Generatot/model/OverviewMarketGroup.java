/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * OverviewMarketGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class OverviewMarketGroup {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MARKET_TYPE_IDS = "MarketTypeIds";
  @SerializedName(SERIALIZED_NAME_MARKET_TYPE_IDS)
  private List<Integer> marketTypeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_PERIOD = "MarketPeriod";
  @SerializedName(SERIALIZED_NAME_MARKET_PERIOD)
  private Integer marketPeriod;

  public OverviewMarketGroup() {
  }

  public OverviewMarketGroup(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public OverviewMarketGroup marketTypeIds(List<Integer> marketTypeIds) {
    this.marketTypeIds = marketTypeIds;
    return this;
  }

  public OverviewMarketGroup addMarketTypeIdsItem(Integer marketTypeIdsItem) {
    if (this.marketTypeIds == null) {
      this.marketTypeIds = new ArrayList<>();
    }
    this.marketTypeIds.add(marketTypeIdsItem);
    return this;
  }

   /**
   * Get marketTypeIds
   * @return marketTypeIds
  **/
  @javax.annotation.Nonnull
  public List<Integer> getMarketTypeIds() {
    return marketTypeIds;
  }

  public void setMarketTypeIds(List<Integer> marketTypeIds) {
    this.marketTypeIds = marketTypeIds;
  }


  public OverviewMarketGroup marketPeriod(Integer marketPeriod) {
    this.marketPeriod = marketPeriod;
    return this;
  }

   /**
   * Get marketPeriod
   * @return marketPeriod
  **/
  @javax.annotation.Nullable
  public Integer getMarketPeriod() {
    return marketPeriod;
  }

  public void setMarketPeriod(Integer marketPeriod) {
    this.marketPeriod = marketPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverviewMarketGroup overviewMarketGroup = (OverviewMarketGroup) o;
    return Objects.equals(this.id, overviewMarketGroup.id) &&
        Objects.equals(this.name, overviewMarketGroup.name) &&
        Objects.equals(this.marketTypeIds, overviewMarketGroup.marketTypeIds) &&
        Objects.equals(this.marketPeriod, overviewMarketGroup.marketPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, marketTypeIds, marketPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverviewMarketGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    marketTypeIds: ").append(toIndentedString(marketTypeIds)).append("\n");
    sb.append("    marketPeriod: ").append(toIndentedString(marketPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("MarketTypeIds");
    openapiFields.add("MarketPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("MarketTypeIds");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OverviewMarketGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OverviewMarketGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverviewMarketGroup is not found in the empty JSON string", OverviewMarketGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OverviewMarketGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OverviewMarketGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OverviewMarketGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("MarketTypeIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("MarketTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("MarketTypeIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverviewMarketGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverviewMarketGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverviewMarketGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverviewMarketGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<OverviewMarketGroup>() {
           @Override
           public void write(JsonWriter out, OverviewMarketGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OverviewMarketGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OverviewMarketGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OverviewMarketGroup
  * @throws IOException if the JSON string is invalid with respect to OverviewMarketGroup
  */
  public static OverviewMarketGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverviewMarketGroup.class);
  }

 /**
  * Convert an instance of OverviewMarketGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

