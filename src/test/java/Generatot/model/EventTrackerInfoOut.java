/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * EventTrackerInfoOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class EventTrackerInfoOut {
  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Long eventId;

  public static final String SERIALIZED_NAME_LIVE_CURRENT_TIME = "LiveCurrentTime";
  @SerializedName(SERIALIZED_NAME_LIVE_CURRENT_TIME)
  private String liveCurrentTime;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private ClientEventTypes eventType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<CompetitorOut> competitors;

  public static final String SERIALIZED_NAME_LOTTERY_PICK_N_PRICES = "LotteryPickNPrices";
  @SerializedName(SERIALIZED_NAME_LOTTERY_PICK_N_PRICES)
  private List<LotteryPickNPriceOut> lotteryPickNPrices;

  public static final String SERIALIZED_NAME_CHAMP_NAME = "ChampName";
  @SerializedName(SERIALIZED_NAME_CHAMP_NAME)
  private String champName;

  public static final String SERIALIZED_NAME_PITCHER_INFO = "PitcherInfo";
  @SerializedName(SERIALIZED_NAME_PITCHER_INFO)
  private IPitcherInfo pitcherInfo;

  public static final String SERIALIZED_NAME_LIVE_SCORE = "LiveScore";
  @SerializedName(SERIALIZED_NAME_LIVE_SCORE)
  private String liveScore;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private Integer server;

  public static final String SERIALIZED_NAME_POINT_SCORE = "PointScore";
  @SerializedName(SERIALIZED_NAME_POINT_SCORE)
  private String pointScore;

  public static final String SERIALIZED_NAME_CURRENT_SET_SCORE = "CurrentSetScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_SET_SCORE)
  private String currentSetScore;

  public static final String SERIALIZED_NAME_EXT_ID = "ExtId";
  @SerializedName(SERIALIZED_NAME_EXT_ID)
  private String extId;

  public static final String SERIALIZED_NAME_EXTRA_EVENT_INFO = "ExtraEventInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_EVENT_INFO)
  private String extraEventInfo;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_R_C = "RC";
  @SerializedName(SERIALIZED_NAME_R_C)
  private Boolean RC;

  public EventTrackerInfoOut() {
  }

  public EventTrackerInfoOut eventId(Long eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nonnull
  public Long getEventId() {
    return eventId;
  }

  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }


  public EventTrackerInfoOut liveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
    return this;
  }

   /**
   * Get liveCurrentTime
   * @return liveCurrentTime
  **/
  @javax.annotation.Nullable
  public String getLiveCurrentTime() {
    return liveCurrentTime;
  }

  public void setLiveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
  }


  public EventTrackerInfoOut eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public EventTrackerInfoOut eventType(ClientEventTypes eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public ClientEventTypes getEventType() {
    return eventType;
  }

  public void setEventType(ClientEventTypes eventType) {
    this.eventType = eventType;
  }


  public EventTrackerInfoOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventTrackerInfoOut competitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
    return this;
  }

  public EventTrackerInfoOut addCompetitorsItem(CompetitorOut competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<CompetitorOut> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
  }


  public EventTrackerInfoOut lotteryPickNPrices(List<LotteryPickNPriceOut> lotteryPickNPrices) {
    this.lotteryPickNPrices = lotteryPickNPrices;
    return this;
  }

  public EventTrackerInfoOut addLotteryPickNPricesItem(LotteryPickNPriceOut lotteryPickNPricesItem) {
    if (this.lotteryPickNPrices == null) {
      this.lotteryPickNPrices = new ArrayList<>();
    }
    this.lotteryPickNPrices.add(lotteryPickNPricesItem);
    return this;
  }

   /**
   * Get lotteryPickNPrices
   * @return lotteryPickNPrices
  **/
  @javax.annotation.Nullable
  public List<LotteryPickNPriceOut> getLotteryPickNPrices() {
    return lotteryPickNPrices;
  }

  public void setLotteryPickNPrices(List<LotteryPickNPriceOut> lotteryPickNPrices) {
    this.lotteryPickNPrices = lotteryPickNPrices;
  }


  public EventTrackerInfoOut champName(String champName) {
    this.champName = champName;
    return this;
  }

   /**
   * Get champName
   * @return champName
  **/
  @javax.annotation.Nullable
  public String getChampName() {
    return champName;
  }

  public void setChampName(String champName) {
    this.champName = champName;
  }


  public EventTrackerInfoOut pitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
    return this;
  }

   /**
   * Get pitcherInfo
   * @return pitcherInfo
  **/
  @javax.annotation.Nullable
  public IPitcherInfo getPitcherInfo() {
    return pitcherInfo;
  }

  public void setPitcherInfo(IPitcherInfo pitcherInfo) {
    this.pitcherInfo = pitcherInfo;
  }


  public EventTrackerInfoOut liveScore(String liveScore) {
    this.liveScore = liveScore;
    return this;
  }

   /**
   * Get liveScore
   * @return liveScore
  **/
  @javax.annotation.Nullable
  public String getLiveScore() {
    return liveScore;
  }

  public void setLiveScore(String liveScore) {
    this.liveScore = liveScore;
  }


  public EventTrackerInfoOut server(Integer server) {
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  public Integer getServer() {
    return server;
  }

  public void setServer(Integer server) {
    this.server = server;
  }


  public EventTrackerInfoOut pointScore(String pointScore) {
    this.pointScore = pointScore;
    return this;
  }

   /**
   * Get pointScore
   * @return pointScore
  **/
  @javax.annotation.Nullable
  public String getPointScore() {
    return pointScore;
  }

  public void setPointScore(String pointScore) {
    this.pointScore = pointScore;
  }


  public EventTrackerInfoOut currentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
    return this;
  }

   /**
   * Get currentSetScore
   * @return currentSetScore
  **/
  @javax.annotation.Nullable
  public String getCurrentSetScore() {
    return currentSetScore;
  }

  public void setCurrentSetScore(String currentSetScore) {
    this.currentSetScore = currentSetScore;
  }


  public EventTrackerInfoOut extId(String extId) {
    this.extId = extId;
    return this;
  }

   /**
   * Get extId
   * @return extId
  **/
  @javax.annotation.Nullable
  public String getExtId() {
    return extId;
  }

  public void setExtId(String extId) {
    this.extId = extId;
  }


  public EventTrackerInfoOut extraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
    return this;
  }

   /**
   * Get extraEventInfo
   * @return extraEventInfo
  **/
  @javax.annotation.Nullable
  public String getExtraEventInfo() {
    return extraEventInfo;
  }

  public void setExtraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
  }


  public EventTrackerInfoOut endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public EventTrackerInfoOut RC(Boolean RC) {
    this.RC = RC;
    return this;
  }

   /**
   * Get RC
   * @return RC
  **/
  @javax.annotation.Nullable
  public Boolean getRC() {
    return RC;
  }

  public void setRC(Boolean RC) {
    this.RC = RC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTrackerInfoOut eventTrackerInfoOut = (EventTrackerInfoOut) o;
    return Objects.equals(this.eventId, eventTrackerInfoOut.eventId) &&
        Objects.equals(this.liveCurrentTime, eventTrackerInfoOut.liveCurrentTime) &&
        Objects.equals(this.eventDate, eventTrackerInfoOut.eventDate) &&
        Objects.equals(this.eventType, eventTrackerInfoOut.eventType) &&
        Objects.equals(this.name, eventTrackerInfoOut.name) &&
        Objects.equals(this.competitors, eventTrackerInfoOut.competitors) &&
        Objects.equals(this.lotteryPickNPrices, eventTrackerInfoOut.lotteryPickNPrices) &&
        Objects.equals(this.champName, eventTrackerInfoOut.champName) &&
        Objects.equals(this.pitcherInfo, eventTrackerInfoOut.pitcherInfo) &&
        Objects.equals(this.liveScore, eventTrackerInfoOut.liveScore) &&
        Objects.equals(this.server, eventTrackerInfoOut.server) &&
        Objects.equals(this.pointScore, eventTrackerInfoOut.pointScore) &&
        Objects.equals(this.currentSetScore, eventTrackerInfoOut.currentSetScore) &&
        Objects.equals(this.extId, eventTrackerInfoOut.extId) &&
        Objects.equals(this.extraEventInfo, eventTrackerInfoOut.extraEventInfo) &&
        Objects.equals(this.endDate, eventTrackerInfoOut.endDate) &&
        Objects.equals(this.RC, eventTrackerInfoOut.RC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, liveCurrentTime, eventDate, eventType, name, competitors, lotteryPickNPrices, champName, pitcherInfo, liveScore, server, pointScore, currentSetScore, extId, extraEventInfo, endDate, RC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTrackerInfoOut {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    liveCurrentTime: ").append(toIndentedString(liveCurrentTime)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    lotteryPickNPrices: ").append(toIndentedString(lotteryPickNPrices)).append("\n");
    sb.append("    champName: ").append(toIndentedString(champName)).append("\n");
    sb.append("    pitcherInfo: ").append(toIndentedString(pitcherInfo)).append("\n");
    sb.append("    liveScore: ").append(toIndentedString(liveScore)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    pointScore: ").append(toIndentedString(pointScore)).append("\n");
    sb.append("    currentSetScore: ").append(toIndentedString(currentSetScore)).append("\n");
    sb.append("    extId: ").append(toIndentedString(extId)).append("\n");
    sb.append("    extraEventInfo: ").append(toIndentedString(extraEventInfo)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    RC: ").append(toIndentedString(RC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventId");
    openapiFields.add("LiveCurrentTime");
    openapiFields.add("EventDate");
    openapiFields.add("EventType");
    openapiFields.add("Name");
    openapiFields.add("Competitors");
    openapiFields.add("LotteryPickNPrices");
    openapiFields.add("ChampName");
    openapiFields.add("PitcherInfo");
    openapiFields.add("LiveScore");
    openapiFields.add("Server");
    openapiFields.add("PointScore");
    openapiFields.add("CurrentSetScore");
    openapiFields.add("ExtId");
    openapiFields.add("ExtraEventInfo");
    openapiFields.add("EndDate");
    openapiFields.add("RC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EventId");
    openapiRequiredFields.add("EventDate");
    openapiRequiredFields.add("EventType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventTrackerInfoOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTrackerInfoOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTrackerInfoOut is not found in the empty JSON string", EventTrackerInfoOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventTrackerInfoOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventTrackerInfoOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventTrackerInfoOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LiveCurrentTime") != null && !jsonObj.get("LiveCurrentTime").isJsonNull()) && !jsonObj.get("LiveCurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveCurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveCurrentTime").toString()));
      }
      // validate the required field `EventType`
      ClientEventTypes.validateJsonElement(jsonObj.get("EventType"));
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull()) {
        JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
        if (jsonArraycompetitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Competitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
          }

          // validate the optional field `Competitors` (array)
          for (int i = 0; i < jsonArraycompetitors.size(); i++) {
            CompetitorOut.validateJsonElement(jsonArraycompetitors.get(i));
          };
        }
      }
      if (jsonObj.get("LotteryPickNPrices") != null && !jsonObj.get("LotteryPickNPrices").isJsonNull()) {
        JsonArray jsonArraylotteryPickNPrices = jsonObj.getAsJsonArray("LotteryPickNPrices");
        if (jsonArraylotteryPickNPrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LotteryPickNPrices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LotteryPickNPrices` to be an array in the JSON string but got `%s`", jsonObj.get("LotteryPickNPrices").toString()));
          }

          // validate the optional field `LotteryPickNPrices` (array)
          for (int i = 0; i < jsonArraylotteryPickNPrices.size(); i++) {
            LotteryPickNPriceOut.validateJsonElement(jsonArraylotteryPickNPrices.get(i));
          };
        }
      }
      if ((jsonObj.get("ChampName") != null && !jsonObj.get("ChampName").isJsonNull()) && !jsonObj.get("ChampName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampName").toString()));
      }
      // validate the optional field `PitcherInfo`
      if (jsonObj.get("PitcherInfo") != null && !jsonObj.get("PitcherInfo").isJsonNull()) {
        IPitcherInfo.validateJsonElement(jsonObj.get("PitcherInfo"));
      }
      if ((jsonObj.get("LiveScore") != null && !jsonObj.get("LiveScore").isJsonNull()) && !jsonObj.get("LiveScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveScore").toString()));
      }
      if ((jsonObj.get("PointScore") != null && !jsonObj.get("PointScore").isJsonNull()) && !jsonObj.get("PointScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointScore").toString()));
      }
      if ((jsonObj.get("CurrentSetScore") != null && !jsonObj.get("CurrentSetScore").isJsonNull()) && !jsonObj.get("CurrentSetScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentSetScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentSetScore").toString()));
      }
      if ((jsonObj.get("ExtId") != null && !jsonObj.get("ExtId").isJsonNull()) && !jsonObj.get("ExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtId").toString()));
      }
      if ((jsonObj.get("ExtraEventInfo") != null && !jsonObj.get("ExtraEventInfo").isJsonNull()) && !jsonObj.get("ExtraEventInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraEventInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraEventInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTrackerInfoOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTrackerInfoOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTrackerInfoOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTrackerInfoOut.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTrackerInfoOut>() {
           @Override
           public void write(JsonWriter out, EventTrackerInfoOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTrackerInfoOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventTrackerInfoOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventTrackerInfoOut
  * @throws IOException if the JSON string is invalid with respect to EventTrackerInfoOut
  */
  public static EventTrackerInfoOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTrackerInfoOut.class);
  }

 /**
  * Convert an instance of EventTrackerInfoOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

