/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * EventExternalInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class EventExternalInfo {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_EVENT_EXT_ID = "EventExtId";
  @SerializedName(SERIALIZED_NAME_EVENT_EXT_ID)
  private String eventExtId;

  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_IS_LIVE = "IsLive";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_IS_LIVE_STREAM = "IsLiveStream";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_STREAM)
  private Boolean isLiveStream;

  public static final String SERIALIZED_NAME_STREAM_PROVIDERS = "StreamProviders";
  @SerializedName(SERIALIZED_NAME_STREAM_PROVIDERS)
  private List<Integer> streamProviders;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<CompetitorOut> competitors;

  public static final String SERIALIZED_NAME_LMT = "Lmt";
  @SerializedName(SERIALIZED_NAME_LMT)
  private IWidgetProvider lmt;

  public static final String SERIALIZED_NAME_SCORE_BOARD = "ScoreBoard";
  @SerializedName(SERIALIZED_NAME_SCORE_BOARD)
  private IWidgetProvider scoreBoard;

  public static final String SERIALIZED_NAME_EXTRA_EVENT_INFO = "ExtraEventInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_EVENT_INFO)
  private String extraEventInfo;

  public static final String SERIALIZED_NAME_SPORT_NAME = "SportName";
  @SerializedName(SERIALIZED_NAME_SPORT_NAME)
  private String sportName;

  public static final String SERIALIZED_NAME_CHAMPIONSHIP_NAME = "ChampionshipName";
  @SerializedName(SERIALIZED_NAME_CHAMPIONSHIP_NAME)
  private String championshipName;

  public static final String SERIALIZED_NAME_R_C = "RC";
  @SerializedName(SERIALIZED_NAME_R_C)
  private Boolean RC;

  public EventExternalInfo() {
  }

  public EventExternalInfo id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public EventExternalInfo eventExtId(String eventExtId) {
    this.eventExtId = eventExtId;
    return this;
  }

   /**
   * Get eventExtId
   * @return eventExtId
  **/
  @javax.annotation.Nullable
  public String getEventExtId() {
    return eventExtId;
  }

  public void setEventExtId(String eventExtId) {
    this.eventExtId = eventExtId;
  }


  public EventExternalInfo sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public EventExternalInfo isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

   /**
   * Get isLive
   * @return isLive
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public EventExternalInfo isLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
    return this;
  }

   /**
   * Get isLiveStream
   * @return isLiveStream
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveStream() {
    return isLiveStream;
  }

  public void setIsLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
  }


  public EventExternalInfo streamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
    return this;
  }

  public EventExternalInfo addStreamProvidersItem(Integer streamProvidersItem) {
    if (this.streamProviders == null) {
      this.streamProviders = new ArrayList<>();
    }
    this.streamProviders.add(streamProvidersItem);
    return this;
  }

   /**
   * Get streamProviders
   * @return streamProviders
  **/
  @javax.annotation.Nullable
  public List<Integer> getStreamProviders() {
    return streamProviders;
  }

  public void setStreamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
  }


  public EventExternalInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventExternalInfo competitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
    return this;
  }

  public EventExternalInfo addCompetitorsItem(CompetitorOut competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<CompetitorOut> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
  }


  public EventExternalInfo lmt(IWidgetProvider lmt) {
    this.lmt = lmt;
    return this;
  }

   /**
   * Get lmt
   * @return lmt
  **/
  @javax.annotation.Nullable
  public IWidgetProvider getLmt() {
    return lmt;
  }

  public void setLmt(IWidgetProvider lmt) {
    this.lmt = lmt;
  }


  public EventExternalInfo scoreBoard(IWidgetProvider scoreBoard) {
    this.scoreBoard = scoreBoard;
    return this;
  }

   /**
   * Get scoreBoard
   * @return scoreBoard
  **/
  @javax.annotation.Nullable
  public IWidgetProvider getScoreBoard() {
    return scoreBoard;
  }

  public void setScoreBoard(IWidgetProvider scoreBoard) {
    this.scoreBoard = scoreBoard;
  }


  public EventExternalInfo extraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
    return this;
  }

   /**
   * Get extraEventInfo
   * @return extraEventInfo
  **/
  @javax.annotation.Nullable
  public String getExtraEventInfo() {
    return extraEventInfo;
  }

  public void setExtraEventInfo(String extraEventInfo) {
    this.extraEventInfo = extraEventInfo;
  }


  public EventExternalInfo sportName(String sportName) {
    this.sportName = sportName;
    return this;
  }

   /**
   * Get sportName
   * @return sportName
  **/
  @javax.annotation.Nullable
  public String getSportName() {
    return sportName;
  }

  public void setSportName(String sportName) {
    this.sportName = sportName;
  }


  public EventExternalInfo championshipName(String championshipName) {
    this.championshipName = championshipName;
    return this;
  }

   /**
   * Get championshipName
   * @return championshipName
  **/
  @javax.annotation.Nullable
  public String getChampionshipName() {
    return championshipName;
  }

  public void setChampionshipName(String championshipName) {
    this.championshipName = championshipName;
  }


  public EventExternalInfo RC(Boolean RC) {
    this.RC = RC;
    return this;
  }

   /**
   * Get RC
   * @return RC
  **/
  @javax.annotation.Nullable
  public Boolean getRC() {
    return RC;
  }

  public void setRC(Boolean RC) {
    this.RC = RC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventExternalInfo eventExternalInfo = (EventExternalInfo) o;
    return Objects.equals(this.id, eventExternalInfo.id) &&
        Objects.equals(this.eventExtId, eventExternalInfo.eventExtId) &&
        Objects.equals(this.sportTypeId, eventExternalInfo.sportTypeId) &&
        Objects.equals(this.isLive, eventExternalInfo.isLive) &&
        Objects.equals(this.isLiveStream, eventExternalInfo.isLiveStream) &&
        Objects.equals(this.streamProviders, eventExternalInfo.streamProviders) &&
        Objects.equals(this.name, eventExternalInfo.name) &&
        Objects.equals(this.competitors, eventExternalInfo.competitors) &&
        Objects.equals(this.lmt, eventExternalInfo.lmt) &&
        Objects.equals(this.scoreBoard, eventExternalInfo.scoreBoard) &&
        Objects.equals(this.extraEventInfo, eventExternalInfo.extraEventInfo) &&
        Objects.equals(this.sportName, eventExternalInfo.sportName) &&
        Objects.equals(this.championshipName, eventExternalInfo.championshipName) &&
        Objects.equals(this.RC, eventExternalInfo.RC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, eventExtId, sportTypeId, isLive, isLiveStream, streamProviders, name, competitors, lmt, scoreBoard, extraEventInfo, sportName, championshipName, RC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventExternalInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    eventExtId: ").append(toIndentedString(eventExtId)).append("\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    isLiveStream: ").append(toIndentedString(isLiveStream)).append("\n");
    sb.append("    streamProviders: ").append(toIndentedString(streamProviders)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    lmt: ").append(toIndentedString(lmt)).append("\n");
    sb.append("    scoreBoard: ").append(toIndentedString(scoreBoard)).append("\n");
    sb.append("    extraEventInfo: ").append(toIndentedString(extraEventInfo)).append("\n");
    sb.append("    sportName: ").append(toIndentedString(sportName)).append("\n");
    sb.append("    championshipName: ").append(toIndentedString(championshipName)).append("\n");
    sb.append("    RC: ").append(toIndentedString(RC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("EventExtId");
    openapiFields.add("SportTypeId");
    openapiFields.add("IsLive");
    openapiFields.add("IsLiveStream");
    openapiFields.add("StreamProviders");
    openapiFields.add("Name");
    openapiFields.add("Competitors");
    openapiFields.add("Lmt");
    openapiFields.add("ScoreBoard");
    openapiFields.add("ExtraEventInfo");
    openapiFields.add("SportName");
    openapiFields.add("ChampionshipName");
    openapiFields.add("RC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("SportTypeId");
    openapiRequiredFields.add("IsLive");
    openapiRequiredFields.add("IsLiveStream");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventExternalInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventExternalInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventExternalInfo is not found in the empty JSON string", EventExternalInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventExternalInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventExternalInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventExternalInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EventExtId") != null && !jsonObj.get("EventExtId").isJsonNull()) && !jsonObj.get("EventExtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventExtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventExtId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StreamProviders") != null && !jsonObj.get("StreamProviders").isJsonNull() && !jsonObj.get("StreamProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamProviders` to be an array in the JSON string but got `%s`", jsonObj.get("StreamProviders").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull()) {
        JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
        if (jsonArraycompetitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Competitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
          }

          // validate the optional field `Competitors` (array)
          for (int i = 0; i < jsonArraycompetitors.size(); i++) {
            CompetitorOut.validateJsonElement(jsonArraycompetitors.get(i));
          };
        }
      }
      // validate the optional field `Lmt`
      if (jsonObj.get("Lmt") != null && !jsonObj.get("Lmt").isJsonNull()) {
        IWidgetProvider.validateJsonElement(jsonObj.get("Lmt"));
      }
      // validate the optional field `ScoreBoard`
      if (jsonObj.get("ScoreBoard") != null && !jsonObj.get("ScoreBoard").isJsonNull()) {
        IWidgetProvider.validateJsonElement(jsonObj.get("ScoreBoard"));
      }
      if ((jsonObj.get("ExtraEventInfo") != null && !jsonObj.get("ExtraEventInfo").isJsonNull()) && !jsonObj.get("ExtraEventInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraEventInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraEventInfo").toString()));
      }
      if ((jsonObj.get("SportName") != null && !jsonObj.get("SportName").isJsonNull()) && !jsonObj.get("SportName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportName").toString()));
      }
      if ((jsonObj.get("ChampionshipName") != null && !jsonObj.get("ChampionshipName").isJsonNull()) && !jsonObj.get("ChampionshipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampionshipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampionshipName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventExternalInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventExternalInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventExternalInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventExternalInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EventExternalInfo>() {
           @Override
           public void write(JsonWriter out, EventExternalInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventExternalInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventExternalInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventExternalInfo
  * @throws IOException if the JSON string is invalid with respect to EventExternalInfo
  */
  public static EventExternalInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventExternalInfo.class);
  }

 /**
  * Convert an instance of EventExternalInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

