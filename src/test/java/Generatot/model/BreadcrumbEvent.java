/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * BreadcrumbEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class BreadcrumbEvent {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_LIVE_TIME = "LiveTime";
  @SerializedName(SERIALIZED_NAME_LIVE_TIME)
  private String liveTime;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private List<Integer> score = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPETITOR_IDS = "CompetitorIds";
  @SerializedName(SERIALIZED_NAME_COMPETITOR_IDS)
  private List<Integer> competitorIds = new ArrayList<>();

  public BreadcrumbEvent() {
  }

  public BreadcrumbEvent(
     Long id, 
     String name
  ) {
    this();
    this.id = id;
    this.name = name;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }



   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }



  public BreadcrumbEvent startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public BreadcrumbEvent liveTime(String liveTime) {
    this.liveTime = liveTime;
    return this;
  }

   /**
   * Get liveTime
   * @return liveTime
  **/
  @javax.annotation.Nonnull
  public String getLiveTime() {
    return liveTime;
  }

  public void setLiveTime(String liveTime) {
    this.liveTime = liveTime;
  }


  public BreadcrumbEvent score(List<Integer> score) {
    this.score = score;
    return this;
  }

  public BreadcrumbEvent addScoreItem(Integer scoreItem) {
    if (this.score == null) {
      this.score = new ArrayList<>();
    }
    this.score.add(scoreItem);
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nonnull
  public List<Integer> getScore() {
    return score;
  }

  public void setScore(List<Integer> score) {
    this.score = score;
  }


  public BreadcrumbEvent competitorIds(List<Integer> competitorIds) {
    this.competitorIds = competitorIds;
    return this;
  }

  public BreadcrumbEvent addCompetitorIdsItem(Integer competitorIdsItem) {
    if (this.competitorIds == null) {
      this.competitorIds = new ArrayList<>();
    }
    this.competitorIds.add(competitorIdsItem);
    return this;
  }

   /**
   * Get competitorIds
   * @return competitorIds
  **/
  @javax.annotation.Nonnull
  public List<Integer> getCompetitorIds() {
    return competitorIds;
  }

  public void setCompetitorIds(List<Integer> competitorIds) {
    this.competitorIds = competitorIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreadcrumbEvent breadcrumbEvent = (BreadcrumbEvent) o;
    return Objects.equals(this.id, breadcrumbEvent.id) &&
        Objects.equals(this.name, breadcrumbEvent.name) &&
        Objects.equals(this.startDate, breadcrumbEvent.startDate) &&
        Objects.equals(this.liveTime, breadcrumbEvent.liveTime) &&
        Objects.equals(this.score, breadcrumbEvent.score) &&
        Objects.equals(this.competitorIds, breadcrumbEvent.competitorIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, startDate, liveTime, score, competitorIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreadcrumbEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    liveTime: ").append(toIndentedString(liveTime)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    competitorIds: ").append(toIndentedString(competitorIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("StartDate");
    openapiFields.add("LiveTime");
    openapiFields.add("Score");
    openapiFields.add("CompetitorIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("LiveTime");
    openapiRequiredFields.add("Score");
    openapiRequiredFields.add("CompetitorIds");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BreadcrumbEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BreadcrumbEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BreadcrumbEvent is not found in the empty JSON string", BreadcrumbEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BreadcrumbEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BreadcrumbEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BreadcrumbEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("LiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveTime").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Score") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Score` to be an array in the JSON string but got `%s`", jsonObj.get("Score").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("CompetitorIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("CompetitorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompetitorIds` to be an array in the JSON string but got `%s`", jsonObj.get("CompetitorIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BreadcrumbEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BreadcrumbEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BreadcrumbEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BreadcrumbEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<BreadcrumbEvent>() {
           @Override
           public void write(JsonWriter out, BreadcrumbEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BreadcrumbEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BreadcrumbEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BreadcrumbEvent
  * @throws IOException if the JSON string is invalid with respect to BreadcrumbEvent
  */
  public static BreadcrumbEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BreadcrumbEvent.class);
  }

 /**
  * Convert an instance of BreadcrumbEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

