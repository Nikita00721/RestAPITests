/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * SearchItemsResultOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class SearchItemsResultOut {
  public static final String SERIALIZED_NAME_EVENT_ITEMS = "EventItems";
  @SerializedName(SERIALIZED_NAME_EVENT_ITEMS)
  private List<SearchEventsResultItemOut> eventItems;

  public static final String SERIALIZED_NAME_CHAMP_ITEMS = "ChampItems";
  @SerializedName(SERIALIZED_NAME_CHAMP_ITEMS)
  private List<SearchChampsResultItemOut> champItems;

  public SearchItemsResultOut() {
  }

  public SearchItemsResultOut eventItems(List<SearchEventsResultItemOut> eventItems) {
    this.eventItems = eventItems;
    return this;
  }

  public SearchItemsResultOut addEventItemsItem(SearchEventsResultItemOut eventItemsItem) {
    if (this.eventItems == null) {
      this.eventItems = new ArrayList<>();
    }
    this.eventItems.add(eventItemsItem);
    return this;
  }

   /**
   * Get eventItems
   * @return eventItems
  **/
  @javax.annotation.Nullable
  public List<SearchEventsResultItemOut> getEventItems() {
    return eventItems;
  }

  public void setEventItems(List<SearchEventsResultItemOut> eventItems) {
    this.eventItems = eventItems;
  }


  public SearchItemsResultOut champItems(List<SearchChampsResultItemOut> champItems) {
    this.champItems = champItems;
    return this;
  }

  public SearchItemsResultOut addChampItemsItem(SearchChampsResultItemOut champItemsItem) {
    if (this.champItems == null) {
      this.champItems = new ArrayList<>();
    }
    this.champItems.add(champItemsItem);
    return this;
  }

   /**
   * Get champItems
   * @return champItems
  **/
  @javax.annotation.Nullable
  public List<SearchChampsResultItemOut> getChampItems() {
    return champItems;
  }

  public void setChampItems(List<SearchChampsResultItemOut> champItems) {
    this.champItems = champItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchItemsResultOut searchItemsResultOut = (SearchItemsResultOut) o;
    return Objects.equals(this.eventItems, searchItemsResultOut.eventItems) &&
        Objects.equals(this.champItems, searchItemsResultOut.champItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventItems, champItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchItemsResultOut {\n");
    sb.append("    eventItems: ").append(toIndentedString(eventItems)).append("\n");
    sb.append("    champItems: ").append(toIndentedString(champItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventItems");
    openapiFields.add("ChampItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchItemsResultOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchItemsResultOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchItemsResultOut is not found in the empty JSON string", SearchItemsResultOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchItemsResultOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchItemsResultOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("EventItems") != null && !jsonObj.get("EventItems").isJsonNull()) {
        JsonArray jsonArrayeventItems = jsonObj.getAsJsonArray("EventItems");
        if (jsonArrayeventItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EventItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EventItems` to be an array in the JSON string but got `%s`", jsonObj.get("EventItems").toString()));
          }

          // validate the optional field `EventItems` (array)
          for (int i = 0; i < jsonArrayeventItems.size(); i++) {
            SearchEventsResultItemOut.validateJsonElement(jsonArrayeventItems.get(i));
          };
        }
      }
      if (jsonObj.get("ChampItems") != null && !jsonObj.get("ChampItems").isJsonNull()) {
        JsonArray jsonArraychampItems = jsonObj.getAsJsonArray("ChampItems");
        if (jsonArraychampItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ChampItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChampItems` to be an array in the JSON string but got `%s`", jsonObj.get("ChampItems").toString()));
          }

          // validate the optional field `ChampItems` (array)
          for (int i = 0; i < jsonArraychampItems.size(); i++) {
            SearchChampsResultItemOut.validateJsonElement(jsonArraychampItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchItemsResultOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchItemsResultOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchItemsResultOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchItemsResultOut.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchItemsResultOut>() {
           @Override
           public void write(JsonWriter out, SearchItemsResultOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchItemsResultOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchItemsResultOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchItemsResultOut
  * @throws IOException if the JSON string is invalid with respect to SearchItemsResultOut
  */
  public static SearchItemsResultOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchItemsResultOut.class);
  }

 /**
  * Convert an instance of SearchItemsResultOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

