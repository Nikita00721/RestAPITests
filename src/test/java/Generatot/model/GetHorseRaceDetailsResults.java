/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.*;

/**
 * GetHorseRaceDetailsResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class GetHorseRaceDetailsResults {
  public static final String SERIALIZED_NAME_ODDS = "Odds";
  @SerializedName(SERIALIZED_NAME_ODDS)
  private List<HorseRaceOdd> odds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETS = "Markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<HorseRaceMarket> markets = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKET_GROUPS = "MarketGroups";
  @SerializedName(SERIALIZED_NAME_MARKET_GROUPS)
  private List<HorseRaceMarketGroup> marketGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNNERS = "Runners";
  @SerializedName(SERIALIZED_NAME_RUNNERS)
  private List<Runner> runners = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOCKEYS = "Jockeys";
  @SerializedName(SERIALIZED_NAME_JOCKEYS)
  private List<Jockey> jockeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_RACE = "Race";
  @SerializedName(SERIALIZED_NAME_RACE)
  private RaceInfo race;

  public static final String SERIALIZED_NAME_VENUE = "Venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private Venue venue;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_SPORT = "Sport";
  @SerializedName(SERIALIZED_NAME_SPORT)
  private SportNode sport;

  public static final String SERIALIZED_NAME_AR = "ar";
  @SerializedName(SERIALIZED_NAME_AR)
  private List<AvailableRace> ar = new ArrayList<>();

  public GetHorseRaceDetailsResults() {
  }

  public GetHorseRaceDetailsResults odds(List<HorseRaceOdd> odds) {
    this.odds = odds;
    return this;
  }

  public GetHorseRaceDetailsResults addOddsItem(HorseRaceOdd oddsItem) {
    if (this.odds == null) {
      this.odds = new ArrayList<>();
    }
    this.odds.add(oddsItem);
    return this;
  }

   /**
   * Get odds
   * @return odds
  **/
  @javax.annotation.Nonnull
  public List<HorseRaceOdd> getOdds() {
    return odds;
  }

  public void setOdds(List<HorseRaceOdd> odds) {
    this.odds = odds;
  }


  public GetHorseRaceDetailsResults markets(List<HorseRaceMarket> markets) {
    this.markets = markets;
    return this;
  }

  public GetHorseRaceDetailsResults addMarketsItem(HorseRaceMarket marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Get markets
   * @return markets
  **/
  @javax.annotation.Nonnull
  public List<HorseRaceMarket> getMarkets() {
    return markets;
  }

  public void setMarkets(List<HorseRaceMarket> markets) {
    this.markets = markets;
  }


  public GetHorseRaceDetailsResults marketGroups(List<HorseRaceMarketGroup> marketGroups) {
    this.marketGroups = marketGroups;
    return this;
  }

  public GetHorseRaceDetailsResults addMarketGroupsItem(HorseRaceMarketGroup marketGroupsItem) {
    if (this.marketGroups == null) {
      this.marketGroups = new ArrayList<>();
    }
    this.marketGroups.add(marketGroupsItem);
    return this;
  }

   /**
   * Get marketGroups
   * @return marketGroups
  **/
  @javax.annotation.Nonnull
  public List<HorseRaceMarketGroup> getMarketGroups() {
    return marketGroups;
  }

  public void setMarketGroups(List<HorseRaceMarketGroup> marketGroups) {
    this.marketGroups = marketGroups;
  }


  public GetHorseRaceDetailsResults runners(List<Runner> runners) {
    this.runners = runners;
    return this;
  }

  public GetHorseRaceDetailsResults addRunnersItem(Runner runnersItem) {
    if (this.runners == null) {
      this.runners = new ArrayList<>();
    }
    this.runners.add(runnersItem);
    return this;
  }

   /**
   * Get runners
   * @return runners
  **/
  @javax.annotation.Nonnull
  public List<Runner> getRunners() {
    return runners;
  }

  public void setRunners(List<Runner> runners) {
    this.runners = runners;
  }


  public GetHorseRaceDetailsResults jockeys(List<Jockey> jockeys) {
    this.jockeys = jockeys;
    return this;
  }

  public GetHorseRaceDetailsResults addJockeysItem(Jockey jockeysItem) {
    if (this.jockeys == null) {
      this.jockeys = new ArrayList<>();
    }
    this.jockeys.add(jockeysItem);
    return this;
  }

   /**
   * Get jockeys
   * @return jockeys
  **/
  @javax.annotation.Nonnull
  public List<Jockey> getJockeys() {
    return jockeys;
  }

  public void setJockeys(List<Jockey> jockeys) {
    this.jockeys = jockeys;
  }


  public GetHorseRaceDetailsResults race(RaceInfo race) {
    this.race = race;
    return this;
  }

   /**
   * Get race
   * @return race
  **/
  @javax.annotation.Nonnull
  public RaceInfo getRace() {
    return race;
  }

  public void setRace(RaceInfo race) {
    this.race = race;
  }


  public GetHorseRaceDetailsResults venue(Venue venue) {
    this.venue = venue;
    return this;
  }

   /**
   * Get venue
   * @return venue
  **/
  @javax.annotation.Nonnull
  public Venue getVenue() {
    return venue;
  }

  public void setVenue(Venue venue) {
    this.venue = venue;
  }


  public GetHorseRaceDetailsResults country(Country country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  public GetHorseRaceDetailsResults sport(SportNode sport) {
    this.sport = sport;
    return this;
  }

   /**
   * Get sport
   * @return sport
  **/
  @javax.annotation.Nonnull
  public SportNode getSport() {
    return sport;
  }

  public void setSport(SportNode sport) {
    this.sport = sport;
  }


  public GetHorseRaceDetailsResults ar(List<AvailableRace> ar) {
    this.ar = ar;
    return this;
  }

  public GetHorseRaceDetailsResults addArItem(AvailableRace arItem) {
    if (this.ar == null) {
      this.ar = new ArrayList<>();
    }
    this.ar.add(arItem);
    return this;
  }

   /**
   * Get ar
   * @return ar
  **/
  @javax.annotation.Nonnull
  public List<AvailableRace> getAr() {
    return ar;
  }

  public void setAr(List<AvailableRace> ar) {
    this.ar = ar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetHorseRaceDetailsResults getHorseRaceDetailsResults = (GetHorseRaceDetailsResults) o;
    return Objects.equals(this.odds, getHorseRaceDetailsResults.odds) &&
        Objects.equals(this.markets, getHorseRaceDetailsResults.markets) &&
        Objects.equals(this.marketGroups, getHorseRaceDetailsResults.marketGroups) &&
        Objects.equals(this.runners, getHorseRaceDetailsResults.runners) &&
        Objects.equals(this.jockeys, getHorseRaceDetailsResults.jockeys) &&
        Objects.equals(this.race, getHorseRaceDetailsResults.race) &&
        Objects.equals(this.venue, getHorseRaceDetailsResults.venue) &&
        Objects.equals(this.country, getHorseRaceDetailsResults.country) &&
        Objects.equals(this.sport, getHorseRaceDetailsResults.sport) &&
        Objects.equals(this.ar, getHorseRaceDetailsResults.ar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(odds, markets, marketGroups, runners, jockeys, race, venue, country, sport, ar);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetHorseRaceDetailsResults {\n");
    sb.append("    odds: ").append(toIndentedString(odds)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    marketGroups: ").append(toIndentedString(marketGroups)).append("\n");
    sb.append("    runners: ").append(toIndentedString(runners)).append("\n");
    sb.append("    jockeys: ").append(toIndentedString(jockeys)).append("\n");
    sb.append("    race: ").append(toIndentedString(race)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    sport: ").append(toIndentedString(sport)).append("\n");
    sb.append("    ar: ").append(toIndentedString(ar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Odds");
    openapiFields.add("Markets");
    openapiFields.add("MarketGroups");
    openapiFields.add("Runners");
    openapiFields.add("Jockeys");
    openapiFields.add("Race");
    openapiFields.add("Venue");
    openapiFields.add("Country");
    openapiFields.add("Sport");
    openapiFields.add("ar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Odds");
    openapiRequiredFields.add("Markets");
    openapiRequiredFields.add("MarketGroups");
    openapiRequiredFields.add("Runners");
    openapiRequiredFields.add("Jockeys");
    openapiRequiredFields.add("Race");
    openapiRequiredFields.add("Venue");
    openapiRequiredFields.add("Country");
    openapiRequiredFields.add("Sport");
    openapiRequiredFields.add("ar");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetHorseRaceDetailsResults
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetHorseRaceDetailsResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetHorseRaceDetailsResults is not found in the empty JSON string", GetHorseRaceDetailsResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetHorseRaceDetailsResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetHorseRaceDetailsResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetHorseRaceDetailsResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Odds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Odds` to be an array in the JSON string but got `%s`", jsonObj.get("Odds").toString()));
      }

      JsonArray jsonArrayodds = jsonObj.getAsJsonArray("Odds");
      // validate the required field `Odds` (array)
      for (int i = 0; i < jsonArrayodds.size(); i++) {
        HorseRaceOdd.validateJsonElement(jsonArrayodds.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Markets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Markets` to be an array in the JSON string but got `%s`", jsonObj.get("Markets").toString()));
      }

      JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("Markets");
      // validate the required field `Markets` (array)
      for (int i = 0; i < jsonArraymarkets.size(); i++) {
        HorseRaceMarket.validateJsonElement(jsonArraymarkets.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("MarketGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MarketGroups").toString()));
      }

      JsonArray jsonArraymarketGroups = jsonObj.getAsJsonArray("MarketGroups");
      // validate the required field `MarketGroups` (array)
      for (int i = 0; i < jsonArraymarketGroups.size(); i++) {
        HorseRaceMarketGroup.validateJsonElement(jsonArraymarketGroups.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Runners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Runners` to be an array in the JSON string but got `%s`", jsonObj.get("Runners").toString()));
      }

      JsonArray jsonArrayrunners = jsonObj.getAsJsonArray("Runners");
      // validate the required field `Runners` (array)
      for (int i = 0; i < jsonArrayrunners.size(); i++) {
        Runner.validateJsonElement(jsonArrayrunners.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Jockeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Jockeys` to be an array in the JSON string but got `%s`", jsonObj.get("Jockeys").toString()));
      }

      JsonArray jsonArrayjockeys = jsonObj.getAsJsonArray("Jockeys");
      // validate the required field `Jockeys` (array)
      for (int i = 0; i < jsonArrayjockeys.size(); i++) {
        Jockey.validateJsonElement(jsonArrayjockeys.get(i));
      };
      // validate the required field `Race`
      RaceInfo.validateJsonElement(jsonObj.get("Race"));
      // validate the required field `Venue`
      Venue.validateJsonElement(jsonObj.get("Venue"));
      // validate the required field `Country`
      Country.validateJsonElement(jsonObj.get("Country"));
      // validate the required field `Sport`
      SportNode.validateJsonElement(jsonObj.get("Sport"));
      // ensure the json data is an array
      if (!jsonObj.get("ar").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ar` to be an array in the JSON string but got `%s`", jsonObj.get("ar").toString()));
      }

      JsonArray jsonArrayar = jsonObj.getAsJsonArray("ar");
      // validate the required field `ar` (array)
      for (int i = 0; i < jsonArrayar.size(); i++) {
        AvailableRace.validateJsonElement(jsonArrayar.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetHorseRaceDetailsResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetHorseRaceDetailsResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetHorseRaceDetailsResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetHorseRaceDetailsResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GetHorseRaceDetailsResults>() {
           @Override
           public void write(JsonWriter out, GetHorseRaceDetailsResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetHorseRaceDetailsResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetHorseRaceDetailsResults given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetHorseRaceDetailsResults
  * @throws IOException if the JSON string is invalid with respect to GetHorseRaceDetailsResults
  */
  public static GetHorseRaceDetailsResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetHorseRaceDetailsResults.class);
  }

 /**
  * Convert an instance of GetHorseRaceDetailsResults to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

