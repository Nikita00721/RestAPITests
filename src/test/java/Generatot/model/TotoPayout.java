/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TotoPayout
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class TotoPayout {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_IS_SPLIT = "IsSplit";
  @SerializedName(SERIALIZED_NAME_IS_SPLIT)
  private Boolean isSplit;

  public static final String SERIALIZED_NAME_ADD_STAKE = "AddStake";
  @SerializedName(SERIALIZED_NAME_ADD_STAKE)
  private Double addStake;

  public TotoPayout() {
  }

  public TotoPayout category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nonnull
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public TotoPayout amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public TotoPayout isSplit(Boolean isSplit) {
    this.isSplit = isSplit;
    return this;
  }

   /**
   * Get isSplit
   * @return isSplit
  **/
  @javax.annotation.Nonnull
  public Boolean getIsSplit() {
    return isSplit;
  }

  public void setIsSplit(Boolean isSplit) {
    this.isSplit = isSplit;
  }


  public TotoPayout addStake(Double addStake) {
    this.addStake = addStake;
    return this;
  }

   /**
   * Get addStake
   * @return addStake
  **/
  @javax.annotation.Nullable
  public Double getAddStake() {
    return addStake;
  }

  public void setAddStake(Double addStake) {
    this.addStake = addStake;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotoPayout totoPayout = (TotoPayout) o;
    return Objects.equals(this.category, totoPayout.category) &&
        Objects.equals(this.amount, totoPayout.amount) &&
        Objects.equals(this.isSplit, totoPayout.isSplit) &&
        Objects.equals(this.addStake, totoPayout.addStake);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, amount, isSplit, addStake);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotoPayout {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    isSplit: ").append(toIndentedString(isSplit)).append("\n");
    sb.append("    addStake: ").append(toIndentedString(addStake)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("Amount");
    openapiFields.add("IsSplit");
    openapiFields.add("AddStake");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Category");
    openapiRequiredFields.add("Amount");
    openapiRequiredFields.add("IsSplit");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TotoPayout
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotoPayout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotoPayout is not found in the empty JSON string", TotoPayout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotoPayout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotoPayout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotoPayout.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotoPayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotoPayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotoPayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotoPayout.class));

       return (TypeAdapter<T>) new TypeAdapter<TotoPayout>() {
           @Override
           public void write(JsonWriter out, TotoPayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotoPayout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TotoPayout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TotoPayout
  * @throws IOException if the JSON string is invalid with respect to TotoPayout
  */
  public static TotoPayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotoPayout.class);
  }

 /**
  * Convert an instance of TotoPayout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

