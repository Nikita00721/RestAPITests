/*
 * WebApi.Frontend
 * WebApi.Frontend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package Generatot.model;

import Generatot.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.*;

/**
 * SearchEventsResultItemOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-25T19:49:20.010092+03:00[Europe/Moscow]")
public class SearchEventsResultItemOut {
  public static final String SERIALIZED_NAME_SPORT_TYPE_ID = "SportTypeId";
  @SerializedName(SERIALIZED_NAME_SPORT_TYPE_ID)
  private Integer sportTypeId;

  public static final String SERIALIZED_NAME_SPORT_ID = "SportId";
  @SerializedName(SERIALIZED_NAME_SPORT_ID)
  private Integer sportId;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_COMPETITORS = "Competitors";
  @SerializedName(SERIALIZED_NAME_COMPETITORS)
  private List<CompetitorOut> competitors;

  public static final String SERIALIZED_NAME_CHAMP_ID = "ChampId";
  @SerializedName(SERIALIZED_NAME_CHAMP_ID)
  private Long champId;

  public static final String SERIALIZED_NAME_CHAMP_NAME = "ChampName";
  @SerializedName(SERIALIZED_NAME_CHAMP_NAME)
  private String champName;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "CategoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Long categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "CategoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_I_S_O = "ISO";
  @SerializedName(SERIALIZED_NAME_I_S_O)
  private String ISO;

  public static final String SERIALIZED_NAME_IS_LIVE_EVENT = "IsLiveEvent";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_EVENT)
  private Boolean isLiveEvent;

  public static final String SERIALIZED_NAME_LIVE_SCORE = "LiveScore";
  @SerializedName(SERIALIZED_NAME_LIVE_SCORE)
  private String liveScore;

  public static final String SERIALIZED_NAME_LIVE_CURRENT_TIME = "LiveCurrentTime";
  @SerializedName(SERIALIZED_NAME_LIVE_CURRENT_TIME)
  private String liveCurrentTime;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_LIVE_STREAM = "IsLiveStream";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_STREAM)
  private Boolean isLiveStream;

  public static final String SERIALIZED_NAME_STREAM_PROVIDERS = "StreamProviders";
  @SerializedName(SERIALIZED_NAME_STREAM_PROVIDERS)
  private List<Integer> streamProviders;

  public static final String SERIALIZED_NAME_IS_PROMO = "IsPromo";
  @SerializedName(SERIALIZED_NAME_IS_PROMO)
  private Boolean isPromo;

  public static final String SERIALIZED_NAME_IS_LIVE_BOOKED = "IsLiveBooked";
  @SerializedName(SERIALIZED_NAME_IS_LIVE_BOOKED)
  private Boolean isLiveBooked;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_R_C = "RC";
  @SerializedName(SERIALIZED_NAME_R_C)
  private Boolean RC;

  public SearchEventsResultItemOut() {
  }

  public SearchEventsResultItemOut sportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
    return this;
  }

   /**
   * Get sportTypeId
   * @return sportTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getSportTypeId() {
    return sportTypeId;
  }

  public void setSportTypeId(Integer sportTypeId) {
    this.sportTypeId = sportTypeId;
  }


  public SearchEventsResultItemOut sportId(Integer sportId) {
    this.sportId = sportId;
    return this;
  }

   /**
   * Get sportId
   * @return sportId
  **/
  @javax.annotation.Nonnull
  public Integer getSportId() {
    return sportId;
  }

  public void setSportId(Integer sportId) {
    this.sportId = sportId;
  }


  public SearchEventsResultItemOut eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public SearchEventsResultItemOut competitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
    return this;
  }

  public SearchEventsResultItemOut addCompetitorsItem(CompetitorOut competitorsItem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<>();
    }
    this.competitors.add(competitorsItem);
    return this;
  }

   /**
   * Get competitors
   * @return competitors
  **/
  @javax.annotation.Nullable
  public List<CompetitorOut> getCompetitors() {
    return competitors;
  }

  public void setCompetitors(List<CompetitorOut> competitors) {
    this.competitors = competitors;
  }


  public SearchEventsResultItemOut champId(Long champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Get champId
   * @return champId
  **/
  @javax.annotation.Nonnull
  public Long getChampId() {
    return champId;
  }

  public void setChampId(Long champId) {
    this.champId = champId;
  }


  public SearchEventsResultItemOut champName(String champName) {
    this.champName = champName;
    return this;
  }

   /**
   * Get champName
   * @return champName
  **/
  @javax.annotation.Nullable
  public String getChampName() {
    return champName;
  }

  public void setChampName(String champName) {
    this.champName = champName;
  }


  public SearchEventsResultItemOut categoryId(Long categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nonnull
  public Long getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Long categoryId) {
    this.categoryId = categoryId;
  }


  public SearchEventsResultItemOut categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * Get categoryName
   * @return categoryName
  **/
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  public SearchEventsResultItemOut ISO(String ISO) {
    this.ISO = ISO;
    return this;
  }

   /**
   * Get ISO
   * @return ISO
  **/
  @javax.annotation.Nullable
  public String getISO() {
    return ISO;
  }

  public void setISO(String ISO) {
    this.ISO = ISO;
  }


  public SearchEventsResultItemOut isLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
    return this;
  }

   /**
   * Get isLiveEvent
   * @return isLiveEvent
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveEvent() {
    return isLiveEvent;
  }

  public void setIsLiveEvent(Boolean isLiveEvent) {
    this.isLiveEvent = isLiveEvent;
  }


  public SearchEventsResultItemOut liveScore(String liveScore) {
    this.liveScore = liveScore;
    return this;
  }

   /**
   * Get liveScore
   * @return liveScore
  **/
  @javax.annotation.Nullable
  public String getLiveScore() {
    return liveScore;
  }

  public void setLiveScore(String liveScore) {
    this.liveScore = liveScore;
  }


  public SearchEventsResultItemOut liveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
    return this;
  }

   /**
   * Get liveCurrentTime
   * @return liveCurrentTime
  **/
  @javax.annotation.Nullable
  public String getLiveCurrentTime() {
    return liveCurrentTime;
  }

  public void setLiveCurrentTime(String liveCurrentTime) {
    this.liveCurrentTime = liveCurrentTime;
  }


  public SearchEventsResultItemOut id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public SearchEventsResultItemOut name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SearchEventsResultItemOut isLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
    return this;
  }

   /**
   * Get isLiveStream
   * @return isLiveStream
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveStream() {
    return isLiveStream;
  }

  public void setIsLiveStream(Boolean isLiveStream) {
    this.isLiveStream = isLiveStream;
  }


  public SearchEventsResultItemOut streamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
    return this;
  }

  public SearchEventsResultItemOut addStreamProvidersItem(Integer streamProvidersItem) {
    if (this.streamProviders == null) {
      this.streamProviders = new ArrayList<>();
    }
    this.streamProviders.add(streamProvidersItem);
    return this;
  }

   /**
   * Get streamProviders
   * @return streamProviders
  **/
  @javax.annotation.Nullable
  public List<Integer> getStreamProviders() {
    return streamProviders;
  }

  public void setStreamProviders(List<Integer> streamProviders) {
    this.streamProviders = streamProviders;
  }


  public SearchEventsResultItemOut isPromo(Boolean isPromo) {
    this.isPromo = isPromo;
    return this;
  }

   /**
   * Get isPromo
   * @return isPromo
  **/
  @javax.annotation.Nonnull
  public Boolean getIsPromo() {
    return isPromo;
  }

  public void setIsPromo(Boolean isPromo) {
    this.isPromo = isPromo;
  }


  public SearchEventsResultItemOut isLiveBooked(Boolean isLiveBooked) {
    this.isLiveBooked = isLiveBooked;
    return this;
  }

   /**
   * Get isLiveBooked
   * @return isLiveBooked
  **/
  @javax.annotation.Nonnull
  public Boolean getIsLiveBooked() {
    return isLiveBooked;
  }

  public void setIsLiveBooked(Boolean isLiveBooked) {
    this.isLiveBooked = isLiveBooked;
  }


  public SearchEventsResultItemOut endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public SearchEventsResultItemOut RC(Boolean RC) {
    this.RC = RC;
    return this;
  }

   /**
   * Get RC
   * @return RC
  **/
  @javax.annotation.Nullable
  public Boolean getRC() {
    return RC;
  }

  public void setRC(Boolean RC) {
    this.RC = RC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchEventsResultItemOut searchEventsResultItemOut = (SearchEventsResultItemOut) o;
    return Objects.equals(this.sportTypeId, searchEventsResultItemOut.sportTypeId) &&
        Objects.equals(this.sportId, searchEventsResultItemOut.sportId) &&
        Objects.equals(this.eventDate, searchEventsResultItemOut.eventDate) &&
        Objects.equals(this.competitors, searchEventsResultItemOut.competitors) &&
        Objects.equals(this.champId, searchEventsResultItemOut.champId) &&
        Objects.equals(this.champName, searchEventsResultItemOut.champName) &&
        Objects.equals(this.categoryId, searchEventsResultItemOut.categoryId) &&
        Objects.equals(this.categoryName, searchEventsResultItemOut.categoryName) &&
        Objects.equals(this.ISO, searchEventsResultItemOut.ISO) &&
        Objects.equals(this.isLiveEvent, searchEventsResultItemOut.isLiveEvent) &&
        Objects.equals(this.liveScore, searchEventsResultItemOut.liveScore) &&
        Objects.equals(this.liveCurrentTime, searchEventsResultItemOut.liveCurrentTime) &&
        Objects.equals(this.id, searchEventsResultItemOut.id) &&
        Objects.equals(this.name, searchEventsResultItemOut.name) &&
        Objects.equals(this.isLiveStream, searchEventsResultItemOut.isLiveStream) &&
        Objects.equals(this.streamProviders, searchEventsResultItemOut.streamProviders) &&
        Objects.equals(this.isPromo, searchEventsResultItemOut.isPromo) &&
        Objects.equals(this.isLiveBooked, searchEventsResultItemOut.isLiveBooked) &&
        Objects.equals(this.endDate, searchEventsResultItemOut.endDate) &&
        Objects.equals(this.RC, searchEventsResultItemOut.RC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sportTypeId, sportId, eventDate, competitors, champId, champName, categoryId, categoryName, ISO, isLiveEvent, liveScore, liveCurrentTime, id, name, isLiveStream, streamProviders, isPromo, isLiveBooked, endDate, RC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchEventsResultItemOut {\n");
    sb.append("    sportTypeId: ").append(toIndentedString(sportTypeId)).append("\n");
    sb.append("    sportId: ").append(toIndentedString(sportId)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    competitors: ").append(toIndentedString(competitors)).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    champName: ").append(toIndentedString(champName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    ISO: ").append(toIndentedString(ISO)).append("\n");
    sb.append("    isLiveEvent: ").append(toIndentedString(isLiveEvent)).append("\n");
    sb.append("    liveScore: ").append(toIndentedString(liveScore)).append("\n");
    sb.append("    liveCurrentTime: ").append(toIndentedString(liveCurrentTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isLiveStream: ").append(toIndentedString(isLiveStream)).append("\n");
    sb.append("    streamProviders: ").append(toIndentedString(streamProviders)).append("\n");
    sb.append("    isPromo: ").append(toIndentedString(isPromo)).append("\n");
    sb.append("    isLiveBooked: ").append(toIndentedString(isLiveBooked)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    RC: ").append(toIndentedString(RC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SportTypeId");
    openapiFields.add("SportId");
    openapiFields.add("EventDate");
    openapiFields.add("Competitors");
    openapiFields.add("ChampId");
    openapiFields.add("ChampName");
    openapiFields.add("CategoryId");
    openapiFields.add("CategoryName");
    openapiFields.add("ISO");
    openapiFields.add("IsLiveEvent");
    openapiFields.add("LiveScore");
    openapiFields.add("LiveCurrentTime");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("IsLiveStream");
    openapiFields.add("StreamProviders");
    openapiFields.add("IsPromo");
    openapiFields.add("IsLiveBooked");
    openapiFields.add("EndDate");
    openapiFields.add("RC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SportTypeId");
    openapiRequiredFields.add("SportId");
    openapiRequiredFields.add("EventDate");
    openapiRequiredFields.add("ChampId");
    openapiRequiredFields.add("CategoryId");
    openapiRequiredFields.add("IsLiveEvent");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("IsLiveStream");
    openapiRequiredFields.add("IsPromo");
    openapiRequiredFields.add("IsLiveBooked");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SearchEventsResultItemOut
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchEventsResultItemOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchEventsResultItemOut is not found in the empty JSON string", SearchEventsResultItemOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchEventsResultItemOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchEventsResultItemOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchEventsResultItemOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Competitors") != null && !jsonObj.get("Competitors").isJsonNull()) {
        JsonArray jsonArraycompetitors = jsonObj.getAsJsonArray("Competitors");
        if (jsonArraycompetitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Competitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Competitors` to be an array in the JSON string but got `%s`", jsonObj.get("Competitors").toString()));
          }

          // validate the optional field `Competitors` (array)
          for (int i = 0; i < jsonArraycompetitors.size(); i++) {
            CompetitorOut.validateJsonElement(jsonArraycompetitors.get(i));
          };
        }
      }
      if ((jsonObj.get("ChampName") != null && !jsonObj.get("ChampName").isJsonNull()) && !jsonObj.get("ChampName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChampName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChampName").toString()));
      }
      if ((jsonObj.get("CategoryName") != null && !jsonObj.get("CategoryName").isJsonNull()) && !jsonObj.get("CategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryName").toString()));
      }
      if ((jsonObj.get("ISO") != null && !jsonObj.get("ISO").isJsonNull()) && !jsonObj.get("ISO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ISO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ISO").toString()));
      }
      if ((jsonObj.get("LiveScore") != null && !jsonObj.get("LiveScore").isJsonNull()) && !jsonObj.get("LiveScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveScore").toString()));
      }
      if ((jsonObj.get("LiveCurrentTime") != null && !jsonObj.get("LiveCurrentTime").isJsonNull()) && !jsonObj.get("LiveCurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LiveCurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LiveCurrentTime").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StreamProviders") != null && !jsonObj.get("StreamProviders").isJsonNull() && !jsonObj.get("StreamProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamProviders` to be an array in the JSON string but got `%s`", jsonObj.get("StreamProviders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchEventsResultItemOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchEventsResultItemOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchEventsResultItemOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchEventsResultItemOut.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchEventsResultItemOut>() {
           @Override
           public void write(JsonWriter out, SearchEventsResultItemOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchEventsResultItemOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchEventsResultItemOut given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchEventsResultItemOut
  * @throws IOException if the JSON string is invalid with respect to SearchEventsResultItemOut
  */
  public static SearchEventsResultItemOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchEventsResultItemOut.class);
  }

 /**
  * Convert an instance of SearchEventsResultItemOut to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

